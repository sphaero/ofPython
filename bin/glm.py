# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _glm.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_glm')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_glm')
    _glm = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_glm', [dirname(__file__)])
        except ImportError:
            import _glm
            return _glm
        try:
            _mod = imp.load_module('_glm', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _glm = swig_import_helper()
    del swig_import_helper
else:
    import _glm
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class vec2(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = _swig_property(_glm.vec2_x_get, _glm.vec2_x_set)
    y = _swig_property(_glm.vec2_y_get, _glm.vec2_y_set)
    length = staticmethod(_glm.vec2_length)

    def __init__(self, *args):
        _glm.vec2_swiginit(self, _glm.new_vec2(*args))

    def __truediv__(self, *args):
        return _glm.vec2___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _glm.delete_vec2
vec2.__getitem__ = new_instancemethod(_glm.vec2___getitem__, None, vec2)
vec2.__setitem__ = new_instancemethod(_glm.vec2___setitem__, None, vec2)
vec2.__tostring = new_instancemethod(_glm.vec2___tostring, None, vec2)
vec2.__add__ = new_instancemethod(_glm.vec2___add__, None, vec2)
vec2.__sub__ = new_instancemethod(_glm.vec2___sub__, None, vec2)
vec2.__mul__ = new_instancemethod(_glm.vec2___mul__, None, vec2)
vec2.__eq__ = new_instancemethod(_glm.vec2___eq__, None, vec2)
vec2.__ne__ = new_instancemethod(_glm.vec2___ne__, None, vec2)
vec2_swigregister = _glm.vec2_swigregister
vec2_swigregister(vec2)

def vec2_length():
    return _glm.vec2_length()
vec2_length = _glm.vec2_length

class vec3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = _swig_property(_glm.vec3_x_get, _glm.vec3_x_set)
    y = _swig_property(_glm.vec3_y_get, _glm.vec3_y_set)
    z = _swig_property(_glm.vec3_z_get, _glm.vec3_z_set)
    length = staticmethod(_glm.vec3_length)

    def __init__(self, *args):
        _glm.vec3_swiginit(self, _glm.new_vec3(*args))

    def __truediv__(self, *args):
        return _glm.vec3___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _glm.delete_vec3
vec3.__getitem__ = new_instancemethod(_glm.vec3___getitem__, None, vec3)
vec3.__setitem__ = new_instancemethod(_glm.vec3___setitem__, None, vec3)
vec3.__tostring = new_instancemethod(_glm.vec3___tostring, None, vec3)
vec3.__add__ = new_instancemethod(_glm.vec3___add__, None, vec3)
vec3.__sub__ = new_instancemethod(_glm.vec3___sub__, None, vec3)
vec3.__mul__ = new_instancemethod(_glm.vec3___mul__, None, vec3)
vec3.__eq__ = new_instancemethod(_glm.vec3___eq__, None, vec3)
vec3.__ne__ = new_instancemethod(_glm.vec3___ne__, None, vec3)
vec3_swigregister = _glm.vec3_swigregister
vec3_swigregister(vec3)

def vec3_length():
    return _glm.vec3_length()
vec3_length = _glm.vec3_length

class vec4(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = _swig_property(_glm.vec4_x_get, _glm.vec4_x_set)
    y = _swig_property(_glm.vec4_y_get, _glm.vec4_y_set)
    z = _swig_property(_glm.vec4_z_get, _glm.vec4_z_set)
    w = _swig_property(_glm.vec4_w_get, _glm.vec4_w_set)
    length = staticmethod(_glm.vec4_length)

    def __init__(self, *args):
        _glm.vec4_swiginit(self, _glm.new_vec4(*args))

    def __truediv__(self, *args):
        return _glm.vec4___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _glm.delete_vec4
vec4.__getitem__ = new_instancemethod(_glm.vec4___getitem__, None, vec4)
vec4.__setitem__ = new_instancemethod(_glm.vec4___setitem__, None, vec4)
vec4.__tostring = new_instancemethod(_glm.vec4___tostring, None, vec4)
vec4.__add__ = new_instancemethod(_glm.vec4___add__, None, vec4)
vec4.__sub__ = new_instancemethod(_glm.vec4___sub__, None, vec4)
vec4.__mul__ = new_instancemethod(_glm.vec4___mul__, None, vec4)
vec4.__eq__ = new_instancemethod(_glm.vec4___eq__, None, vec4)
vec4.__ne__ = new_instancemethod(_glm.vec4___ne__, None, vec4)
vec4_swigregister = _glm.vec4_swigregister
vec4_swigregister(vec4)

def vec4_length():
    return _glm.vec4_length()
vec4_length = _glm.vec4_length

class mat3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    length = staticmethod(_glm.mat3_length)

    def __init__(self, *args):
        _glm.mat3_swiginit(self, _glm.new_mat3(*args))

    def __truediv__(self, *args):
        return _glm.mat3___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _glm.delete_mat3
mat3.__getitem__ = new_instancemethod(_glm.mat3___getitem__, None, mat3)
mat3.__setitem__ = new_instancemethod(_glm.mat3___setitem__, None, mat3)
mat3.__tostring = new_instancemethod(_glm.mat3___tostring, None, mat3)
mat3.__add__ = new_instancemethod(_glm.mat3___add__, None, mat3)
mat3.__sub__ = new_instancemethod(_glm.mat3___sub__, None, mat3)
mat3.__mul__ = new_instancemethod(_glm.mat3___mul__, None, mat3)
mat3.__eq__ = new_instancemethod(_glm.mat3___eq__, None, mat3)
mat3.__ne__ = new_instancemethod(_glm.mat3___ne__, None, mat3)
mat3_swigregister = _glm.mat3_swigregister
mat3_swigregister(mat3)

def mat3_length():
    return _glm.mat3_length()
mat3_length = _glm.mat3_length

class mat4(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    length = staticmethod(_glm.mat4_length)

    def __init__(self, *args):
        _glm.mat4_swiginit(self, _glm.new_mat4(*args))

    def __truediv__(self, *args):
        return _glm.mat4___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _glm.delete_mat4
mat4.__getitem__ = new_instancemethod(_glm.mat4___getitem__, None, mat4)
mat4.__setitem__ = new_instancemethod(_glm.mat4___setitem__, None, mat4)
mat4.__tostring = new_instancemethod(_glm.mat4___tostring, None, mat4)
mat4.__add__ = new_instancemethod(_glm.mat4___add__, None, mat4)
mat4.__sub__ = new_instancemethod(_glm.mat4___sub__, None, mat4)
mat4.__mul__ = new_instancemethod(_glm.mat4___mul__, None, mat4)
mat4.__eq__ = new_instancemethod(_glm.mat4___eq__, None, mat4)
mat4.__ne__ = new_instancemethod(_glm.mat4___ne__, None, mat4)
mat4_swigregister = _glm.mat4_swigregister
mat4_swigregister(mat4)

def mat4_length():
    return _glm.mat4_length()
mat4_length = _glm.mat4_length


def __sub__(*args):
    return _glm.__sub__(*args)
__sub__ = _glm.__sub__
class quat(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = _swig_property(_glm.quat_x_get, _glm.quat_x_set)
    y = _swig_property(_glm.quat_y_get, _glm.quat_y_set)
    z = _swig_property(_glm.quat_z_get, _glm.quat_z_set)
    w = _swig_property(_glm.quat_w_get, _glm.quat_w_set)
    length = staticmethod(_glm.quat_length)

    def __init__(self, *args):
        _glm.quat_swiginit(self, _glm.new_quat(*args))

    def __truediv__(self, *args):
        return _glm.quat___truediv__(self, *args)
    __div__ = __truediv__


    __swig_destroy__ = _glm.delete_quat
quat.__getitem__ = new_instancemethod(_glm.quat___getitem__, None, quat)
quat.__setitem__ = new_instancemethod(_glm.quat___setitem__, None, quat)
quat.__tostring = new_instancemethod(_glm.quat___tostring, None, quat)
quat.__add__ = new_instancemethod(_glm.quat___add__, None, quat)
quat.__mul__ = new_instancemethod(_glm.quat___mul__, None, quat)
quat.__eq__ = new_instancemethod(_glm.quat___eq__, None, quat)
quat.__ne__ = new_instancemethod(_glm.quat___ne__, None, quat)
quat_swigregister = _glm.quat_swigregister
quat_swigregister(quat)

def quat_length():
    return _glm.quat_length()
quat_length = _glm.quat_length


def __add__(*args):
    return _glm.__add__(*args)
__add__ = _glm.__add__

def __mul__(*args):
    return _glm.__mul__(*args)
__mul__ = _glm.__mul__

def __truediv__(*args):
    return _glm.__truediv__(*args)
__truediv__ = _glm.__truediv__

def __eq__(*args):
    return _glm.__eq__(*args)
__eq__ = _glm.__eq__

def __ne__(*args):
    return _glm.__ne__(*args)
__ne__ = _glm.__ne__

def conjugate(q):
    return _glm.conjugate(q)
conjugate = _glm.conjugate

def eulerAngles(x):
    return _glm.eulerAngles(x)
eulerAngles = _glm.eulerAngles

def roll(x):
    return _glm.roll(x)
roll = _glm.roll

def pitch(x):
    return _glm.pitch(x)
pitch = _glm.pitch

def yaw(x):
    return _glm.yaw(x)
yaw = _glm.yaw

def mat3_cast(x):
    return _glm.mat3_cast(x)
mat3_cast = _glm.mat3_cast

def mat4_cast(x):
    return _glm.mat4_cast(x)
mat4_cast = _glm.mat4_cast

def quat_cast(*args):
    return _glm.quat_cast(*args)
quat_cast = _glm.quat_cast

def axis(x):
    return _glm.axis(x)
axis = _glm.axis

def angleAxis(angle, axis):
    return _glm.angleAxis(angle, axis)
angleAxis = _glm.angleAxis

def epsilon():
    return _glm.epsilon()
epsilon = _glm.epsilon

def zero():
    return _glm.zero()
zero = _glm.zero

def one():
    return _glm.one()
one = _glm.one

def pi():
    return _glm.pi()
pi = _glm.pi

def root_pi():
    return _glm.root_pi()
root_pi = _glm.root_pi

def half_pi():
    return _glm.half_pi()
half_pi = _glm.half_pi

def quarter_pi():
    return _glm.quarter_pi()
quarter_pi = _glm.quarter_pi

def one_over_pi():
    return _glm.one_over_pi()
one_over_pi = _glm.one_over_pi

def two_over_pi():
    return _glm.two_over_pi()
two_over_pi = _glm.two_over_pi

def two_over_root_pi():
    return _glm.two_over_root_pi()
two_over_root_pi = _glm.two_over_root_pi

def one_over_root_two():
    return _glm.one_over_root_two()
one_over_root_two = _glm.one_over_root_two

def root_half_pi():
    return _glm.root_half_pi()
root_half_pi = _glm.root_half_pi

def root_two_pi():
    return _glm.root_two_pi()
root_two_pi = _glm.root_two_pi

def root_ln_four():
    return _glm.root_ln_four()
root_ln_four = _glm.root_ln_four

def e():
    return _glm.e()
e = _glm.e

def euler():
    return _glm.euler()
euler = _glm.euler

def root_two():
    return _glm.root_two()
root_two = _glm.root_two

def root_three():
    return _glm.root_three()
root_three = _glm.root_three

def root_five():
    return _glm.root_five()
root_five = _glm.root_five

def ln_two():
    return _glm.ln_two()
ln_two = _glm.ln_two

def ln_ten():
    return _glm.ln_ten()
ln_ten = _glm.ln_ten

def ln_ln_two():
    return _glm.ln_ln_two()
ln_ln_two = _glm.ln_ln_two

def third():
    return _glm.third()
third = _glm.third

def two_thirds():
    return _glm.two_thirds()
two_thirds = _glm.two_thirds

def golden_ratio():
    return _glm.golden_ratio()
golden_ratio = _glm.golden_ratio

def abs(*args):
    return _glm.abs(*args)
abs = _glm.abs

def sign(*args):
    return _glm.sign(*args)
sign = _glm.sign

def floor(*args):
    return _glm.floor(*args)
floor = _glm.floor

def trunc(*args):
    return _glm.trunc(*args)
trunc = _glm.trunc

def round(*args):
    return _glm.round(*args)
round = _glm.round

def roundEven(*args):
    return _glm.roundEven(*args)
roundEven = _glm.roundEven

def ceil(*args):
    return _glm.ceil(*args)
ceil = _glm.ceil

def fract(*args):
    return _glm.fract(*args)
fract = _glm.fract

def mod(*args):
    return _glm.mod(*args)
mod = _glm.mod

def modf(*args):
    return _glm.modf(*args)
modf = _glm.modf

def min(*args):
    return _glm.min(*args)
min = _glm.min

def max(*args):
    return _glm.max(*args)
max = _glm.max

def clamp(*args):
    return _glm.clamp(*args)
clamp = _glm.clamp

def mix(*args):
    return _glm.mix(*args)
mix = _glm.mix

def step(*args):
    return _glm.step(*args)
step = _glm.step

def smoothstep(*args):
    return _glm.smoothstep(*args)
smoothstep = _glm.smoothstep

def isnan(arg1):
    return _glm.isnan(arg1)
isnan = _glm.isnan

def isinf(arg1):
    return _glm.isinf(arg1)
isinf = _glm.isinf

def fma(*args):
    return _glm.fma(*args)
fma = _glm.fma

def pow(*args):
    return _glm.pow(*args)
pow = _glm.pow

def exp(*args):
    return _glm.exp(*args)
exp = _glm.exp

def log(*args):
    return _glm.log(*args)
log = _glm.log

def exp2(*args):
    return _glm.exp2(*args)
exp2 = _glm.exp2

def log2(*args):
    return _glm.log2(*args)
log2 = _glm.log2

def sqrt(*args):
    return _glm.sqrt(*args)
sqrt = _glm.sqrt

def inversesqrt(*args):
    return _glm.inversesqrt(*args)
inversesqrt = _glm.inversesqrt

def length(*args):
    return _glm.length(*args)
length = _glm.length

def distance(*args):
    return _glm.distance(*args)
distance = _glm.distance

def dot(*args):
    return _glm.dot(*args)
dot = _glm.dot

def cross(arg1, arg2):
    return _glm.cross(arg1, arg2)
cross = _glm.cross

def normalize(*args):
    return _glm.normalize(*args)
normalize = _glm.normalize

def faceforward(*args):
    return _glm.faceforward(*args)
faceforward = _glm.faceforward

def reflect(*args):
    return _glm.reflect(*args)
reflect = _glm.reflect

def refract(*args):
    return _glm.refract(*args)
refract = _glm.refract

def matrixCompMult(*args):
    return _glm.matrixCompMult(*args)
matrixCompMult = _glm.matrixCompMult

def outerProduct(*args):
    return _glm.outerProduct(*args)
outerProduct = _glm.outerProduct

def transpose(*args):
    return _glm.transpose(*args)
transpose = _glm.transpose

def determinant(*args):
    return _glm.determinant(*args)
determinant = _glm.determinant

def inverse(*args):
    return _glm.inverse(*args)
inverse = _glm.inverse

def radians(*args):
    return _glm.radians(*args)
radians = _glm.radians

def degrees(*args):
    return _glm.degrees(*args)
degrees = _glm.degrees

def sin(*args):
    return _glm.sin(*args)
sin = _glm.sin

def cos(*args):
    return _glm.cos(*args)
cos = _glm.cos

def tan(*args):
    return _glm.tan(*args)
tan = _glm.tan

def asin(*args):
    return _glm.asin(*args)
asin = _glm.asin

def acos(*args):
    return _glm.acos(*args)
acos = _glm.acos

def atan(*args):
    return _glm.atan(*args)
atan = _glm.atan

def sinh(*args):
    return _glm.sinh(*args)
sinh = _glm.sinh

def cosh(*args):
    return _glm.cosh(*args)
cosh = _glm.cosh

def tanh(*args):
    return _glm.tanh(*args)
tanh = _glm.tanh

def asinh(*args):
    return _glm.asinh(*args)
asinh = _glm.asinh

def acosh(*args):
    return _glm.acosh(*args)
acosh = _glm.acosh

def atanh(*args):
    return _glm.atanh(*args)
atanh = _glm.atanh

def epsilonEqual(*args):
    return _glm.epsilonEqual(*args)
epsilonEqual = _glm.epsilonEqual

def epsilonNotEqual(*args):
    return _glm.epsilonNotEqual(*args)
epsilonNotEqual = _glm.epsilonNotEqual

def row(*args):
    return _glm.row(*args)
row = _glm.row

def column(*args):
    return _glm.column(*args)
column = _glm.column

def affineInverse(*args):
    return _glm.affineInverse(*args)
affineInverse = _glm.affineInverse

def inverseTranspose(*args):
    return _glm.inverseTranspose(*args)
inverseTranspose = _glm.inverseTranspose

def ortho(*args):
    return _glm.ortho(*args)
ortho = _glm.ortho

def frustum(arg1, arg2, arg3, arg4, arg5, arg6):
    return _glm.frustum(arg1, arg2, arg3, arg4, arg5, arg6)
frustum = _glm.frustum

def perspective(arg1, arg2, arg3, arg4):
    return _glm.perspective(arg1, arg2, arg3, arg4)
perspective = _glm.perspective

def perspectiveFov(arg1, arg2, arg3, arg4, arg5):
    return _glm.perspectiveFov(arg1, arg2, arg3, arg4, arg5)
perspectiveFov = _glm.perspectiveFov

def infinitePerspective(arg1, arg2, arg3):
    return _glm.infinitePerspective(arg1, arg2, arg3)
infinitePerspective = _glm.infinitePerspective

def tweakedInfinitePerspective(arg1, arg2, arg3):
    return _glm.tweakedInfinitePerspective(arg1, arg2, arg3)
tweakedInfinitePerspective = _glm.tweakedInfinitePerspective

def project(arg1, arg2, arg3, arg4):
    return _glm.project(arg1, arg2, arg3, arg4)
project = _glm.project

def unProject(arg1, arg2, arg3, arg4):
    return _glm.unProject(arg1, arg2, arg3, arg4)
unProject = _glm.unProject

def pickMatrix(arg1, arg2, arg3):
    return _glm.pickMatrix(arg1, arg2, arg3)
pickMatrix = _glm.pickMatrix

def lookAt(arg1, arg2, arg3):
    return _glm.lookAt(arg1, arg2, arg3)
lookAt = _glm.lookAt

def atan2(*args):
    return _glm.atan2(*args)
atan2 = _glm.atan2

def isfinite(*args):
    return _glm.isfinite(*args)
isfinite = _glm.isfinite

def lerp(*args):
    return _glm.lerp(*args)
lerp = _glm.lerp

def saturate(*args):
    return _glm.saturate(*args)
saturate = _glm.saturate

def fastSqrt(*args):
    return _glm.fastSqrt(*args)
fastSqrt = _glm.fastSqrt

def fastInverseSqrt(*args):
    return _glm.fastInverseSqrt(*args)
fastInverseSqrt = _glm.fastInverseSqrt

def fastLength(*args):
    return _glm.fastLength(*args)
fastLength = _glm.fastLength

def fastDistance(*args):
    return _glm.fastDistance(*args)
fastDistance = _glm.fastDistance

def fastNormalize(*args):
    return _glm.fastNormalize(*args)
fastNormalize = _glm.fastNormalize

def length2(*args):
    return _glm.length2(*args)
length2 = _glm.length2

def distance2(*args):
    return _glm.distance2(*args)
distance2 = _glm.distance2

def l1Norm(*args):
    return _glm.l1Norm(*args)
l1Norm = _glm.l1Norm

def l2Norm(*args):
    return _glm.l2Norm(*args)
l2Norm = _glm.l2Norm

def lxNorm(*args):
    return _glm.lxNorm(*args)
lxNorm = _glm.lxNorm

def perp(*args):
    return _glm.perp(*args)
perp = _glm.perp

def orientation(arg1, arg2):
    return _glm.orientation(arg1, arg2)
orientation = _glm.orientation

def rotateX(*args):
    return _glm.rotateX(*args)
rotateX = _glm.rotateX

def rotateY(*args):
    return _glm.rotateY(*args)
rotateY = _glm.rotateY

def rotateZ(*args):
    return _glm.rotateZ(*args)
rotateZ = _glm.rotateZ

def slerp(*args):
    return _glm.slerp(*args)
slerp = _glm.slerp

def catmullRom(*args):
    return _glm.catmullRom(*args)
catmullRom = _glm.catmullRom

def cubic(*args):
    return _glm.cubic(*args)
cubic = _glm.cubic

def hermite(*args):
    return _glm.hermite(*args)
hermite = _glm.hermite

def rotate(*args):
    return _glm.rotate(*args)
rotate = _glm.rotate

def scale(*args):
    return _glm.scale(*args)
scale = _glm.scale

def translate(*args):
    return _glm.translate(*args)
translate = _glm.translate

def angle(*args):
    return _glm.angle(*args)
angle = _glm.angle

def orientedAngle(*args):
    return _glm.orientedAngle(*args)
orientedAngle = _glm.orientedAngle


