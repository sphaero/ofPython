# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _openframeworks.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_openframeworks')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_openframeworks')
    _openframeworks = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openframeworks', [dirname(__file__)])
        except ImportError:
            import _openframeworks
            return _openframeworks
        try:
            _mod = imp.load_module('_openframeworks', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _openframeworks = swig_import_helper()
    del swig_import_helper
else:
    import _openframeworks
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_openframeworks.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_openframeworks.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_openframeworks.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_openframeworks.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_openframeworks.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_openframeworks.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_openframeworks.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_openframeworks.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_openframeworks.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_openframeworks.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_openframeworks.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_openframeworks.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_openframeworks.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_openframeworks.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_openframeworks.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_openframeworks.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _openframeworks.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)



# handle typedefs which swig doesn't wrap
#ofPoint = ofVec3f

# renaming log -> ofLog
#ofLog = log
#del log

OF_PRIMITIVE_TRIANGLE_STRIP = None


class IntVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _openframeworks.IntVector_swiginit(self, _openframeworks.new_IntVector(*args))
    __swig_destroy__ = _openframeworks.delete_IntVector
IntVector.iterator = new_instancemethod(_openframeworks.IntVector_iterator, None, IntVector)
IntVector.__nonzero__ = new_instancemethod(_openframeworks.IntVector___nonzero__, None, IntVector)
IntVector.__bool__ = new_instancemethod(_openframeworks.IntVector___bool__, None, IntVector)
IntVector.__len__ = new_instancemethod(_openframeworks.IntVector___len__, None, IntVector)
IntVector.__getslice__ = new_instancemethod(_openframeworks.IntVector___getslice__, None, IntVector)
IntVector.__setslice__ = new_instancemethod(_openframeworks.IntVector___setslice__, None, IntVector)
IntVector.__delslice__ = new_instancemethod(_openframeworks.IntVector___delslice__, None, IntVector)
IntVector.__delitem__ = new_instancemethod(_openframeworks.IntVector___delitem__, None, IntVector)
IntVector.__getitem__ = new_instancemethod(_openframeworks.IntVector___getitem__, None, IntVector)
IntVector.__setitem__ = new_instancemethod(_openframeworks.IntVector___setitem__, None, IntVector)
IntVector.pop = new_instancemethod(_openframeworks.IntVector_pop, None, IntVector)
IntVector.append = new_instancemethod(_openframeworks.IntVector_append, None, IntVector)
IntVector.empty = new_instancemethod(_openframeworks.IntVector_empty, None, IntVector)
IntVector.size = new_instancemethod(_openframeworks.IntVector_size, None, IntVector)
IntVector.swap = new_instancemethod(_openframeworks.IntVector_swap, None, IntVector)
IntVector.begin = new_instancemethod(_openframeworks.IntVector_begin, None, IntVector)
IntVector.end = new_instancemethod(_openframeworks.IntVector_end, None, IntVector)
IntVector.rbegin = new_instancemethod(_openframeworks.IntVector_rbegin, None, IntVector)
IntVector.rend = new_instancemethod(_openframeworks.IntVector_rend, None, IntVector)
IntVector.clear = new_instancemethod(_openframeworks.IntVector_clear, None, IntVector)
IntVector.get_allocator = new_instancemethod(_openframeworks.IntVector_get_allocator, None, IntVector)
IntVector.pop_back = new_instancemethod(_openframeworks.IntVector_pop_back, None, IntVector)
IntVector.erase = new_instancemethod(_openframeworks.IntVector_erase, None, IntVector)
IntVector.push_back = new_instancemethod(_openframeworks.IntVector_push_back, None, IntVector)
IntVector.front = new_instancemethod(_openframeworks.IntVector_front, None, IntVector)
IntVector.back = new_instancemethod(_openframeworks.IntVector_back, None, IntVector)
IntVector.assign = new_instancemethod(_openframeworks.IntVector_assign, None, IntVector)
IntVector.resize = new_instancemethod(_openframeworks.IntVector_resize, None, IntVector)
IntVector.insert = new_instancemethod(_openframeworks.IntVector_insert, None, IntVector)
IntVector.reserve = new_instancemethod(_openframeworks.IntVector_reserve, None, IntVector)
IntVector.capacity = new_instancemethod(_openframeworks.IntVector_capacity, None, IntVector)
IntVector_swigregister = _openframeworks.IntVector_swigregister
IntVector_swigregister(IntVector)

class FloatVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _openframeworks.FloatVector_swiginit(self, _openframeworks.new_FloatVector(*args))
    __swig_destroy__ = _openframeworks.delete_FloatVector
FloatVector.iterator = new_instancemethod(_openframeworks.FloatVector_iterator, None, FloatVector)
FloatVector.__nonzero__ = new_instancemethod(_openframeworks.FloatVector___nonzero__, None, FloatVector)
FloatVector.__bool__ = new_instancemethod(_openframeworks.FloatVector___bool__, None, FloatVector)
FloatVector.__len__ = new_instancemethod(_openframeworks.FloatVector___len__, None, FloatVector)
FloatVector.__getslice__ = new_instancemethod(_openframeworks.FloatVector___getslice__, None, FloatVector)
FloatVector.__setslice__ = new_instancemethod(_openframeworks.FloatVector___setslice__, None, FloatVector)
FloatVector.__delslice__ = new_instancemethod(_openframeworks.FloatVector___delslice__, None, FloatVector)
FloatVector.__delitem__ = new_instancemethod(_openframeworks.FloatVector___delitem__, None, FloatVector)
FloatVector.__getitem__ = new_instancemethod(_openframeworks.FloatVector___getitem__, None, FloatVector)
FloatVector.__setitem__ = new_instancemethod(_openframeworks.FloatVector___setitem__, None, FloatVector)
FloatVector.pop = new_instancemethod(_openframeworks.FloatVector_pop, None, FloatVector)
FloatVector.append = new_instancemethod(_openframeworks.FloatVector_append, None, FloatVector)
FloatVector.empty = new_instancemethod(_openframeworks.FloatVector_empty, None, FloatVector)
FloatVector.size = new_instancemethod(_openframeworks.FloatVector_size, None, FloatVector)
FloatVector.swap = new_instancemethod(_openframeworks.FloatVector_swap, None, FloatVector)
FloatVector.begin = new_instancemethod(_openframeworks.FloatVector_begin, None, FloatVector)
FloatVector.end = new_instancemethod(_openframeworks.FloatVector_end, None, FloatVector)
FloatVector.rbegin = new_instancemethod(_openframeworks.FloatVector_rbegin, None, FloatVector)
FloatVector.rend = new_instancemethod(_openframeworks.FloatVector_rend, None, FloatVector)
FloatVector.clear = new_instancemethod(_openframeworks.FloatVector_clear, None, FloatVector)
FloatVector.get_allocator = new_instancemethod(_openframeworks.FloatVector_get_allocator, None, FloatVector)
FloatVector.pop_back = new_instancemethod(_openframeworks.FloatVector_pop_back, None, FloatVector)
FloatVector.erase = new_instancemethod(_openframeworks.FloatVector_erase, None, FloatVector)
FloatVector.push_back = new_instancemethod(_openframeworks.FloatVector_push_back, None, FloatVector)
FloatVector.front = new_instancemethod(_openframeworks.FloatVector_front, None, FloatVector)
FloatVector.back = new_instancemethod(_openframeworks.FloatVector_back, None, FloatVector)
FloatVector.assign = new_instancemethod(_openframeworks.FloatVector_assign, None, FloatVector)
FloatVector.resize = new_instancemethod(_openframeworks.FloatVector_resize, None, FloatVector)
FloatVector.insert = new_instancemethod(_openframeworks.FloatVector_insert, None, FloatVector)
FloatVector.reserve = new_instancemethod(_openframeworks.FloatVector_reserve, None, FloatVector)
FloatVector.capacity = new_instancemethod(_openframeworks.FloatVector_capacity, None, FloatVector)
FloatVector_swigregister = _openframeworks.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class StringVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _openframeworks.StringVector_swiginit(self, _openframeworks.new_StringVector(*args))
    __swig_destroy__ = _openframeworks.delete_StringVector
StringVector.iterator = new_instancemethod(_openframeworks.StringVector_iterator, None, StringVector)
StringVector.__nonzero__ = new_instancemethod(_openframeworks.StringVector___nonzero__, None, StringVector)
StringVector.__bool__ = new_instancemethod(_openframeworks.StringVector___bool__, None, StringVector)
StringVector.__len__ = new_instancemethod(_openframeworks.StringVector___len__, None, StringVector)
StringVector.__getslice__ = new_instancemethod(_openframeworks.StringVector___getslice__, None, StringVector)
StringVector.__setslice__ = new_instancemethod(_openframeworks.StringVector___setslice__, None, StringVector)
StringVector.__delslice__ = new_instancemethod(_openframeworks.StringVector___delslice__, None, StringVector)
StringVector.__delitem__ = new_instancemethod(_openframeworks.StringVector___delitem__, None, StringVector)
StringVector.__getitem__ = new_instancemethod(_openframeworks.StringVector___getitem__, None, StringVector)
StringVector.__setitem__ = new_instancemethod(_openframeworks.StringVector___setitem__, None, StringVector)
StringVector.pop = new_instancemethod(_openframeworks.StringVector_pop, None, StringVector)
StringVector.append = new_instancemethod(_openframeworks.StringVector_append, None, StringVector)
StringVector.empty = new_instancemethod(_openframeworks.StringVector_empty, None, StringVector)
StringVector.size = new_instancemethod(_openframeworks.StringVector_size, None, StringVector)
StringVector.swap = new_instancemethod(_openframeworks.StringVector_swap, None, StringVector)
StringVector.begin = new_instancemethod(_openframeworks.StringVector_begin, None, StringVector)
StringVector.end = new_instancemethod(_openframeworks.StringVector_end, None, StringVector)
StringVector.rbegin = new_instancemethod(_openframeworks.StringVector_rbegin, None, StringVector)
StringVector.rend = new_instancemethod(_openframeworks.StringVector_rend, None, StringVector)
StringVector.clear = new_instancemethod(_openframeworks.StringVector_clear, None, StringVector)
StringVector.get_allocator = new_instancemethod(_openframeworks.StringVector_get_allocator, None, StringVector)
StringVector.pop_back = new_instancemethod(_openframeworks.StringVector_pop_back, None, StringVector)
StringVector.erase = new_instancemethod(_openframeworks.StringVector_erase, None, StringVector)
StringVector.push_back = new_instancemethod(_openframeworks.StringVector_push_back, None, StringVector)
StringVector.front = new_instancemethod(_openframeworks.StringVector_front, None, StringVector)
StringVector.back = new_instancemethod(_openframeworks.StringVector_back, None, StringVector)
StringVector.assign = new_instancemethod(_openframeworks.StringVector_assign, None, StringVector)
StringVector.resize = new_instancemethod(_openframeworks.StringVector_resize, None, StringVector)
StringVector.insert = new_instancemethod(_openframeworks.StringVector_insert, None, StringVector)
StringVector.reserve = new_instancemethod(_openframeworks.StringVector_reserve, None, StringVector)
StringVector.capacity = new_instancemethod(_openframeworks.StringVector_capacity, None, StringVector)
StringVector_swigregister = _openframeworks.StringVector_swigregister
StringVector_swigregister(StringVector)

class UCharVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _openframeworks.UCharVector_swiginit(self, _openframeworks.new_UCharVector(*args))
    __swig_destroy__ = _openframeworks.delete_UCharVector
UCharVector.iterator = new_instancemethod(_openframeworks.UCharVector_iterator, None, UCharVector)
UCharVector.__nonzero__ = new_instancemethod(_openframeworks.UCharVector___nonzero__, None, UCharVector)
UCharVector.__bool__ = new_instancemethod(_openframeworks.UCharVector___bool__, None, UCharVector)
UCharVector.__len__ = new_instancemethod(_openframeworks.UCharVector___len__, None, UCharVector)
UCharVector.__getslice__ = new_instancemethod(_openframeworks.UCharVector___getslice__, None, UCharVector)
UCharVector.__setslice__ = new_instancemethod(_openframeworks.UCharVector___setslice__, None, UCharVector)
UCharVector.__delslice__ = new_instancemethod(_openframeworks.UCharVector___delslice__, None, UCharVector)
UCharVector.__delitem__ = new_instancemethod(_openframeworks.UCharVector___delitem__, None, UCharVector)
UCharVector.__getitem__ = new_instancemethod(_openframeworks.UCharVector___getitem__, None, UCharVector)
UCharVector.__setitem__ = new_instancemethod(_openframeworks.UCharVector___setitem__, None, UCharVector)
UCharVector.pop = new_instancemethod(_openframeworks.UCharVector_pop, None, UCharVector)
UCharVector.append = new_instancemethod(_openframeworks.UCharVector_append, None, UCharVector)
UCharVector.empty = new_instancemethod(_openframeworks.UCharVector_empty, None, UCharVector)
UCharVector.size = new_instancemethod(_openframeworks.UCharVector_size, None, UCharVector)
UCharVector.swap = new_instancemethod(_openframeworks.UCharVector_swap, None, UCharVector)
UCharVector.begin = new_instancemethod(_openframeworks.UCharVector_begin, None, UCharVector)
UCharVector.end = new_instancemethod(_openframeworks.UCharVector_end, None, UCharVector)
UCharVector.rbegin = new_instancemethod(_openframeworks.UCharVector_rbegin, None, UCharVector)
UCharVector.rend = new_instancemethod(_openframeworks.UCharVector_rend, None, UCharVector)
UCharVector.clear = new_instancemethod(_openframeworks.UCharVector_clear, None, UCharVector)
UCharVector.get_allocator = new_instancemethod(_openframeworks.UCharVector_get_allocator, None, UCharVector)
UCharVector.pop_back = new_instancemethod(_openframeworks.UCharVector_pop_back, None, UCharVector)
UCharVector.erase = new_instancemethod(_openframeworks.UCharVector_erase, None, UCharVector)
UCharVector.push_back = new_instancemethod(_openframeworks.UCharVector_push_back, None, UCharVector)
UCharVector.front = new_instancemethod(_openframeworks.UCharVector_front, None, UCharVector)
UCharVector.back = new_instancemethod(_openframeworks.UCharVector_back, None, UCharVector)
UCharVector.assign = new_instancemethod(_openframeworks.UCharVector_assign, None, UCharVector)
UCharVector.resize = new_instancemethod(_openframeworks.UCharVector_resize, None, UCharVector)
UCharVector.insert = new_instancemethod(_openframeworks.UCharVector_insert, None, UCharVector)
UCharVector.reserve = new_instancemethod(_openframeworks.UCharVector_reserve, None, UCharVector)
UCharVector.capacity = new_instancemethod(_openframeworks.UCharVector_capacity, None, UCharVector)
UCharVector_swigregister = _openframeworks.UCharVector_swigregister
UCharVector_swigregister(UCharVector)

class VideoDeviceVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _openframeworks.VideoDeviceVector_swiginit(self, _openframeworks.new_VideoDeviceVector(*args))
    __swig_destroy__ = _openframeworks.delete_VideoDeviceVector
VideoDeviceVector.iterator = new_instancemethod(_openframeworks.VideoDeviceVector_iterator, None, VideoDeviceVector)
VideoDeviceVector.__nonzero__ = new_instancemethod(_openframeworks.VideoDeviceVector___nonzero__, None, VideoDeviceVector)
VideoDeviceVector.__bool__ = new_instancemethod(_openframeworks.VideoDeviceVector___bool__, None, VideoDeviceVector)
VideoDeviceVector.__len__ = new_instancemethod(_openframeworks.VideoDeviceVector___len__, None, VideoDeviceVector)
VideoDeviceVector.__getslice__ = new_instancemethod(_openframeworks.VideoDeviceVector___getslice__, None, VideoDeviceVector)
VideoDeviceVector.__setslice__ = new_instancemethod(_openframeworks.VideoDeviceVector___setslice__, None, VideoDeviceVector)
VideoDeviceVector.__delslice__ = new_instancemethod(_openframeworks.VideoDeviceVector___delslice__, None, VideoDeviceVector)
VideoDeviceVector.__delitem__ = new_instancemethod(_openframeworks.VideoDeviceVector___delitem__, None, VideoDeviceVector)
VideoDeviceVector.__getitem__ = new_instancemethod(_openframeworks.VideoDeviceVector___getitem__, None, VideoDeviceVector)
VideoDeviceVector.__setitem__ = new_instancemethod(_openframeworks.VideoDeviceVector___setitem__, None, VideoDeviceVector)
VideoDeviceVector.pop = new_instancemethod(_openframeworks.VideoDeviceVector_pop, None, VideoDeviceVector)
VideoDeviceVector.append = new_instancemethod(_openframeworks.VideoDeviceVector_append, None, VideoDeviceVector)
VideoDeviceVector.empty = new_instancemethod(_openframeworks.VideoDeviceVector_empty, None, VideoDeviceVector)
VideoDeviceVector.size = new_instancemethod(_openframeworks.VideoDeviceVector_size, None, VideoDeviceVector)
VideoDeviceVector.swap = new_instancemethod(_openframeworks.VideoDeviceVector_swap, None, VideoDeviceVector)
VideoDeviceVector.begin = new_instancemethod(_openframeworks.VideoDeviceVector_begin, None, VideoDeviceVector)
VideoDeviceVector.end = new_instancemethod(_openframeworks.VideoDeviceVector_end, None, VideoDeviceVector)
VideoDeviceVector.rbegin = new_instancemethod(_openframeworks.VideoDeviceVector_rbegin, None, VideoDeviceVector)
VideoDeviceVector.rend = new_instancemethod(_openframeworks.VideoDeviceVector_rend, None, VideoDeviceVector)
VideoDeviceVector.clear = new_instancemethod(_openframeworks.VideoDeviceVector_clear, None, VideoDeviceVector)
VideoDeviceVector.get_allocator = new_instancemethod(_openframeworks.VideoDeviceVector_get_allocator, None, VideoDeviceVector)
VideoDeviceVector.pop_back = new_instancemethod(_openframeworks.VideoDeviceVector_pop_back, None, VideoDeviceVector)
VideoDeviceVector.erase = new_instancemethod(_openframeworks.VideoDeviceVector_erase, None, VideoDeviceVector)
VideoDeviceVector.push_back = new_instancemethod(_openframeworks.VideoDeviceVector_push_back, None, VideoDeviceVector)
VideoDeviceVector.front = new_instancemethod(_openframeworks.VideoDeviceVector_front, None, VideoDeviceVector)
VideoDeviceVector.back = new_instancemethod(_openframeworks.VideoDeviceVector_back, None, VideoDeviceVector)
VideoDeviceVector.assign = new_instancemethod(_openframeworks.VideoDeviceVector_assign, None, VideoDeviceVector)
VideoDeviceVector.resize = new_instancemethod(_openframeworks.VideoDeviceVector_resize, None, VideoDeviceVector)
VideoDeviceVector.insert = new_instancemethod(_openframeworks.VideoDeviceVector_insert, None, VideoDeviceVector)
VideoDeviceVector.reserve = new_instancemethod(_openframeworks.VideoDeviceVector_reserve, None, VideoDeviceVector)
VideoDeviceVector.capacity = new_instancemethod(_openframeworks.VideoDeviceVector_capacity, None, VideoDeviceVector)
VideoDeviceVector_swigregister = _openframeworks.VideoDeviceVector_swigregister
VideoDeviceVector_swigregister(VideoDeviceVector)

class TextureVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _openframeworks.TextureVector_swiginit(self, _openframeworks.new_TextureVector(*args))
    __swig_destroy__ = _openframeworks.delete_TextureVector
TextureVector.iterator = new_instancemethod(_openframeworks.TextureVector_iterator, None, TextureVector)
TextureVector.__nonzero__ = new_instancemethod(_openframeworks.TextureVector___nonzero__, None, TextureVector)
TextureVector.__bool__ = new_instancemethod(_openframeworks.TextureVector___bool__, None, TextureVector)
TextureVector.__len__ = new_instancemethod(_openframeworks.TextureVector___len__, None, TextureVector)
TextureVector.__getslice__ = new_instancemethod(_openframeworks.TextureVector___getslice__, None, TextureVector)
TextureVector.__setslice__ = new_instancemethod(_openframeworks.TextureVector___setslice__, None, TextureVector)
TextureVector.__delslice__ = new_instancemethod(_openframeworks.TextureVector___delslice__, None, TextureVector)
TextureVector.__delitem__ = new_instancemethod(_openframeworks.TextureVector___delitem__, None, TextureVector)
TextureVector.__getitem__ = new_instancemethod(_openframeworks.TextureVector___getitem__, None, TextureVector)
TextureVector.__setitem__ = new_instancemethod(_openframeworks.TextureVector___setitem__, None, TextureVector)
TextureVector.pop = new_instancemethod(_openframeworks.TextureVector_pop, None, TextureVector)
TextureVector.append = new_instancemethod(_openframeworks.TextureVector_append, None, TextureVector)
TextureVector.empty = new_instancemethod(_openframeworks.TextureVector_empty, None, TextureVector)
TextureVector.size = new_instancemethod(_openframeworks.TextureVector_size, None, TextureVector)
TextureVector.swap = new_instancemethod(_openframeworks.TextureVector_swap, None, TextureVector)
TextureVector.begin = new_instancemethod(_openframeworks.TextureVector_begin, None, TextureVector)
TextureVector.end = new_instancemethod(_openframeworks.TextureVector_end, None, TextureVector)
TextureVector.rbegin = new_instancemethod(_openframeworks.TextureVector_rbegin, None, TextureVector)
TextureVector.rend = new_instancemethod(_openframeworks.TextureVector_rend, None, TextureVector)
TextureVector.clear = new_instancemethod(_openframeworks.TextureVector_clear, None, TextureVector)
TextureVector.get_allocator = new_instancemethod(_openframeworks.TextureVector_get_allocator, None, TextureVector)
TextureVector.pop_back = new_instancemethod(_openframeworks.TextureVector_pop_back, None, TextureVector)
TextureVector.erase = new_instancemethod(_openframeworks.TextureVector_erase, None, TextureVector)
TextureVector.push_back = new_instancemethod(_openframeworks.TextureVector_push_back, None, TextureVector)
TextureVector.front = new_instancemethod(_openframeworks.TextureVector_front, None, TextureVector)
TextureVector.back = new_instancemethod(_openframeworks.TextureVector_back, None, TextureVector)
TextureVector.assign = new_instancemethod(_openframeworks.TextureVector_assign, None, TextureVector)
TextureVector.resize = new_instancemethod(_openframeworks.TextureVector_resize, None, TextureVector)
TextureVector.insert = new_instancemethod(_openframeworks.TextureVector_insert, None, TextureVector)
TextureVector.reserve = new_instancemethod(_openframeworks.TextureVector_reserve, None, TextureVector)
TextureVector.capacity = new_instancemethod(_openframeworks.TextureVector_capacity, None, TextureVector)
TextureVector_swigregister = _openframeworks.TextureVector_swigregister
TextureVector_swigregister(TextureVector)

OF_VERSION_MAJOR = _openframeworks.OF_VERSION_MAJOR
OF_VERSION_MINOR = _openframeworks.OF_VERSION_MINOR
OF_VERSION_PATCH = _openframeworks.OF_VERSION_PATCH
OF_VERSION_PRE_RELEASE = _openframeworks.OF_VERSION_PRE_RELEASE
OF_USE_LEGACY_VECTOR_MATH = _openframeworks.OF_USE_LEGACY_VECTOR_MATH
OF_USING_STD_FS = _openframeworks.OF_USING_STD_FS
OF_TARGET_OSX = _openframeworks.OF_TARGET_OSX
OF_TARGET_MINGW = _openframeworks.OF_TARGET_MINGW
OF_TARGET_WINVS = _openframeworks.OF_TARGET_WINVS
OF_TARGET_IOS = _openframeworks.OF_TARGET_IOS
OF_TARGET_ANDROID = _openframeworks.OF_TARGET_ANDROID
OF_TARGET_LINUX = _openframeworks.OF_TARGET_LINUX
OF_TARGET_LINUX64 = _openframeworks.OF_TARGET_LINUX64
OF_TARGET_LINUXARMV6L = _openframeworks.OF_TARGET_LINUXARMV6L
OF_TARGET_LINUXARMV7L = _openframeworks.OF_TARGET_LINUXARMV7L
OF_TARGET_EMSCRIPTEN = _openframeworks.OF_TARGET_EMSCRIPTEN
B14400 = _openframeworks.B14400
B28800 = _openframeworks.B28800
HAS_TLS = _openframeworks.HAS_TLS
import glm
PI = _openframeworks.PI
TWO_PI = _openframeworks.TWO_PI
M_TWO_PI = _openframeworks.M_TWO_PI
FOUR_PI = _openframeworks.FOUR_PI
HALF_PI = _openframeworks.HALF_PI
DEG_TO_RAD = _openframeworks.DEG_TO_RAD
RAD_TO_DEG = _openframeworks.RAD_TO_DEG

def ofResetElapsedTimeCounter():
    return _openframeworks.ofResetElapsedTimeCounter()
ofResetElapsedTimeCounter = _openframeworks.ofResetElapsedTimeCounter

def ofGetElapsedTimef():
    return _openframeworks.ofGetElapsedTimef()
ofGetElapsedTimef = _openframeworks.ofGetElapsedTimef

def ofGetElapsedTimeMillis():
    return _openframeworks.ofGetElapsedTimeMillis()
ofGetElapsedTimeMillis = _openframeworks.ofGetElapsedTimeMillis

def ofGetElapsedTimeMicros():
    return _openframeworks.ofGetElapsedTimeMicros()
ofGetElapsedTimeMicros = _openframeworks.ofGetElapsedTimeMicros

def ofGetFrameNum():
    return _openframeworks.ofGetFrameNum()
ofGetFrameNum = _openframeworks.ofGetFrameNum

def ofGetSeconds():
    return _openframeworks.ofGetSeconds()
ofGetSeconds = _openframeworks.ofGetSeconds

def ofGetMinutes():
    return _openframeworks.ofGetMinutes()
ofGetMinutes = _openframeworks.ofGetMinutes

def ofGetHours():
    return _openframeworks.ofGetHours()
ofGetHours = _openframeworks.ofGetHours

def ofGetUnixTime():
    return _openframeworks.ofGetUnixTime()
ofGetUnixTime = _openframeworks.ofGetUnixTime

def ofGetSystemTimeMillis():
    return _openframeworks.ofGetSystemTimeMillis()
ofGetSystemTimeMillis = _openframeworks.ofGetSystemTimeMillis

def ofGetSystemTimeMicros():
    return _openframeworks.ofGetSystemTimeMicros()
ofGetSystemTimeMicros = _openframeworks.ofGetSystemTimeMicros
class ofTime(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    seconds = _swig_property(_openframeworks.ofTime_seconds_get, _openframeworks.ofTime_seconds_set)
    nanoseconds = _swig_property(_openframeworks.ofTime_nanoseconds_get, _openframeworks.ofTime_nanoseconds_set)
    System = _openframeworks.ofTime_System
    FixedRate = _openframeworks.ofTime_FixedRate
    mode = _swig_property(_openframeworks.ofTime_mode_get, _openframeworks.ofTime_mode_set)

    def __init__(self):
        _openframeworks.ofTime_swiginit(self, _openframeworks.new_ofTime())
    __swig_destroy__ = _openframeworks.delete_ofTime
ofTime.getAsMilliseconds = new_instancemethod(_openframeworks.ofTime_getAsMilliseconds, None, ofTime)
ofTime.getAsMicroseconds = new_instancemethod(_openframeworks.ofTime_getAsMicroseconds, None, ofTime)
ofTime.getAsNanoseconds = new_instancemethod(_openframeworks.ofTime_getAsNanoseconds, None, ofTime)
ofTime.getAsSeconds = new_instancemethod(_openframeworks.ofTime_getAsSeconds, None, ofTime)
ofTime.getAsTimespec = new_instancemethod(_openframeworks.ofTime_getAsTimespec, None, ofTime)
ofTime.getAsTimePoint = new_instancemethod(_openframeworks.ofTime_getAsTimePoint, None, ofTime)
ofTime.__sub__ = new_instancemethod(_openframeworks.ofTime___sub__, None, ofTime)
ofTime.__lt__ = new_instancemethod(_openframeworks.ofTime___lt__, None, ofTime)
ofTime.__gt__ = new_instancemethod(_openframeworks.ofTime___gt__, None, ofTime)
ofTime.__le__ = new_instancemethod(_openframeworks.ofTime___le__, None, ofTime)
ofTime.__ge__ = new_instancemethod(_openframeworks.ofTime___ge__, None, ofTime)
ofTime_swigregister = _openframeworks.ofTime_swigregister
ofTime_swigregister(ofTime)


def ofGetCurrentTime():
    return _openframeworks.ofGetCurrentTime()
ofGetCurrentTime = _openframeworks.ofGetCurrentTime

def ofSleepMillis(millis):
    return _openframeworks.ofSleepMillis(millis)
ofSleepMillis = _openframeworks.ofSleepMillis

def ofGetTimestampString(*args):
    return _openframeworks.ofGetTimestampString(*args)
ofGetTimestampString = _openframeworks.ofGetTimestampString

def ofGetYear():
    return _openframeworks.ofGetYear()
ofGetYear = _openframeworks.ofGetYear

def ofGetMonth():
    return _openframeworks.ofGetMonth()
ofGetMonth = _openframeworks.ofGetMonth

def ofGetDay():
    return _openframeworks.ofGetDay()
ofGetDay = _openframeworks.ofGetDay

def ofGetWeekday():
    return _openframeworks.ofGetWeekday()
ofGetWeekday = _openframeworks.ofGetWeekday

def ofEnableDataPath():
    return _openframeworks.ofEnableDataPath()
ofEnableDataPath = _openframeworks.ofEnableDataPath

def ofDisableDataPath():
    return _openframeworks.ofDisableDataPath()
ofDisableDataPath = _openframeworks.ofDisableDataPath

def ofToDataPath(path, absolute=False):
    return _openframeworks.ofToDataPath(path, absolute)
ofToDataPath = _openframeworks.ofToDataPath

def ofRestoreWorkingDirectoryToDefault():
    return _openframeworks.ofRestoreWorkingDirectoryToDefault()
ofRestoreWorkingDirectoryToDefault = _openframeworks.ofRestoreWorkingDirectoryToDefault

def ofSetDataPathRoot(root):
    return _openframeworks.ofSetDataPathRoot(root)
ofSetDataPathRoot = _openframeworks.ofSetDataPathRoot

def ofSplitString(source, delimiter, ignoreEmpty=False, trim=False):
    return _openframeworks.ofSplitString(source, delimiter, ignoreEmpty, trim)
ofSplitString = _openframeworks.ofSplitString

def ofJoinString(stringElements, delimiter):
    return _openframeworks.ofJoinString(stringElements, delimiter)
ofJoinString = _openframeworks.ofJoinString

def ofStringReplace(input, searchStr, replaceStr):
    return _openframeworks.ofStringReplace(input, searchStr, replaceStr)
ofStringReplace = _openframeworks.ofStringReplace

def ofIsStringInString(haystack, needle):
    return _openframeworks.ofIsStringInString(haystack, needle)
ofIsStringInString = _openframeworks.ofIsStringInString

def ofStringTimesInString(haystack, needle):
    return _openframeworks.ofStringTimesInString(haystack, needle)
ofStringTimesInString = _openframeworks.ofStringTimesInString

def ofToLower(*args):
    return _openframeworks.ofToLower(*args)
ofToLower = _openframeworks.ofToLower

def ofToUpper(*args):
    return _openframeworks.ofToUpper(*args)
ofToUpper = _openframeworks.ofToUpper

def ofTrimFront(*args):
    return _openframeworks.ofTrimFront(*args)
ofTrimFront = _openframeworks.ofTrimFront

def ofTrimBack(*args):
    return _openframeworks.ofTrimBack(*args)
ofTrimBack = _openframeworks.ofTrimBack

def ofTrim(*args):
    return _openframeworks.ofTrim(*args)
ofTrim = _openframeworks.ofTrim

def ofUTF8Append(str, utf8):
    return _openframeworks.ofUTF8Append(str, utf8)
ofUTF8Append = _openframeworks.ofUTF8Append

def ofUTF8Insert(str, pos, utf8):
    return _openframeworks.ofUTF8Insert(str, pos, utf8)
ofUTF8Insert = _openframeworks.ofUTF8Insert

def ofUTF8Erase(str, start, len):
    return _openframeworks.ofUTF8Erase(str, start, len)
ofUTF8Erase = _openframeworks.ofUTF8Erase

def ofUTF8Substring(str, start, len):
    return _openframeworks.ofUTF8Substring(str, start, len)
ofUTF8Substring = _openframeworks.ofUTF8Substring

def ofUTF8ToString(utf8):
    return _openframeworks.ofUTF8ToString(utf8)
ofUTF8ToString = _openframeworks.ofUTF8ToString

def ofUTF8Length(str):
    return _openframeworks.ofUTF8Length(str)
ofUTF8Length = _openframeworks.ofUTF8Length

def ofToInt(intString):
    return _openframeworks.ofToInt(intString)
ofToInt = _openframeworks.ofToInt

def ofToInt64(intString):
    return _openframeworks.ofToInt64(intString)
ofToInt64 = _openframeworks.ofToInt64

def ofToFloat(floatString):
    return _openframeworks.ofToFloat(floatString)
ofToFloat = _openframeworks.ofToFloat

def ofToDouble(doubleString):
    return _openframeworks.ofToDouble(doubleString)
ofToDouble = _openframeworks.ofToDouble

def ofToBool(boolString):
    return _openframeworks.ofToBool(boolString)
ofToBool = _openframeworks.ofToBool

def ofToHex(value):
    return _openframeworks.ofToHex(value)
ofToHex = _openframeworks.ofToHex

def ofHexToInt(intHexString):
    return _openframeworks.ofHexToInt(intHexString)
ofHexToInt = _openframeworks.ofHexToInt

def ofHexToChar(charHexString):
    return _openframeworks.ofHexToChar(charHexString)
ofHexToChar = _openframeworks.ofHexToChar

def ofHexToFloat(floatHexString):
    return _openframeworks.ofHexToFloat(floatHexString)
ofHexToFloat = _openframeworks.ofHexToFloat

def ofHexToString(stringHexString):
    return _openframeworks.ofHexToString(stringHexString)
ofHexToString = _openframeworks.ofHexToString

def ofToChar(charString):
    return _openframeworks.ofToChar(charString)
ofToChar = _openframeworks.ofToChar

def ofToBinary(value):
    return _openframeworks.ofToBinary(value)
ofToBinary = _openframeworks.ofToBinary

def ofBinaryToInt(value):
    return _openframeworks.ofBinaryToInt(value)
ofBinaryToInt = _openframeworks.ofBinaryToInt

def ofBinaryToChar(value):
    return _openframeworks.ofBinaryToChar(value)
ofBinaryToChar = _openframeworks.ofBinaryToChar

def ofBinaryToFloat(value):
    return _openframeworks.ofBinaryToFloat(value)
ofBinaryToFloat = _openframeworks.ofBinaryToFloat

def ofBinaryToString(value):
    return _openframeworks.ofBinaryToString(value)
ofBinaryToString = _openframeworks.ofBinaryToString

def ofGetVersionInfo():
    return _openframeworks.ofGetVersionInfo()
ofGetVersionInfo = _openframeworks.ofGetVersionInfo

def ofGetVersionMajor():
    return _openframeworks.ofGetVersionMajor()
ofGetVersionMajor = _openframeworks.ofGetVersionMajor

def ofGetVersionMinor():
    return _openframeworks.ofGetVersionMinor()
ofGetVersionMinor = _openframeworks.ofGetVersionMinor

def ofGetVersionPatch():
    return _openframeworks.ofGetVersionPatch()
ofGetVersionPatch = _openframeworks.ofGetVersionPatch

def ofGetVersionPreRelease():
    return _openframeworks.ofGetVersionPreRelease()
ofGetVersionPreRelease = _openframeworks.ofGetVersionPreRelease

def ofSaveScreen(filename):
    return _openframeworks.ofSaveScreen(filename)
ofSaveScreen = _openframeworks.ofSaveScreen

def ofSaveFrame(bUseViewport=False):
    return _openframeworks.ofSaveFrame(bUseViewport)
ofSaveFrame = _openframeworks.ofSaveFrame

def ofSaveViewport(filename):
    return _openframeworks.ofSaveViewport(filename)
ofSaveViewport = _openframeworks.ofSaveViewport

def ofLaunchBrowser(url, uriEncodeQuery=False):
    return _openframeworks.ofLaunchBrowser(url, uriEncodeQuery)
ofLaunchBrowser = _openframeworks.ofLaunchBrowser

def ofSystem(command):
    return _openframeworks.ofSystem(command)
ofSystem = _openframeworks.ofSystem

def ofGetTargetPlatform():
    return _openframeworks.ofGetTargetPlatform()
ofGetTargetPlatform = _openframeworks.ofGetTargetPlatform

def ofGetEnv(var):
    return _openframeworks.ofGetEnv(var)
ofGetEnv = _openframeworks.ofGetEnv
OF_FBOMODE_NODEFAULTS = _openframeworks.OF_FBOMODE_NODEFAULTS
OF_FBOMODE_PERSPECTIVE = _openframeworks.OF_FBOMODE_PERSPECTIVE
OF_FBOMODE_MATRIXFLIP = _openframeworks.OF_FBOMODE_MATRIXFLIP
class ofFbo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openframeworks.ofFbo_swiginit(self, _openframeworks.new_ofFbo(*args))
    __swig_destroy__ = _openframeworks.delete_ofFbo
    checkGLSupport = staticmethod(_openframeworks.ofFbo_checkGLSupport)
    maxColorAttachments = staticmethod(_openframeworks.ofFbo_maxColorAttachments)
    maxDrawBuffers = staticmethod(_openframeworks.ofFbo_maxDrawBuffers)
    maxSamples = staticmethod(_openframeworks.ofFbo_maxSamples)
ofFbo.allocate = new_instancemethod(_openframeworks.ofFbo_allocate, None, ofFbo)
ofFbo.isAllocated = new_instancemethod(_openframeworks.ofFbo_isAllocated, None, ofFbo)
ofFbo.clear = new_instancemethod(_openframeworks.ofFbo_clear, None, ofFbo)
ofFbo.clearColorBuffer = new_instancemethod(_openframeworks.ofFbo_clearColorBuffer, None, ofFbo)
ofFbo.clearDepthBuffer = new_instancemethod(_openframeworks.ofFbo_clearDepthBuffer, None, ofFbo)
ofFbo.clearStencilBuffer = new_instancemethod(_openframeworks.ofFbo_clearStencilBuffer, None, ofFbo)
ofFbo.clearDepthStencilBuffer = new_instancemethod(_openframeworks.ofFbo_clearDepthStencilBuffer, None, ofFbo)
ofFbo.draw = new_instancemethod(_openframeworks.ofFbo_draw, None, ofFbo)
ofFbo.setAnchorPercent = new_instancemethod(_openframeworks.ofFbo_setAnchorPercent, None, ofFbo)
ofFbo.setAnchorPoint = new_instancemethod(_openframeworks.ofFbo_setAnchorPoint, None, ofFbo)
ofFbo.resetAnchor = new_instancemethod(_openframeworks.ofFbo_resetAnchor, None, ofFbo)
ofFbo.setDefaultTextureIndex = new_instancemethod(_openframeworks.ofFbo_setDefaultTextureIndex, None, ofFbo)
ofFbo.getDefaultTextureIndex = new_instancemethod(_openframeworks.ofFbo_getDefaultTextureIndex, None, ofFbo)
ofFbo.getTexture = new_instancemethod(_openframeworks.ofFbo_getTexture, None, ofFbo)
ofFbo.getDepthTexture = new_instancemethod(_openframeworks.ofFbo_getDepthTexture, None, ofFbo)
ofFbo.begin = new_instancemethod(_openframeworks.ofFbo_begin, None, ofFbo)
ofFbo.end = new_instancemethod(_openframeworks.ofFbo_end, None, ofFbo)
ofFbo.readToPixels = new_instancemethod(_openframeworks.ofFbo_readToPixels, None, ofFbo)
ofFbo.copyTo = new_instancemethod(_openframeworks.ofFbo_copyTo, None, ofFbo)
ofFbo.getWidth = new_instancemethod(_openframeworks.ofFbo_getWidth, None, ofFbo)
ofFbo.getHeight = new_instancemethod(_openframeworks.ofFbo_getHeight, None, ofFbo)
ofFbo.bind = new_instancemethod(_openframeworks.ofFbo_bind, None, ofFbo)
ofFbo.unbind = new_instancemethod(_openframeworks.ofFbo_unbind, None, ofFbo)
ofFbo.flagDirty = new_instancemethod(_openframeworks.ofFbo_flagDirty, None, ofFbo)
ofFbo.updateTexture = new_instancemethod(_openframeworks.ofFbo_updateTexture, None, ofFbo)
ofFbo.checkStatus = new_instancemethod(_openframeworks.ofFbo_checkStatus, None, ofFbo)
ofFbo.createAndAttachTexture = new_instancemethod(_openframeworks.ofFbo_createAndAttachTexture, None, ofFbo)
ofFbo.attachTexture = new_instancemethod(_openframeworks.ofFbo_attachTexture, None, ofFbo)
ofFbo.createAndAttachRenderbuffer = new_instancemethod(_openframeworks.ofFbo_createAndAttachRenderbuffer, None, ofFbo)
ofFbo.createAndAttachDepthStencilTexture = new_instancemethod(_openframeworks.ofFbo_createAndAttachDepthStencilTexture, None, ofFbo)
ofFbo.getNumTextures = new_instancemethod(_openframeworks.ofFbo_getNumTextures, None, ofFbo)
ofFbo.setActiveDrawBuffer = new_instancemethod(_openframeworks.ofFbo_setActiveDrawBuffer, None, ofFbo)
ofFbo.setActiveDrawBuffers = new_instancemethod(_openframeworks.ofFbo_setActiveDrawBuffers, None, ofFbo)
ofFbo.activateAllDrawBuffers = new_instancemethod(_openframeworks.ofFbo_activateAllDrawBuffers, None, ofFbo)
ofFbo.getId = new_instancemethod(_openframeworks.ofFbo_getId, None, ofFbo)
ofFbo.getIdDrawBuffer = new_instancemethod(_openframeworks.ofFbo_getIdDrawBuffer, None, ofFbo)
ofFbo.getDepthBuffer = new_instancemethod(_openframeworks.ofFbo_getDepthBuffer, None, ofFbo)
ofFbo.getStencilBuffer = new_instancemethod(_openframeworks.ofFbo_getStencilBuffer, None, ofFbo)
ofFbo_swigregister = _openframeworks.ofFbo_swigregister
ofFbo_swigregister(ofFbo)

def ofFbo_checkGLSupport():
    return _openframeworks.ofFbo_checkGLSupport()
ofFbo_checkGLSupport = _openframeworks.ofFbo_checkGLSupport

def ofFbo_maxColorAttachments():
    return _openframeworks.ofFbo_maxColorAttachments()
ofFbo_maxColorAttachments = _openframeworks.ofFbo_maxColorAttachments

def ofFbo_maxDrawBuffers():
    return _openframeworks.ofFbo_maxDrawBuffers()
ofFbo_maxDrawBuffers = _openframeworks.ofFbo_maxDrawBuffers

def ofFbo_maxSamples():
    return _openframeworks.ofFbo_maxSamples()
ofFbo_maxSamples = _openframeworks.ofFbo_maxSamples


def ofGetUsingArbTex():
    return _openframeworks.ofGetUsingArbTex()
ofGetUsingArbTex = _openframeworks.ofGetUsingArbTex

def ofEnableArbTex():
    return _openframeworks.ofEnableArbTex()
ofEnableArbTex = _openframeworks.ofEnableArbTex

def ofDisableArbTex():
    return _openframeworks.ofDisableArbTex()
ofDisableArbTex = _openframeworks.ofDisableArbTex

def ofGetUsingNormalizedTexCoords():
    return _openframeworks.ofGetUsingNormalizedTexCoords()
ofGetUsingNormalizedTexCoords = _openframeworks.ofGetUsingNormalizedTexCoords

def ofEnableNormalizedTexCoords():
    return _openframeworks.ofEnableNormalizedTexCoords()
ofEnableNormalizedTexCoords = _openframeworks.ofEnableNormalizedTexCoords

def ofDisableNormalizedTexCoords():
    return _openframeworks.ofDisableNormalizedTexCoords()
ofDisableNormalizedTexCoords = _openframeworks.ofDisableNormalizedTexCoords
OF_COMPRESS_NONE = _openframeworks.OF_COMPRESS_NONE
OF_COMPRESS_SRGB = _openframeworks.OF_COMPRESS_SRGB
OF_COMPRESS_ARB = _openframeworks.OF_COMPRESS_ARB
class ofTextureData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _openframeworks.ofTextureData_swiginit(self, _openframeworks.new_ofTextureData())
    textureID = _swig_property(_openframeworks.ofTextureData_textureID_get, _openframeworks.ofTextureData_textureID_set)
    textureTarget = _swig_property(_openframeworks.ofTextureData_textureTarget_get, _openframeworks.ofTextureData_textureTarget_set)
    glInternalFormat = _swig_property(_openframeworks.ofTextureData_glInternalFormat_get, _openframeworks.ofTextureData_glInternalFormat_set)
    tex_t = _swig_property(_openframeworks.ofTextureData_tex_t_get, _openframeworks.ofTextureData_tex_t_set)
    tex_u = _swig_property(_openframeworks.ofTextureData_tex_u_get, _openframeworks.ofTextureData_tex_u_set)
    tex_w = _swig_property(_openframeworks.ofTextureData_tex_w_get, _openframeworks.ofTextureData_tex_w_set)
    tex_h = _swig_property(_openframeworks.ofTextureData_tex_h_get, _openframeworks.ofTextureData_tex_h_set)
    width = _swig_property(_openframeworks.ofTextureData_width_get, _openframeworks.ofTextureData_width_set)
    height = _swig_property(_openframeworks.ofTextureData_height_get, _openframeworks.ofTextureData_height_set)
    bFlipTexture = _swig_property(_openframeworks.ofTextureData_bFlipTexture_get, _openframeworks.ofTextureData_bFlipTexture_set)
    compressionType = _swig_property(_openframeworks.ofTextureData_compressionType_get, _openframeworks.ofTextureData_compressionType_set)
    bAllocated = _swig_property(_openframeworks.ofTextureData_bAllocated_get, _openframeworks.ofTextureData_bAllocated_set)
    minFilter = _swig_property(_openframeworks.ofTextureData_minFilter_get, _openframeworks.ofTextureData_minFilter_set)
    magFilter = _swig_property(_openframeworks.ofTextureData_magFilter_get, _openframeworks.ofTextureData_magFilter_set)
    wrapModeHorizontal = _swig_property(_openframeworks.ofTextureData_wrapModeHorizontal_get, _openframeworks.ofTextureData_wrapModeHorizontal_set)
    wrapModeVertical = _swig_property(_openframeworks.ofTextureData_wrapModeVertical_get, _openframeworks.ofTextureData_wrapModeVertical_set)
    bufferId = _swig_property(_openframeworks.ofTextureData_bufferId_get, _openframeworks.ofTextureData_bufferId_set)
    __swig_destroy__ = _openframeworks.delete_ofTextureData
ofTextureData_swigregister = _openframeworks.ofTextureData_swigregister
ofTextureData_swigregister(ofTextureData)


def ofEnableTextureEdgeHack():
    return _openframeworks.ofEnableTextureEdgeHack()
ofEnableTextureEdgeHack = _openframeworks.ofEnableTextureEdgeHack

def ofDisableTextureEdgeHack():
    return _openframeworks.ofDisableTextureEdgeHack()
ofDisableTextureEdgeHack = _openframeworks.ofDisableTextureEdgeHack

def ofIsTextureEdgeHackEnabled():
    return _openframeworks.ofIsTextureEdgeHackEnabled()
ofIsTextureEdgeHackEnabled = _openframeworks.ofIsTextureEdgeHackEnabled
class ofTexture(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openframeworks.ofTexture_swiginit(self, _openframeworks.new_ofTexture(*args))
    __swig_destroy__ = _openframeworks.delete_ofTexture
    texData = _swig_property(_openframeworks.ofTexture_texData_get, _openframeworks.ofTexture_texData_set)
ofTexture.allocate = new_instancemethod(_openframeworks.ofTexture_allocate, None, ofTexture)
ofTexture.allocateAsBufferTexture = new_instancemethod(_openframeworks.ofTexture_allocateAsBufferTexture, None, ofTexture)
ofTexture.isAllocated = new_instancemethod(_openframeworks.ofTexture_isAllocated, None, ofTexture)
ofTexture.clear = new_instancemethod(_openframeworks.ofTexture_clear, None, ofTexture)
ofTexture.setUseExternalTextureID = new_instancemethod(_openframeworks.ofTexture_setUseExternalTextureID, None, ofTexture)
ofTexture.loadData = new_instancemethod(_openframeworks.ofTexture_loadData, None, ofTexture)
ofTexture.loadScreenData = new_instancemethod(_openframeworks.ofTexture_loadScreenData, None, ofTexture)
ofTexture.draw = new_instancemethod(_openframeworks.ofTexture_draw, None, ofTexture)
ofTexture.drawSubsection = new_instancemethod(_openframeworks.ofTexture_drawSubsection, None, ofTexture)
ofTexture.getQuad = new_instancemethod(_openframeworks.ofTexture_getQuad, None, ofTexture)
ofTexture.getMeshForSubsection = new_instancemethod(_openframeworks.ofTexture_getMeshForSubsection, None, ofTexture)
ofTexture.bind = new_instancemethod(_openframeworks.ofTexture_bind, None, ofTexture)
ofTexture.unbind = new_instancemethod(_openframeworks.ofTexture_unbind, None, ofTexture)
ofTexture.getAlphaMask = new_instancemethod(_openframeworks.ofTexture_getAlphaMask, None, ofTexture)
ofTexture.getHeight = new_instancemethod(_openframeworks.ofTexture_getHeight, None, ofTexture)
ofTexture.getWidth = new_instancemethod(_openframeworks.ofTexture_getWidth, None, ofTexture)
ofTexture.setAnchorPercent = new_instancemethod(_openframeworks.ofTexture_setAnchorPercent, None, ofTexture)
ofTexture.setAnchorPoint = new_instancemethod(_openframeworks.ofTexture_setAnchorPoint, None, ofTexture)
ofTexture.resetAnchor = new_instancemethod(_openframeworks.ofTexture_resetAnchor, None, ofTexture)
ofTexture.getCoordFromPoint = new_instancemethod(_openframeworks.ofTexture_getCoordFromPoint, None, ofTexture)
ofTexture.getCoordFromPercent = new_instancemethod(_openframeworks.ofTexture_getCoordFromPercent, None, ofTexture)
ofTexture.setAlphaMask = new_instancemethod(_openframeworks.ofTexture_setAlphaMask, None, ofTexture)
ofTexture.disableAlphaMask = new_instancemethod(_openframeworks.ofTexture_disableAlphaMask, None, ofTexture)
ofTexture.setTextureWrap = new_instancemethod(_openframeworks.ofTexture_setTextureWrap, None, ofTexture)
ofTexture.setTextureMinMagFilter = new_instancemethod(_openframeworks.ofTexture_setTextureMinMagFilter, None, ofTexture)
ofTexture.setTextureMatrix = new_instancemethod(_openframeworks.ofTexture_setTextureMatrix, None, ofTexture)
ofTexture.getTextureMatrix = new_instancemethod(_openframeworks.ofTexture_getTextureMatrix, None, ofTexture)
ofTexture.isUsingTextureMatrix = new_instancemethod(_openframeworks.ofTexture_isUsingTextureMatrix, None, ofTexture)
ofTexture.disableTextureMatrix = new_instancemethod(_openframeworks.ofTexture_disableTextureMatrix, None, ofTexture)
ofTexture.setCompression = new_instancemethod(_openframeworks.ofTexture_setCompression, None, ofTexture)
ofTexture.setRGToRGBASwizzles = new_instancemethod(_openframeworks.ofTexture_setRGToRGBASwizzles, None, ofTexture)
ofTexture.setSwizzle = new_instancemethod(_openframeworks.ofTexture_setSwizzle, None, ofTexture)
ofTexture.readToPixels = new_instancemethod(_openframeworks.ofTexture_readToPixels, None, ofTexture)
ofTexture.copyTo = new_instancemethod(_openframeworks.ofTexture_copyTo, None, ofTexture)
ofTexture.getTextureData = new_instancemethod(_openframeworks.ofTexture_getTextureData, None, ofTexture)
ofTexture.enableMipmap = new_instancemethod(_openframeworks.ofTexture_enableMipmap, None, ofTexture)
ofTexture.disableMipmap = new_instancemethod(_openframeworks.ofTexture_disableMipmap, None, ofTexture)
ofTexture.generateMipmap = new_instancemethod(_openframeworks.ofTexture_generateMipmap, None, ofTexture)
ofTexture.hasMipmap = new_instancemethod(_openframeworks.ofTexture_hasMipmap, None, ofTexture)
ofTexture_swigregister = _openframeworks.ofTexture_swigregister
ofTexture_swigregister(ofTexture)

OF_IMAGE_QUALITY_BEST = _openframeworks.OF_IMAGE_QUALITY_BEST
OF_IMAGE_QUALITY_HIGH = _openframeworks.OF_IMAGE_QUALITY_HIGH
OF_IMAGE_QUALITY_MEDIUM = _openframeworks.OF_IMAGE_QUALITY_MEDIUM
OF_IMAGE_QUALITY_LOW = _openframeworks.OF_IMAGE_QUALITY_LOW
OF_IMAGE_QUALITY_WORST = _openframeworks.OF_IMAGE_QUALITY_WORST
OF_IMAGE_FORMAT_BMP = _openframeworks.OF_IMAGE_FORMAT_BMP
OF_IMAGE_FORMAT_ICO = _openframeworks.OF_IMAGE_FORMAT_ICO
OF_IMAGE_FORMAT_JPEG = _openframeworks.OF_IMAGE_FORMAT_JPEG
OF_IMAGE_FORMAT_JNG = _openframeworks.OF_IMAGE_FORMAT_JNG
OF_IMAGE_FORMAT_KOALA = _openframeworks.OF_IMAGE_FORMAT_KOALA
OF_IMAGE_FORMAT_LBM = _openframeworks.OF_IMAGE_FORMAT_LBM
OF_IMAGE_FORMAT_IFF = _openframeworks.OF_IMAGE_FORMAT_IFF
OF_IMAGE_FORMAT_MNG = _openframeworks.OF_IMAGE_FORMAT_MNG
OF_IMAGE_FORMAT_PBM = _openframeworks.OF_IMAGE_FORMAT_PBM
OF_IMAGE_FORMAT_PBMRAW = _openframeworks.OF_IMAGE_FORMAT_PBMRAW
OF_IMAGE_FORMAT_PCD = _openframeworks.OF_IMAGE_FORMAT_PCD
OF_IMAGE_FORMAT_PCX = _openframeworks.OF_IMAGE_FORMAT_PCX
OF_IMAGE_FORMAT_PGM = _openframeworks.OF_IMAGE_FORMAT_PGM
OF_IMAGE_FORMAT_PGMRAW = _openframeworks.OF_IMAGE_FORMAT_PGMRAW
OF_IMAGE_FORMAT_PNG = _openframeworks.OF_IMAGE_FORMAT_PNG
OF_IMAGE_FORMAT_PPM = _openframeworks.OF_IMAGE_FORMAT_PPM
OF_IMAGE_FORMAT_PPMRAW = _openframeworks.OF_IMAGE_FORMAT_PPMRAW
OF_IMAGE_FORMAT_RAS = _openframeworks.OF_IMAGE_FORMAT_RAS
OF_IMAGE_FORMAT_TARGA = _openframeworks.OF_IMAGE_FORMAT_TARGA
OF_IMAGE_FORMAT_TIFF = _openframeworks.OF_IMAGE_FORMAT_TIFF
OF_IMAGE_FORMAT_WBMP = _openframeworks.OF_IMAGE_FORMAT_WBMP
OF_IMAGE_FORMAT_PSD = _openframeworks.OF_IMAGE_FORMAT_PSD
OF_IMAGE_FORMAT_CUT = _openframeworks.OF_IMAGE_FORMAT_CUT
OF_IMAGE_FORMAT_XBM = _openframeworks.OF_IMAGE_FORMAT_XBM
OF_IMAGE_FORMAT_XPM = _openframeworks.OF_IMAGE_FORMAT_XPM
OF_IMAGE_FORMAT_DDS = _openframeworks.OF_IMAGE_FORMAT_DDS
OF_IMAGE_FORMAT_GIF = _openframeworks.OF_IMAGE_FORMAT_GIF
OF_IMAGE_FORMAT_HDR = _openframeworks.OF_IMAGE_FORMAT_HDR
OF_IMAGE_FORMAT_FAXG3 = _openframeworks.OF_IMAGE_FORMAT_FAXG3
OF_IMAGE_FORMAT_SGI = _openframeworks.OF_IMAGE_FORMAT_SGI
OF_IMAGE_FORMAT_EXR = _openframeworks.OF_IMAGE_FORMAT_EXR
OF_IMAGE_FORMAT_J2K = _openframeworks.OF_IMAGE_FORMAT_J2K
OF_IMAGE_FORMAT_JP2 = _openframeworks.OF_IMAGE_FORMAT_JP2
OF_IMAGE_FORMAT_PFM = _openframeworks.OF_IMAGE_FORMAT_PFM
OF_IMAGE_FORMAT_PICT = _openframeworks.OF_IMAGE_FORMAT_PICT
OF_IMAGE_FORMAT_RAW = _openframeworks.OF_IMAGE_FORMAT_RAW

def ofImageFormatExtension(format):
    return _openframeworks.ofImageFormatExtension(format)
ofImageFormatExtension = _openframeworks.ofImageFormatExtension
class ofImageLoadSettings(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    accurate = _swig_property(_openframeworks.ofImageLoadSettings_accurate_get, _openframeworks.ofImageLoadSettings_accurate_set)
    exifRotate = _swig_property(_openframeworks.ofImageLoadSettings_exifRotate_get, _openframeworks.ofImageLoadSettings_exifRotate_set)
    grayscale = _swig_property(_openframeworks.ofImageLoadSettings_grayscale_get, _openframeworks.ofImageLoadSettings_grayscale_set)
    separateCMYK = _swig_property(_openframeworks.ofImageLoadSettings_separateCMYK_get, _openframeworks.ofImageLoadSettings_separateCMYK_set)

    def __init__(self):
        _openframeworks.ofImageLoadSettings_swiginit(self, _openframeworks.new_ofImageLoadSettings())
    __swig_destroy__ = _openframeworks.delete_ofImageLoadSettings
ofImageLoadSettings_swigregister = _openframeworks.ofImageLoadSettings_swigregister
ofImageLoadSettings_swigregister(ofImageLoadSettings)

class ofImage(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openframeworks.ofImage_swiginit(self, _openframeworks.new_ofImage(*args))
    __swig_destroy__ = _openframeworks.delete_ofImage
ofImage.allocate = new_instancemethod(_openframeworks.ofImage_allocate, None, ofImage)
ofImage.isAllocated = new_instancemethod(_openframeworks.ofImage_isAllocated, None, ofImage)
ofImage.clear = new_instancemethod(_openframeworks.ofImage_clear, None, ofImage)
ofImage.load = new_instancemethod(_openframeworks.ofImage_load, None, ofImage)
ofImage.draw = new_instancemethod(_openframeworks.ofImage_draw, None, ofImage)
ofImage.drawSubsection = new_instancemethod(_openframeworks.ofImage_drawSubsection, None, ofImage)
ofImage.update = new_instancemethod(_openframeworks.ofImage_update, None, ofImage)
ofImage.setUseTexture = new_instancemethod(_openframeworks.ofImage_setUseTexture, None, ofImage)
ofImage.isUsingTexture = new_instancemethod(_openframeworks.ofImage_isUsingTexture, None, ofImage)
ofImage.getTexture = new_instancemethod(_openframeworks.ofImage_getTexture, None, ofImage)
ofImage.bind = new_instancemethod(_openframeworks.ofImage_bind, None, ofImage)
ofImage.unbind = new_instancemethod(_openframeworks.ofImage_unbind, None, ofImage)
ofImage.setCompression = new_instancemethod(_openframeworks.ofImage_setCompression, None, ofImage)
ofImage.getPixels = new_instancemethod(_openframeworks.ofImage_getPixels, None, ofImage)
ofImage.getColor = new_instancemethod(_openframeworks.ofImage_getColor, None, ofImage)
ofImage.getHeight = new_instancemethod(_openframeworks.ofImage_getHeight, None, ofImage)
ofImage.getWidth = new_instancemethod(_openframeworks.ofImage_getWidth, None, ofImage)
ofImage.setColor = new_instancemethod(_openframeworks.ofImage_setColor, None, ofImage)
ofImage.setFromPixels = new_instancemethod(_openframeworks.ofImage_setFromPixels, None, ofImage)
ofImage.grabScreen = new_instancemethod(_openframeworks.ofImage_grabScreen, None, ofImage)
ofImage.setImageType = new_instancemethod(_openframeworks.ofImage_setImageType, None, ofImage)
ofImage.getImageType = new_instancemethod(_openframeworks.ofImage_getImageType, None, ofImage)
ofImage.resize = new_instancemethod(_openframeworks.ofImage_resize, None, ofImage)
ofImage.crop = new_instancemethod(_openframeworks.ofImage_crop, None, ofImage)
ofImage.cropFrom = new_instancemethod(_openframeworks.ofImage_cropFrom, None, ofImage)
ofImage.rotate90 = new_instancemethod(_openframeworks.ofImage_rotate90, None, ofImage)
ofImage.mirror = new_instancemethod(_openframeworks.ofImage_mirror, None, ofImage)
ofImage.setAnchorPercent = new_instancemethod(_openframeworks.ofImage_setAnchorPercent, None, ofImage)
ofImage.setAnchorPoint = new_instancemethod(_openframeworks.ofImage_setAnchorPoint, None, ofImage)
ofImage.resetAnchor = new_instancemethod(_openframeworks.ofImage_resetAnchor, None, ofImage)
ofImage.save = new_instancemethod(_openframeworks.ofImage_save, None, ofImage)
ofImage_swigregister = _openframeworks.ofImage_swigregister
ofImage_swigregister(ofImage)

class ofFloatImage(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openframeworks.ofFloatImage_swiginit(self, _openframeworks.new_ofFloatImage(*args))
    __swig_destroy__ = _openframeworks.delete_ofFloatImage
ofFloatImage.allocate = new_instancemethod(_openframeworks.ofFloatImage_allocate, None, ofFloatImage)
ofFloatImage.isAllocated = new_instancemethod(_openframeworks.ofFloatImage_isAllocated, None, ofFloatImage)
ofFloatImage.clear = new_instancemethod(_openframeworks.ofFloatImage_clear, None, ofFloatImage)
ofFloatImage.load = new_instancemethod(_openframeworks.ofFloatImage_load, None, ofFloatImage)
ofFloatImage.draw = new_instancemethod(_openframeworks.ofFloatImage_draw, None, ofFloatImage)
ofFloatImage.drawSubsection = new_instancemethod(_openframeworks.ofFloatImage_drawSubsection, None, ofFloatImage)
ofFloatImage.update = new_instancemethod(_openframeworks.ofFloatImage_update, None, ofFloatImage)
ofFloatImage.setUseTexture = new_instancemethod(_openframeworks.ofFloatImage_setUseTexture, None, ofFloatImage)
ofFloatImage.isUsingTexture = new_instancemethod(_openframeworks.ofFloatImage_isUsingTexture, None, ofFloatImage)
ofFloatImage.getTexture = new_instancemethod(_openframeworks.ofFloatImage_getTexture, None, ofFloatImage)
ofFloatImage.bind = new_instancemethod(_openframeworks.ofFloatImage_bind, None, ofFloatImage)
ofFloatImage.unbind = new_instancemethod(_openframeworks.ofFloatImage_unbind, None, ofFloatImage)
ofFloatImage.setCompression = new_instancemethod(_openframeworks.ofFloatImage_setCompression, None, ofFloatImage)
ofFloatImage.getPixels = new_instancemethod(_openframeworks.ofFloatImage_getPixels, None, ofFloatImage)
ofFloatImage.getColor = new_instancemethod(_openframeworks.ofFloatImage_getColor, None, ofFloatImage)
ofFloatImage.getHeight = new_instancemethod(_openframeworks.ofFloatImage_getHeight, None, ofFloatImage)
ofFloatImage.getWidth = new_instancemethod(_openframeworks.ofFloatImage_getWidth, None, ofFloatImage)
ofFloatImage.setColor = new_instancemethod(_openframeworks.ofFloatImage_setColor, None, ofFloatImage)
ofFloatImage.setFromPixels = new_instancemethod(_openframeworks.ofFloatImage_setFromPixels, None, ofFloatImage)
ofFloatImage.grabScreen = new_instancemethod(_openframeworks.ofFloatImage_grabScreen, None, ofFloatImage)
ofFloatImage.setImageType = new_instancemethod(_openframeworks.ofFloatImage_setImageType, None, ofFloatImage)
ofFloatImage.getImageType = new_instancemethod(_openframeworks.ofFloatImage_getImageType, None, ofFloatImage)
ofFloatImage.resize = new_instancemethod(_openframeworks.ofFloatImage_resize, None, ofFloatImage)
ofFloatImage.crop = new_instancemethod(_openframeworks.ofFloatImage_crop, None, ofFloatImage)
ofFloatImage.cropFrom = new_instancemethod(_openframeworks.ofFloatImage_cropFrom, None, ofFloatImage)
ofFloatImage.rotate90 = new_instancemethod(_openframeworks.ofFloatImage_rotate90, None, ofFloatImage)
ofFloatImage.mirror = new_instancemethod(_openframeworks.ofFloatImage_mirror, None, ofFloatImage)
ofFloatImage.setAnchorPercent = new_instancemethod(_openframeworks.ofFloatImage_setAnchorPercent, None, ofFloatImage)
ofFloatImage.setAnchorPoint = new_instancemethod(_openframeworks.ofFloatImage_setAnchorPoint, None, ofFloatImage)
ofFloatImage.resetAnchor = new_instancemethod(_openframeworks.ofFloatImage_resetAnchor, None, ofFloatImage)
ofFloatImage.save = new_instancemethod(_openframeworks.ofFloatImage_save, None, ofFloatImage)
ofFloatImage_swigregister = _openframeworks.ofFloatImage_swigregister
ofFloatImage_swigregister(ofFloatImage)

class ofShortImage(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openframeworks.ofShortImage_swiginit(self, _openframeworks.new_ofShortImage(*args))
    __swig_destroy__ = _openframeworks.delete_ofShortImage
ofShortImage.allocate = new_instancemethod(_openframeworks.ofShortImage_allocate, None, ofShortImage)
ofShortImage.isAllocated = new_instancemethod(_openframeworks.ofShortImage_isAllocated, None, ofShortImage)
ofShortImage.clear = new_instancemethod(_openframeworks.ofShortImage_clear, None, ofShortImage)
ofShortImage.load = new_instancemethod(_openframeworks.ofShortImage_load, None, ofShortImage)
ofShortImage.draw = new_instancemethod(_openframeworks.ofShortImage_draw, None, ofShortImage)
ofShortImage.drawSubsection = new_instancemethod(_openframeworks.ofShortImage_drawSubsection, None, ofShortImage)
ofShortImage.update = new_instancemethod(_openframeworks.ofShortImage_update, None, ofShortImage)
ofShortImage.setUseTexture = new_instancemethod(_openframeworks.ofShortImage_setUseTexture, None, ofShortImage)
ofShortImage.isUsingTexture = new_instancemethod(_openframeworks.ofShortImage_isUsingTexture, None, ofShortImage)
ofShortImage.getTexture = new_instancemethod(_openframeworks.ofShortImage_getTexture, None, ofShortImage)
ofShortImage.bind = new_instancemethod(_openframeworks.ofShortImage_bind, None, ofShortImage)
ofShortImage.unbind = new_instancemethod(_openframeworks.ofShortImage_unbind, None, ofShortImage)
ofShortImage.setCompression = new_instancemethod(_openframeworks.ofShortImage_setCompression, None, ofShortImage)
ofShortImage.getPixels = new_instancemethod(_openframeworks.ofShortImage_getPixels, None, ofShortImage)
ofShortImage.getColor = new_instancemethod(_openframeworks.ofShortImage_getColor, None, ofShortImage)
ofShortImage.getHeight = new_instancemethod(_openframeworks.ofShortImage_getHeight, None, ofShortImage)
ofShortImage.getWidth = new_instancemethod(_openframeworks.ofShortImage_getWidth, None, ofShortImage)
ofShortImage.setColor = new_instancemethod(_openframeworks.ofShortImage_setColor, None, ofShortImage)
ofShortImage.setFromPixels = new_instancemethod(_openframeworks.ofShortImage_setFromPixels, None, ofShortImage)
ofShortImage.grabScreen = new_instancemethod(_openframeworks.ofShortImage_grabScreen, None, ofShortImage)
ofShortImage.setImageType = new_instancemethod(_openframeworks.ofShortImage_setImageType, None, ofShortImage)
ofShortImage.getImageType = new_instancemethod(_openframeworks.ofShortImage_getImageType, None, ofShortImage)
ofShortImage.resize = new_instancemethod(_openframeworks.ofShortImage_resize, None, ofShortImage)
ofShortImage.crop = new_instancemethod(_openframeworks.ofShortImage_crop, None, ofShortImage)
ofShortImage.cropFrom = new_instancemethod(_openframeworks.ofShortImage_cropFrom, None, ofShortImage)
ofShortImage.rotate90 = new_instancemethod(_openframeworks.ofShortImage_rotate90, None, ofShortImage)
ofShortImage.mirror = new_instancemethod(_openframeworks.ofShortImage_mirror, None, ofShortImage)
ofShortImage.setAnchorPercent = new_instancemethod(_openframeworks.ofShortImage_setAnchorPercent, None, ofShortImage)
ofShortImage.setAnchorPoint = new_instancemethod(_openframeworks.ofShortImage_setAnchorPoint, None, ofShortImage)
ofShortImage.resetAnchor = new_instancemethod(_openframeworks.ofShortImage_resetAnchor, None, ofShortImage)
ofShortImage.save = new_instancemethod(_openframeworks.ofShortImage_save, None, ofShortImage)
ofShortImage_swigregister = _openframeworks.ofShortImage_swigregister
ofShortImage_swigregister(ofShortImage)

class ofStyle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _openframeworks.ofStyle_swiginit(self, _openframeworks.new_ofStyle())
    __swig_destroy__ = _openframeworks.delete_ofStyle
    color = _swig_property(_openframeworks.ofStyle_color_get, _openframeworks.ofStyle_color_set)
    bgColor = _swig_property(_openframeworks.ofStyle_bgColor_get, _openframeworks.ofStyle_bgColor_set)
    polyMode = _swig_property(_openframeworks.ofStyle_polyMode_get, _openframeworks.ofStyle_polyMode_set)
    rectMode = _swig_property(_openframeworks.ofStyle_rectMode_get, _openframeworks.ofStyle_rectMode_set)
    bFill = _swig_property(_openframeworks.ofStyle_bFill_get, _openframeworks.ofStyle_bFill_set)
    drawBitmapMode = _swig_property(_openframeworks.ofStyle_drawBitmapMode_get, _openframeworks.ofStyle_drawBitmapMode_set)
    blendingMode = _swig_property(_openframeworks.ofStyle_blendingMode_get, _openframeworks.ofStyle_blendingMode_set)
    smoothing = _swig_property(_openframeworks.ofStyle_smoothing_get, _openframeworks.ofStyle_smoothing_set)
    circleResolution = _swig_property(_openframeworks.ofStyle_circleResolution_get, _openframeworks.ofStyle_circleResolution_set)
    sphereResolution = _swig_property(_openframeworks.ofStyle_sphereResolution_get, _openframeworks.ofStyle_sphereResolution_set)
    curveResolution = _swig_property(_openframeworks.ofStyle_curveResolution_get, _openframeworks.ofStyle_curveResolution_set)
    lineWidth = _swig_property(_openframeworks.ofStyle_lineWidth_get, _openframeworks.ofStyle_lineWidth_set)
ofStyle_swigregister = _openframeworks.ofStyle_swigregister
ofStyle_swigregister(ofStyle)

class ofSoundDevice(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    UNSPECIFIED = _openframeworks.ofSoundDevice_UNSPECIFIED
    DEFAULT = _openframeworks.ofSoundDevice_DEFAULT
    ALSA = _openframeworks.ofSoundDevice_ALSA
    PULSE = _openframeworks.ofSoundDevice_PULSE
    OSS = _openframeworks.ofSoundDevice_OSS
    JACK = _openframeworks.ofSoundDevice_JACK
    OSX_CORE = _openframeworks.ofSoundDevice_OSX_CORE
    MS_WASAPI = _openframeworks.ofSoundDevice_MS_WASAPI
    MS_ASIO = _openframeworks.ofSoundDevice_MS_ASIO
    MS_DS = _openframeworks.ofSoundDevice_MS_DS
    NUM_APIS = _openframeworks.ofSoundDevice_NUM_APIS
    api = _swig_property(_openframeworks.ofSoundDevice_api_get, _openframeworks.ofSoundDevice_api_set)
    name = _swig_property(_openframeworks.ofSoundDevice_name_get, _openframeworks.ofSoundDevice_name_set)
    deviceID = _swig_property(_openframeworks.ofSoundDevice_deviceID_get, _openframeworks.ofSoundDevice_deviceID_set)
    inputChannels = _swig_property(_openframeworks.ofSoundDevice_inputChannels_get, _openframeworks.ofSoundDevice_inputChannels_set)
    outputChannels = _swig_property(_openframeworks.ofSoundDevice_outputChannels_get, _openframeworks.ofSoundDevice_outputChannels_set)
    isDefaultInput = _swig_property(_openframeworks.ofSoundDevice_isDefaultInput_get, _openframeworks.ofSoundDevice_isDefaultInput_set)
    isDefaultOutput = _swig_property(_openframeworks.ofSoundDevice_isDefaultOutput_get, _openframeworks.ofSoundDevice_isDefaultOutput_set)
    sampleRates = _swig_property(_openframeworks.ofSoundDevice_sampleRates_get, _openframeworks.ofSoundDevice_sampleRates_set)

    def __init__(self):
        _openframeworks.ofSoundDevice_swiginit(self, _openframeworks.new_ofSoundDevice())
    __swig_destroy__ = _openframeworks.delete_ofSoundDevice
ofSoundDevice_swigregister = _openframeworks.ofSoundDevice_swigregister
ofSoundDevice_swigregister(ofSoundDevice)

class ofSoundStreamSettings(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofSoundStreamSettings
    sampleRate = _swig_property(_openframeworks.ofSoundStreamSettings_sampleRate_get, _openframeworks.ofSoundStreamSettings_sampleRate_set)
    bufferSize = _swig_property(_openframeworks.ofSoundStreamSettings_bufferSize_get, _openframeworks.ofSoundStreamSettings_bufferSize_set)
    numBuffers = _swig_property(_openframeworks.ofSoundStreamSettings_numBuffers_get, _openframeworks.ofSoundStreamSettings_numBuffers_set)
    numInputChannels = _swig_property(_openframeworks.ofSoundStreamSettings_numInputChannels_get, _openframeworks.ofSoundStreamSettings_numInputChannels_set)
    numOutputChannels = _swig_property(_openframeworks.ofSoundStreamSettings_numOutputChannels_get, _openframeworks.ofSoundStreamSettings_numOutputChannels_set)
    inCallback = _swig_property(_openframeworks.ofSoundStreamSettings_inCallback_get, _openframeworks.ofSoundStreamSettings_inCallback_set)
    outCallback = _swig_property(_openframeworks.ofSoundStreamSettings_outCallback_get, _openframeworks.ofSoundStreamSettings_outCallback_set)

    def __init__(self):
        _openframeworks.ofSoundStreamSettings_swiginit(self, _openframeworks.new_ofSoundStreamSettings())
ofSoundStreamSettings.setInDevice = new_instancemethod(_openframeworks.ofSoundStreamSettings_setInDevice, None, ofSoundStreamSettings)
ofSoundStreamSettings.setOutDevice = new_instancemethod(_openframeworks.ofSoundStreamSettings_setOutDevice, None, ofSoundStreamSettings)
ofSoundStreamSettings.setApi = new_instancemethod(_openframeworks.ofSoundStreamSettings_setApi, None, ofSoundStreamSettings)
ofSoundStreamSettings.getInDevice = new_instancemethod(_openframeworks.ofSoundStreamSettings_getInDevice, None, ofSoundStreamSettings)
ofSoundStreamSettings.getOutDevice = new_instancemethod(_openframeworks.ofSoundStreamSettings_getOutDevice, None, ofSoundStreamSettings)
ofSoundStreamSettings.getApi = new_instancemethod(_openframeworks.ofSoundStreamSettings_getApi, None, ofSoundStreamSettings)
ofSoundStreamSettings_swigregister = _openframeworks.ofSoundStreamSettings_swigregister
ofSoundStreamSettings_swigregister(ofSoundStreamSettings)

class ofBaseSoundStream(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofBaseSoundStream
ofBaseSoundStream.setup = new_instancemethod(_openframeworks.ofBaseSoundStream_setup, None, ofBaseSoundStream)
ofBaseSoundStream.setInput = new_instancemethod(_openframeworks.ofBaseSoundStream_setInput, None, ofBaseSoundStream)
ofBaseSoundStream.setOutput = new_instancemethod(_openframeworks.ofBaseSoundStream_setOutput, None, ofBaseSoundStream)
ofBaseSoundStream.getDeviceList = new_instancemethod(_openframeworks.ofBaseSoundStream_getDeviceList, None, ofBaseSoundStream)
ofBaseSoundStream.printDeviceList = new_instancemethod(_openframeworks.ofBaseSoundStream_printDeviceList, None, ofBaseSoundStream)
ofBaseSoundStream.start = new_instancemethod(_openframeworks.ofBaseSoundStream_start, None, ofBaseSoundStream)
ofBaseSoundStream.stop = new_instancemethod(_openframeworks.ofBaseSoundStream_stop, None, ofBaseSoundStream)
ofBaseSoundStream.close = new_instancemethod(_openframeworks.ofBaseSoundStream_close, None, ofBaseSoundStream)
ofBaseSoundStream.getTickCount = new_instancemethod(_openframeworks.ofBaseSoundStream_getTickCount, None, ofBaseSoundStream)
ofBaseSoundStream.getNumInputChannels = new_instancemethod(_openframeworks.ofBaseSoundStream_getNumInputChannels, None, ofBaseSoundStream)
ofBaseSoundStream.getNumOutputChannels = new_instancemethod(_openframeworks.ofBaseSoundStream_getNumOutputChannels, None, ofBaseSoundStream)
ofBaseSoundStream.getSampleRate = new_instancemethod(_openframeworks.ofBaseSoundStream_getSampleRate, None, ofBaseSoundStream)
ofBaseSoundStream.getBufferSize = new_instancemethod(_openframeworks.ofBaseSoundStream_getBufferSize, None, ofBaseSoundStream)
ofBaseSoundStream.getInDevice = new_instancemethod(_openframeworks.ofBaseSoundStream_getInDevice, None, ofBaseSoundStream)
ofBaseSoundStream.getOutDevice = new_instancemethod(_openframeworks.ofBaseSoundStream_getOutDevice, None, ofBaseSoundStream)
ofBaseSoundStream_swigregister = _openframeworks.ofBaseSoundStream_swigregister
ofBaseSoundStream_swigregister(ofBaseSoundStream)


def toString(api):
    return _openframeworks.toString(api)
toString = _openframeworks.toString
class ofBaseSoundPlayer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofBaseSoundPlayer
ofBaseSoundPlayer.load = new_instancemethod(_openframeworks.ofBaseSoundPlayer_load, None, ofBaseSoundPlayer)
ofBaseSoundPlayer.unload = new_instancemethod(_openframeworks.ofBaseSoundPlayer_unload, None, ofBaseSoundPlayer)
ofBaseSoundPlayer.play = new_instancemethod(_openframeworks.ofBaseSoundPlayer_play, None, ofBaseSoundPlayer)
ofBaseSoundPlayer.stop = new_instancemethod(_openframeworks.ofBaseSoundPlayer_stop, None, ofBaseSoundPlayer)
ofBaseSoundPlayer.setVolume = new_instancemethod(_openframeworks.ofBaseSoundPlayer_setVolume, None, ofBaseSoundPlayer)
ofBaseSoundPlayer.setPan = new_instancemethod(_openframeworks.ofBaseSoundPlayer_setPan, None, ofBaseSoundPlayer)
ofBaseSoundPlayer.setSpeed = new_instancemethod(_openframeworks.ofBaseSoundPlayer_setSpeed, None, ofBaseSoundPlayer)
ofBaseSoundPlayer.setPaused = new_instancemethod(_openframeworks.ofBaseSoundPlayer_setPaused, None, ofBaseSoundPlayer)
ofBaseSoundPlayer.setLoop = new_instancemethod(_openframeworks.ofBaseSoundPlayer_setLoop, None, ofBaseSoundPlayer)
ofBaseSoundPlayer.setMultiPlay = new_instancemethod(_openframeworks.ofBaseSoundPlayer_setMultiPlay, None, ofBaseSoundPlayer)
ofBaseSoundPlayer.setPosition = new_instancemethod(_openframeworks.ofBaseSoundPlayer_setPosition, None, ofBaseSoundPlayer)
ofBaseSoundPlayer.setPositionMS = new_instancemethod(_openframeworks.ofBaseSoundPlayer_setPositionMS, None, ofBaseSoundPlayer)
ofBaseSoundPlayer.getPosition = new_instancemethod(_openframeworks.ofBaseSoundPlayer_getPosition, None, ofBaseSoundPlayer)
ofBaseSoundPlayer.getPositionMS = new_instancemethod(_openframeworks.ofBaseSoundPlayer_getPositionMS, None, ofBaseSoundPlayer)
ofBaseSoundPlayer.isPlaying = new_instancemethod(_openframeworks.ofBaseSoundPlayer_isPlaying, None, ofBaseSoundPlayer)
ofBaseSoundPlayer.getSpeed = new_instancemethod(_openframeworks.ofBaseSoundPlayer_getSpeed, None, ofBaseSoundPlayer)
ofBaseSoundPlayer.getPan = new_instancemethod(_openframeworks.ofBaseSoundPlayer_getPan, None, ofBaseSoundPlayer)
ofBaseSoundPlayer.isLoaded = new_instancemethod(_openframeworks.ofBaseSoundPlayer_isLoaded, None, ofBaseSoundPlayer)
ofBaseSoundPlayer.getVolume = new_instancemethod(_openframeworks.ofBaseSoundPlayer_getVolume, None, ofBaseSoundPlayer)
ofBaseSoundPlayer_swigregister = _openframeworks.ofBaseSoundPlayer_swigregister
ofBaseSoundPlayer_swigregister(ofBaseSoundPlayer)

OF_LOOP_NONE = _openframeworks.OF_LOOP_NONE
OF_LOOP_PALINDROME = _openframeworks.OF_LOOP_PALINDROME
OF_LOOP_NORMAL = _openframeworks.OF_LOOP_NORMAL
class ofVideoFormat(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    pixelFormat = _swig_property(_openframeworks.ofVideoFormat_pixelFormat_get, _openframeworks.ofVideoFormat_pixelFormat_set)
    width = _swig_property(_openframeworks.ofVideoFormat_width_get, _openframeworks.ofVideoFormat_width_set)
    height = _swig_property(_openframeworks.ofVideoFormat_height_get, _openframeworks.ofVideoFormat_height_set)
    framerates = _swig_property(_openframeworks.ofVideoFormat_framerates_get, _openframeworks.ofVideoFormat_framerates_set)
    __swig_destroy__ = _openframeworks.delete_ofVideoFormat
ofVideoFormat_swigregister = _openframeworks.ofVideoFormat_swigregister
ofVideoFormat_swigregister(ofVideoFormat)

class ofVideoDevice(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    id = _swig_property(_openframeworks.ofVideoDevice_id_get, _openframeworks.ofVideoDevice_id_set)
    deviceName = _swig_property(_openframeworks.ofVideoDevice_deviceName_get, _openframeworks.ofVideoDevice_deviceName_set)
    hardwareName = _swig_property(_openframeworks.ofVideoDevice_hardwareName_get, _openframeworks.ofVideoDevice_hardwareName_set)
    serialID = _swig_property(_openframeworks.ofVideoDevice_serialID_get, _openframeworks.ofVideoDevice_serialID_set)
    formats = _swig_property(_openframeworks.ofVideoDevice_formats_get, _openframeworks.ofVideoDevice_formats_set)
    bAvailable = _swig_property(_openframeworks.ofVideoDevice_bAvailable_get, _openframeworks.ofVideoDevice_bAvailable_set)
    __swig_destroy__ = _openframeworks.delete_ofVideoDevice
ofVideoDevice_swigregister = _openframeworks.ofVideoDevice_swigregister
ofVideoDevice_swigregister(ofVideoDevice)

class ofNode(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofNode

    def __init__(self, *args):
        _openframeworks.ofNode_swiginit(self, _openframeworks.new_ofNode(*args))
ofNode.setParent = new_instancemethod(_openframeworks.ofNode_setParent, None, ofNode)
ofNode.clearParent = new_instancemethod(_openframeworks.ofNode_clearParent, None, ofNode)
ofNode.getParent = new_instancemethod(_openframeworks.ofNode_getParent, None, ofNode)
ofNode.getPosition = new_instancemethod(_openframeworks.ofNode_getPosition, None, ofNode)
ofNode.getX = new_instancemethod(_openframeworks.ofNode_getX, None, ofNode)
ofNode.getY = new_instancemethod(_openframeworks.ofNode_getY, None, ofNode)
ofNode.getZ = new_instancemethod(_openframeworks.ofNode_getZ, None, ofNode)
ofNode.getXAxis = new_instancemethod(_openframeworks.ofNode_getXAxis, None, ofNode)
ofNode.getYAxis = new_instancemethod(_openframeworks.ofNode_getYAxis, None, ofNode)
ofNode.getZAxis = new_instancemethod(_openframeworks.ofNode_getZAxis, None, ofNode)
ofNode.getSideDir = new_instancemethod(_openframeworks.ofNode_getSideDir, None, ofNode)
ofNode.getLookAtDir = new_instancemethod(_openframeworks.ofNode_getLookAtDir, None, ofNode)
ofNode.getUpDir = new_instancemethod(_openframeworks.ofNode_getUpDir, None, ofNode)
ofNode.getPitchDeg = new_instancemethod(_openframeworks.ofNode_getPitchDeg, None, ofNode)
ofNode.getHeadingDeg = new_instancemethod(_openframeworks.ofNode_getHeadingDeg, None, ofNode)
ofNode.getRollDeg = new_instancemethod(_openframeworks.ofNode_getRollDeg, None, ofNode)
ofNode.getPitchRad = new_instancemethod(_openframeworks.ofNode_getPitchRad, None, ofNode)
ofNode.getHeadingRad = new_instancemethod(_openframeworks.ofNode_getHeadingRad, None, ofNode)
ofNode.getRollRad = new_instancemethod(_openframeworks.ofNode_getRollRad, None, ofNode)
ofNode.getOrientationQuat = new_instancemethod(_openframeworks.ofNode_getOrientationQuat, None, ofNode)
ofNode.getOrientationEulerDeg = new_instancemethod(_openframeworks.ofNode_getOrientationEulerDeg, None, ofNode)
ofNode.getOrientationEulerRad = new_instancemethod(_openframeworks.ofNode_getOrientationEulerRad, None, ofNode)
ofNode.getScale = new_instancemethod(_openframeworks.ofNode_getScale, None, ofNode)
ofNode.getLocalTransformMatrix = new_instancemethod(_openframeworks.ofNode_getLocalTransformMatrix, None, ofNode)
ofNode.getGlobalTransformMatrix = new_instancemethod(_openframeworks.ofNode_getGlobalTransformMatrix, None, ofNode)
ofNode.getGlobalPosition = new_instancemethod(_openframeworks.ofNode_getGlobalPosition, None, ofNode)
ofNode.getGlobalOrientation = new_instancemethod(_openframeworks.ofNode_getGlobalOrientation, None, ofNode)
ofNode.getGlobalScale = new_instancemethod(_openframeworks.ofNode_getGlobalScale, None, ofNode)
ofNode.setPosition = new_instancemethod(_openframeworks.ofNode_setPosition, None, ofNode)
ofNode.setGlobalPosition = new_instancemethod(_openframeworks.ofNode_setGlobalPosition, None, ofNode)
ofNode.setOrientation = new_instancemethod(_openframeworks.ofNode_setOrientation, None, ofNode)
ofNode.setGlobalOrientation = new_instancemethod(_openframeworks.ofNode_setGlobalOrientation, None, ofNode)
ofNode.setScale = new_instancemethod(_openframeworks.ofNode_setScale, None, ofNode)
ofNode.move = new_instancemethod(_openframeworks.ofNode_move, None, ofNode)
ofNode.truck = new_instancemethod(_openframeworks.ofNode_truck, None, ofNode)
ofNode.boom = new_instancemethod(_openframeworks.ofNode_boom, None, ofNode)
ofNode.dolly = new_instancemethod(_openframeworks.ofNode_dolly, None, ofNode)
ofNode.tiltDeg = new_instancemethod(_openframeworks.ofNode_tiltDeg, None, ofNode)
ofNode.tiltRad = new_instancemethod(_openframeworks.ofNode_tiltRad, None, ofNode)
ofNode.panDeg = new_instancemethod(_openframeworks.ofNode_panDeg, None, ofNode)
ofNode.panRad = new_instancemethod(_openframeworks.ofNode_panRad, None, ofNode)
ofNode.rollDeg = new_instancemethod(_openframeworks.ofNode_rollDeg, None, ofNode)
ofNode.rollRad = new_instancemethod(_openframeworks.ofNode_rollRad, None, ofNode)
ofNode.rotateDeg = new_instancemethod(_openframeworks.ofNode_rotateDeg, None, ofNode)
ofNode.rotateRad = new_instancemethod(_openframeworks.ofNode_rotateRad, None, ofNode)
ofNode.rotateAround = new_instancemethod(_openframeworks.ofNode_rotateAround, None, ofNode)
ofNode.rotateAroundDeg = new_instancemethod(_openframeworks.ofNode_rotateAroundDeg, None, ofNode)
ofNode.rotateAroundRad = new_instancemethod(_openframeworks.ofNode_rotateAroundRad, None, ofNode)
ofNode.lookAt = new_instancemethod(_openframeworks.ofNode_lookAt, None, ofNode)
ofNode.orbitDeg = new_instancemethod(_openframeworks.ofNode_orbitDeg, None, ofNode)
ofNode.orbitRad = new_instancemethod(_openframeworks.ofNode_orbitRad, None, ofNode)
ofNode.transformGL = new_instancemethod(_openframeworks.ofNode_transformGL, None, ofNode)
ofNode.restoreTransformGL = new_instancemethod(_openframeworks.ofNode_restoreTransformGL, None, ofNode)
ofNode.resetTransform = new_instancemethod(_openframeworks.ofNode_resetTransform, None, ofNode)
ofNode.customDraw = new_instancemethod(_openframeworks.ofNode_customDraw, None, ofNode)
ofNode.draw = new_instancemethod(_openframeworks.ofNode_draw, None, ofNode)
ofNode_swigregister = _openframeworks.ofNode_swigregister
ofNode_swigregister(ofNode)


def ofDrawAxis(size):
    return _openframeworks.ofDrawAxis(size)
ofDrawAxis = _openframeworks.ofDrawAxis

def ofDrawGrid(stepSize=1.25, numberOfSteps=8, labels=False, x=True, y=True, z=True):
    return _openframeworks.ofDrawGrid(stepSize, numberOfSteps, labels, x, y, z)
ofDrawGrid = _openframeworks.ofDrawGrid

def ofDrawGridPlane(stepSize=1.25, numberOfSteps=8, labels=False):
    return _openframeworks.ofDrawGridPlane(stepSize, numberOfSteps, labels)
ofDrawGridPlane = _openframeworks.ofDrawGridPlane

def ofDrawArrow(start, end, headSize=0.05):
    return _openframeworks.ofDrawArrow(start, end, headSize)
ofDrawArrow = _openframeworks.ofDrawArrow

def ofDrawRotationAxes(radius, stripWidth=10, circleRes=60):
    return _openframeworks.ofDrawRotationAxes(radius, stripWidth, circleRes)
ofDrawRotationAxes = _openframeworks.ofDrawRotationAxes
class ofCamera(ofNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _openframeworks.ofCamera_swiginit(self, _openframeworks.new_ofCamera())
    __swig_destroy__ = _openframeworks.delete_ofCamera
ofCamera.setFov = new_instancemethod(_openframeworks.ofCamera_setFov, None, ofCamera)
ofCamera.setNearClip = new_instancemethod(_openframeworks.ofCamera_setNearClip, None, ofCamera)
ofCamera.setFarClip = new_instancemethod(_openframeworks.ofCamera_setFarClip, None, ofCamera)
ofCamera.setLensOffset = new_instancemethod(_openframeworks.ofCamera_setLensOffset, None, ofCamera)
ofCamera.setAspectRatio = new_instancemethod(_openframeworks.ofCamera_setAspectRatio, None, ofCamera)
ofCamera.setForceAspectRatio = new_instancemethod(_openframeworks.ofCamera_setForceAspectRatio, None, ofCamera)
ofCamera.getFov = new_instancemethod(_openframeworks.ofCamera_getFov, None, ofCamera)
ofCamera.getNearClip = new_instancemethod(_openframeworks.ofCamera_getNearClip, None, ofCamera)
ofCamera.getFarClip = new_instancemethod(_openframeworks.ofCamera_getFarClip, None, ofCamera)
ofCamera.getLensOffset = new_instancemethod(_openframeworks.ofCamera_getLensOffset, None, ofCamera)
ofCamera.getForceAspectRatio = new_instancemethod(_openframeworks.ofCamera_getForceAspectRatio, None, ofCamera)
ofCamera.getAspectRatio = new_instancemethod(_openframeworks.ofCamera_getAspectRatio, None, ofCamera)
ofCamera.setupPerspective = new_instancemethod(_openframeworks.ofCamera_setupPerspective, None, ofCamera)
ofCamera.setupOffAxisViewPortal = new_instancemethod(_openframeworks.ofCamera_setupOffAxisViewPortal, None, ofCamera)
ofCamera.setVFlip = new_instancemethod(_openframeworks.ofCamera_setVFlip, None, ofCamera)
ofCamera.isVFlipped = new_instancemethod(_openframeworks.ofCamera_isVFlipped, None, ofCamera)
ofCamera.enableOrtho = new_instancemethod(_openframeworks.ofCamera_enableOrtho, None, ofCamera)
ofCamera.disableOrtho = new_instancemethod(_openframeworks.ofCamera_disableOrtho, None, ofCamera)
ofCamera.getOrtho = new_instancemethod(_openframeworks.ofCamera_getOrtho, None, ofCamera)
ofCamera.getImagePlaneDistance = new_instancemethod(_openframeworks.ofCamera_getImagePlaneDistance, None, ofCamera)
ofCamera.begin = new_instancemethod(_openframeworks.ofCamera_begin, None, ofCamera)
ofCamera.end = new_instancemethod(_openframeworks.ofCamera_end, None, ofCamera)
ofCamera.getProjectionMatrix = new_instancemethod(_openframeworks.ofCamera_getProjectionMatrix, None, ofCamera)
ofCamera.getModelViewMatrix = new_instancemethod(_openframeworks.ofCamera_getModelViewMatrix, None, ofCamera)
ofCamera.getModelViewProjectionMatrix = new_instancemethod(_openframeworks.ofCamera_getModelViewProjectionMatrix, None, ofCamera)
ofCamera.worldToScreen = new_instancemethod(_openframeworks.ofCamera_worldToScreen, None, ofCamera)
ofCamera.screenToWorld = new_instancemethod(_openframeworks.ofCamera_screenToWorld, None, ofCamera)
ofCamera.worldToCamera = new_instancemethod(_openframeworks.ofCamera_worldToCamera, None, ofCamera)
ofCamera.cameraToWorld = new_instancemethod(_openframeworks.ofCamera_cameraToWorld, None, ofCamera)
ofCamera.setRenderer = new_instancemethod(_openframeworks.ofCamera_setRenderer, None, ofCamera)
ofCamera.drawFrustum = new_instancemethod(_openframeworks.ofCamera_drawFrustum, None, ofCamera)
ofCamera_swigregister = _openframeworks.ofCamera_swigregister
ofCamera_swigregister(ofCamera)

class ofEasyCam(ofCamera):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _openframeworks.ofEasyCam_swiginit(self, _openframeworks.new_ofEasyCam())
    TRANSFORM_NONE = _openframeworks.ofEasyCam_TRANSFORM_NONE
    TRANSFORM_ROTATE = _openframeworks.ofEasyCam_TRANSFORM_ROTATE
    TRANSFORM_TRANSLATE_XY = _openframeworks.ofEasyCam_TRANSFORM_TRANSLATE_XY
    TRANSFORM_TRANSLATE_Z = _openframeworks.ofEasyCam_TRANSFORM_TRANSLATE_Z
    TRANSFORM_SCALE = _openframeworks.ofEasyCam_TRANSFORM_SCALE
    __swig_destroy__ = _openframeworks.delete_ofEasyCam
ofEasyCam.begin = new_instancemethod(_openframeworks.ofEasyCam_begin, None, ofEasyCam)
ofEasyCam.reset = new_instancemethod(_openframeworks.ofEasyCam_reset, None, ofEasyCam)
ofEasyCam.setTarget = new_instancemethod(_openframeworks.ofEasyCam_setTarget, None, ofEasyCam)
ofEasyCam.getTarget = new_instancemethod(_openframeworks.ofEasyCam_getTarget, None, ofEasyCam)
ofEasyCam.setDistance = new_instancemethod(_openframeworks.ofEasyCam_setDistance, None, ofEasyCam)
ofEasyCam.getDistance = new_instancemethod(_openframeworks.ofEasyCam_getDistance, None, ofEasyCam)
ofEasyCam.setDrag = new_instancemethod(_openframeworks.ofEasyCam_setDrag, None, ofEasyCam)
ofEasyCam.getDrag = new_instancemethod(_openframeworks.ofEasyCam_getDrag, None, ofEasyCam)
ofEasyCam.setAutoDistance = new_instancemethod(_openframeworks.ofEasyCam_setAutoDistance, None, ofEasyCam)
ofEasyCam.setEvents = new_instancemethod(_openframeworks.ofEasyCam_setEvents, None, ofEasyCam)
ofEasyCam.setRotationSensitivity = new_instancemethod(_openframeworks.ofEasyCam_setRotationSensitivity, None, ofEasyCam)
ofEasyCam.setTranslationSensitivity = new_instancemethod(_openframeworks.ofEasyCam_setTranslationSensitivity, None, ofEasyCam)
ofEasyCam.setTranslationKey = new_instancemethod(_openframeworks.ofEasyCam_setTranslationKey, None, ofEasyCam)
ofEasyCam.getTranslationKey = new_instancemethod(_openframeworks.ofEasyCam_getTranslationKey, None, ofEasyCam)
ofEasyCam.enableMouseInput = new_instancemethod(_openframeworks.ofEasyCam_enableMouseInput, None, ofEasyCam)
ofEasyCam.disableMouseInput = new_instancemethod(_openframeworks.ofEasyCam_disableMouseInput, None, ofEasyCam)
ofEasyCam.getMouseInputEnabled = new_instancemethod(_openframeworks.ofEasyCam_getMouseInputEnabled, None, ofEasyCam)
ofEasyCam.enableMouseMiddleButton = new_instancemethod(_openframeworks.ofEasyCam_enableMouseMiddleButton, None, ofEasyCam)
ofEasyCam.disableMouseMiddleButton = new_instancemethod(_openframeworks.ofEasyCam_disableMouseMiddleButton, None, ofEasyCam)
ofEasyCam.getMouseMiddleButtonEnabled = new_instancemethod(_openframeworks.ofEasyCam_getMouseMiddleButtonEnabled, None, ofEasyCam)
ofEasyCam.setRelativeYAxis = new_instancemethod(_openframeworks.ofEasyCam_setRelativeYAxis, None, ofEasyCam)
ofEasyCam.getRelativeYAxis = new_instancemethod(_openframeworks.ofEasyCam_getRelativeYAxis, None, ofEasyCam)
ofEasyCam.setUpAxis = new_instancemethod(_openframeworks.ofEasyCam_setUpAxis, None, ofEasyCam)
ofEasyCam.getUpAxis = new_instancemethod(_openframeworks.ofEasyCam_getUpAxis, None, ofEasyCam)
ofEasyCam.enableInertia = new_instancemethod(_openframeworks.ofEasyCam_enableInertia, None, ofEasyCam)
ofEasyCam.disableInertia = new_instancemethod(_openframeworks.ofEasyCam_disableInertia, None, ofEasyCam)
ofEasyCam.getInertiaEnabled = new_instancemethod(_openframeworks.ofEasyCam_getInertiaEnabled, None, ofEasyCam)
ofEasyCam.setControlArea = new_instancemethod(_openframeworks.ofEasyCam_setControlArea, None, ofEasyCam)
ofEasyCam.clearControlArea = new_instancemethod(_openframeworks.ofEasyCam_clearControlArea, None, ofEasyCam)
ofEasyCam.getControlArea = new_instancemethod(_openframeworks.ofEasyCam_getControlArea, None, ofEasyCam)
ofEasyCam.addInteraction = new_instancemethod(_openframeworks.ofEasyCam_addInteraction, None, ofEasyCam)
ofEasyCam.removeInteraction = new_instancemethod(_openframeworks.ofEasyCam_removeInteraction, None, ofEasyCam)
ofEasyCam.hasInteraction = new_instancemethod(_openframeworks.ofEasyCam_hasInteraction, None, ofEasyCam)
ofEasyCam.removeAllInteractions = new_instancemethod(_openframeworks.ofEasyCam_removeAllInteractions, None, ofEasyCam)
ofEasyCam_swigregister = _openframeworks.ofEasyCam_swigregister
ofEasyCam_swigregister(ofEasyCam)

class ofMesh(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openframeworks.ofMesh_swiginit(self, _openframeworks.new_ofMesh(*args))
    __swig_destroy__ = _openframeworks.delete_ofMesh
    plane = staticmethod(_openframeworks.ofMesh_plane)
    sphere = staticmethod(_openframeworks.ofMesh_sphere)
    icosahedron = staticmethod(_openframeworks.ofMesh_icosahedron)
    icosphere = staticmethod(_openframeworks.ofMesh_icosphere)
    cylinder = staticmethod(_openframeworks.ofMesh_cylinder)
    cone = staticmethod(_openframeworks.ofMesh_cone)
    box = staticmethod(_openframeworks.ofMesh_box)
    axis = staticmethod(_openframeworks.ofMesh_axis)
ofMesh.setFromTriangles = new_instancemethod(_openframeworks.ofMesh_setFromTriangles, None, ofMesh)
ofMesh.setMode = new_instancemethod(_openframeworks.ofMesh_setMode, None, ofMesh)
ofMesh.getMode = new_instancemethod(_openframeworks.ofMesh_getMode, None, ofMesh)
ofMesh.addVertex = new_instancemethod(_openframeworks.ofMesh_addVertex, None, ofMesh)
ofMesh.addVertices = new_instancemethod(_openframeworks.ofMesh_addVertices, None, ofMesh)
ofMesh.removeVertex = new_instancemethod(_openframeworks.ofMesh_removeVertex, None, ofMesh)
ofMesh.setVertex = new_instancemethod(_openframeworks.ofMesh_setVertex, None, ofMesh)
ofMesh.clearVertices = new_instancemethod(_openframeworks.ofMesh_clearVertices, None, ofMesh)
ofMesh.clear = new_instancemethod(_openframeworks.ofMesh_clear, None, ofMesh)
ofMesh.getNumVertices = new_instancemethod(_openframeworks.ofMesh_getNumVertices, None, ofMesh)
ofMesh.getVerticesPointer = new_instancemethod(_openframeworks.ofMesh_getVerticesPointer, None, ofMesh)
ofMesh.getVertex = new_instancemethod(_openframeworks.ofMesh_getVertex, None, ofMesh)
ofMesh.getVertices = new_instancemethod(_openframeworks.ofMesh_getVertices, None, ofMesh)
ofMesh.hasVertices = new_instancemethod(_openframeworks.ofMesh_hasVertices, None, ofMesh)
ofMesh.append = new_instancemethod(_openframeworks.ofMesh_append, None, ofMesh)
ofMesh.mergeDuplicateVertices = new_instancemethod(_openframeworks.ofMesh_mergeDuplicateVertices, None, ofMesh)
ofMesh.getCentroid = new_instancemethod(_openframeworks.ofMesh_getCentroid, None, ofMesh)
ofMesh.getNormal = new_instancemethod(_openframeworks.ofMesh_getNormal, None, ofMesh)
ofMesh.addNormal = new_instancemethod(_openframeworks.ofMesh_addNormal, None, ofMesh)
ofMesh.addNormals = new_instancemethod(_openframeworks.ofMesh_addNormals, None, ofMesh)
ofMesh.removeNormal = new_instancemethod(_openframeworks.ofMesh_removeNormal, None, ofMesh)
ofMesh.setNormal = new_instancemethod(_openframeworks.ofMesh_setNormal, None, ofMesh)
ofMesh.clearNormals = new_instancemethod(_openframeworks.ofMesh_clearNormals, None, ofMesh)
ofMesh.getNumNormals = new_instancemethod(_openframeworks.ofMesh_getNumNormals, None, ofMesh)
ofMesh.getNormalsPointer = new_instancemethod(_openframeworks.ofMesh_getNormalsPointer, None, ofMesh)
ofMesh.getNormals = new_instancemethod(_openframeworks.ofMesh_getNormals, None, ofMesh)
ofMesh.hasNormals = new_instancemethod(_openframeworks.ofMesh_hasNormals, None, ofMesh)
ofMesh.enableNormals = new_instancemethod(_openframeworks.ofMesh_enableNormals, None, ofMesh)
ofMesh.disableNormals = new_instancemethod(_openframeworks.ofMesh_disableNormals, None, ofMesh)
ofMesh.usingNormals = new_instancemethod(_openframeworks.ofMesh_usingNormals, None, ofMesh)
ofMesh.smoothNormals = new_instancemethod(_openframeworks.ofMesh_smoothNormals, None, ofMesh)
ofMesh.flatNormals = new_instancemethod(_openframeworks.ofMesh_flatNormals, None, ofMesh)
ofMesh.getFace = new_instancemethod(_openframeworks.ofMesh_getFace, None, ofMesh)
ofMesh.getFaceNormals = new_instancemethod(_openframeworks.ofMesh_getFaceNormals, None, ofMesh)
ofMesh.getUniqueFaces = new_instancemethod(_openframeworks.ofMesh_getUniqueFaces, None, ofMesh)
ofMesh.getColor = new_instancemethod(_openframeworks.ofMesh_getColor, None, ofMesh)
ofMesh.addColor = new_instancemethod(_openframeworks.ofMesh_addColor, None, ofMesh)
ofMesh.addColors = new_instancemethod(_openframeworks.ofMesh_addColors, None, ofMesh)
ofMesh.removeColor = new_instancemethod(_openframeworks.ofMesh_removeColor, None, ofMesh)
ofMesh.setColor = new_instancemethod(_openframeworks.ofMesh_setColor, None, ofMesh)
ofMesh.clearColors = new_instancemethod(_openframeworks.ofMesh_clearColors, None, ofMesh)
ofMesh.getNumColors = new_instancemethod(_openframeworks.ofMesh_getNumColors, None, ofMesh)
ofMesh.getColorsPointer = new_instancemethod(_openframeworks.ofMesh_getColorsPointer, None, ofMesh)
ofMesh.getColors = new_instancemethod(_openframeworks.ofMesh_getColors, None, ofMesh)
ofMesh.hasColors = new_instancemethod(_openframeworks.ofMesh_hasColors, None, ofMesh)
ofMesh.enableColors = new_instancemethod(_openframeworks.ofMesh_enableColors, None, ofMesh)
ofMesh.disableColors = new_instancemethod(_openframeworks.ofMesh_disableColors, None, ofMesh)
ofMesh.usingColors = new_instancemethod(_openframeworks.ofMesh_usingColors, None, ofMesh)
ofMesh.getTexCoord = new_instancemethod(_openframeworks.ofMesh_getTexCoord, None, ofMesh)
ofMesh.addTexCoord = new_instancemethod(_openframeworks.ofMesh_addTexCoord, None, ofMesh)
ofMesh.addTexCoords = new_instancemethod(_openframeworks.ofMesh_addTexCoords, None, ofMesh)
ofMesh.removeTexCoord = new_instancemethod(_openframeworks.ofMesh_removeTexCoord, None, ofMesh)
ofMesh.setTexCoord = new_instancemethod(_openframeworks.ofMesh_setTexCoord, None, ofMesh)
ofMesh.clearTexCoords = new_instancemethod(_openframeworks.ofMesh_clearTexCoords, None, ofMesh)
ofMesh.getNumTexCoords = new_instancemethod(_openframeworks.ofMesh_getNumTexCoords, None, ofMesh)
ofMesh.getTexCoordsPointer = new_instancemethod(_openframeworks.ofMesh_getTexCoordsPointer, None, ofMesh)
ofMesh.getTexCoords = new_instancemethod(_openframeworks.ofMesh_getTexCoords, None, ofMesh)
ofMesh.hasTexCoords = new_instancemethod(_openframeworks.ofMesh_hasTexCoords, None, ofMesh)
ofMesh.enableTextures = new_instancemethod(_openframeworks.ofMesh_enableTextures, None, ofMesh)
ofMesh.disableTextures = new_instancemethod(_openframeworks.ofMesh_disableTextures, None, ofMesh)
ofMesh.usingTextures = new_instancemethod(_openframeworks.ofMesh_usingTextures, None, ofMesh)
ofMesh.setupIndicesAuto = new_instancemethod(_openframeworks.ofMesh_setupIndicesAuto, None, ofMesh)
ofMesh.getIndex = new_instancemethod(_openframeworks.ofMesh_getIndex, None, ofMesh)
ofMesh.addIndex = new_instancemethod(_openframeworks.ofMesh_addIndex, None, ofMesh)
ofMesh.addIndices = new_instancemethod(_openframeworks.ofMesh_addIndices, None, ofMesh)
ofMesh.removeIndex = new_instancemethod(_openframeworks.ofMesh_removeIndex, None, ofMesh)
ofMesh.setIndex = new_instancemethod(_openframeworks.ofMesh_setIndex, None, ofMesh)
ofMesh.clearIndices = new_instancemethod(_openframeworks.ofMesh_clearIndices, None, ofMesh)
ofMesh.getNumIndices = new_instancemethod(_openframeworks.ofMesh_getNumIndices, None, ofMesh)
ofMesh.getIndexPointer = new_instancemethod(_openframeworks.ofMesh_getIndexPointer, None, ofMesh)
ofMesh.getIndices = new_instancemethod(_openframeworks.ofMesh_getIndices, None, ofMesh)
ofMesh.hasIndices = new_instancemethod(_openframeworks.ofMesh_hasIndices, None, ofMesh)
ofMesh.addTriangle = new_instancemethod(_openframeworks.ofMesh_addTriangle, None, ofMesh)
ofMesh.enableIndices = new_instancemethod(_openframeworks.ofMesh_enableIndices, None, ofMesh)
ofMesh.disableIndices = new_instancemethod(_openframeworks.ofMesh_disableIndices, None, ofMesh)
ofMesh.usingIndices = new_instancemethod(_openframeworks.ofMesh_usingIndices, None, ofMesh)
ofMesh.setColorForIndices = new_instancemethod(_openframeworks.ofMesh_setColorForIndices, None, ofMesh)
ofMesh.getMeshForIndices = new_instancemethod(_openframeworks.ofMesh_getMeshForIndices, None, ofMesh)
ofMesh.drawVertices = new_instancemethod(_openframeworks.ofMesh_drawVertices, None, ofMesh)
ofMesh.drawWireframe = new_instancemethod(_openframeworks.ofMesh_drawWireframe, None, ofMesh)
ofMesh.drawFaces = new_instancemethod(_openframeworks.ofMesh_drawFaces, None, ofMesh)
ofMesh.draw = new_instancemethod(_openframeworks.ofMesh_draw, None, ofMesh)
ofMesh.load = new_instancemethod(_openframeworks.ofMesh_load, None, ofMesh)
ofMesh.save = new_instancemethod(_openframeworks.ofMesh_save, None, ofMesh)
ofMesh_swigregister = _openframeworks.ofMesh_swigregister
ofMesh_swigregister(ofMesh)

def ofMesh_plane(width, height, columns=2, rows=2, mode=OF_PRIMITIVE_TRIANGLE_STRIP):
    return _openframeworks.ofMesh_plane(width, height, columns, rows, mode)
ofMesh_plane = _openframeworks.ofMesh_plane

def ofMesh_sphere(radius, res=12, mode=OF_PRIMITIVE_TRIANGLE_STRIP):
    return _openframeworks.ofMesh_sphere(radius, res, mode)
ofMesh_sphere = _openframeworks.ofMesh_sphere

def ofMesh_icosahedron(radius):
    return _openframeworks.ofMesh_icosahedron(radius)
ofMesh_icosahedron = _openframeworks.ofMesh_icosahedron

def ofMesh_icosphere(radius, iterations=2):
    return _openframeworks.ofMesh_icosphere(radius, iterations)
ofMesh_icosphere = _openframeworks.ofMesh_icosphere

def ofMesh_cylinder(radius, height, radiusSegments=12, heightSegments=6, numCapSegments=2, bCapped=True, mode=OF_PRIMITIVE_TRIANGLE_STRIP):
    return _openframeworks.ofMesh_cylinder(radius, height, radiusSegments, heightSegments, numCapSegments, bCapped, mode)
ofMesh_cylinder = _openframeworks.ofMesh_cylinder

def ofMesh_cone(radius, height, radiusSegments=12, heightSegments=6, capSegments=2, mode=OF_PRIMITIVE_TRIANGLE_STRIP):
    return _openframeworks.ofMesh_cone(radius, height, radiusSegments, heightSegments, capSegments, mode)
ofMesh_cone = _openframeworks.ofMesh_cone

def ofMesh_box(width, height, depth, resX=2, resY=2, resZ=2):
    return _openframeworks.ofMesh_box(width, height, depth, resX, resY, resZ)
ofMesh_box = _openframeworks.ofMesh_box

def ofMesh_axis(size=1.0):
    return _openframeworks.ofMesh_axis(size)
ofMesh_axis = _openframeworks.ofMesh_axis

class ofMeshFace(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _openframeworks.ofMeshFace_swiginit(self, _openframeworks.new_ofMeshFace())
    __swig_destroy__ = _openframeworks.delete_ofMeshFace
ofMeshFace.getFaceNormal = new_instancemethod(_openframeworks.ofMeshFace_getFaceNormal, None, ofMeshFace)
ofMeshFace.setVertex = new_instancemethod(_openframeworks.ofMeshFace_setVertex, None, ofMeshFace)
ofMeshFace.getVertex = new_instancemethod(_openframeworks.ofMeshFace_getVertex, None, ofMeshFace)
ofMeshFace.setNormal = new_instancemethod(_openframeworks.ofMeshFace_setNormal, None, ofMeshFace)
ofMeshFace.getNormal = new_instancemethod(_openframeworks.ofMeshFace_getNormal, None, ofMeshFace)
ofMeshFace.setColor = new_instancemethod(_openframeworks.ofMeshFace_setColor, None, ofMeshFace)
ofMeshFace.getColor = new_instancemethod(_openframeworks.ofMeshFace_getColor, None, ofMeshFace)
ofMeshFace.setTexCoord = new_instancemethod(_openframeworks.ofMeshFace_setTexCoord, None, ofMeshFace)
ofMeshFace.getTexCoord = new_instancemethod(_openframeworks.ofMeshFace_getTexCoord, None, ofMeshFace)
ofMeshFace.setHasColors = new_instancemethod(_openframeworks.ofMeshFace_setHasColors, None, ofMeshFace)
ofMeshFace.setHasNormals = new_instancemethod(_openframeworks.ofMeshFace_setHasNormals, None, ofMeshFace)
ofMeshFace.setHasTexcoords = new_instancemethod(_openframeworks.ofMeshFace_setHasTexcoords, None, ofMeshFace)
ofMeshFace.hasColors = new_instancemethod(_openframeworks.ofMeshFace_hasColors, None, ofMeshFace)
ofMeshFace.hasNormals = new_instancemethod(_openframeworks.ofMeshFace_hasNormals, None, ofMeshFace)
ofMeshFace.hasTexcoords = new_instancemethod(_openframeworks.ofMeshFace_hasTexcoords, None, ofMeshFace)
ofMeshFace_swigregister = _openframeworks.ofMeshFace_swigregister
ofMeshFace_swigregister(ofMeshFace)

class of3dPrimitive(ofNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_of3dPrimitive

    def __init__(self, *args):
        _openframeworks.of3dPrimitive_swiginit(self, _openframeworks.new_of3dPrimitive(*args))
of3dPrimitive.mapTexCoords = new_instancemethod(_openframeworks.of3dPrimitive_mapTexCoords, None, of3dPrimitive)
of3dPrimitive.mapTexCoordsFromTexture = new_instancemethod(_openframeworks.of3dPrimitive_mapTexCoordsFromTexture, None, of3dPrimitive)
of3dPrimitive.getMeshPtr = new_instancemethod(_openframeworks.of3dPrimitive_getMeshPtr, None, of3dPrimitive)
of3dPrimitive.getMesh = new_instancemethod(_openframeworks.of3dPrimitive_getMesh, None, of3dPrimitive)
of3dPrimitive.getTexCoordsPtr = new_instancemethod(_openframeworks.of3dPrimitive_getTexCoordsPtr, None, of3dPrimitive)
of3dPrimitive.getTexCoords = new_instancemethod(_openframeworks.of3dPrimitive_getTexCoords, None, of3dPrimitive)
of3dPrimitive.hasScaling = new_instancemethod(_openframeworks.of3dPrimitive_hasScaling, None, of3dPrimitive)
of3dPrimitive.hasNormalsEnabled = new_instancemethod(_openframeworks.of3dPrimitive_hasNormalsEnabled, None, of3dPrimitive)
of3dPrimitive.enableNormals = new_instancemethod(_openframeworks.of3dPrimitive_enableNormals, None, of3dPrimitive)
of3dPrimitive.enableTextures = new_instancemethod(_openframeworks.of3dPrimitive_enableTextures, None, of3dPrimitive)
of3dPrimitive.enableColors = new_instancemethod(_openframeworks.of3dPrimitive_enableColors, None, of3dPrimitive)
of3dPrimitive.disableNormals = new_instancemethod(_openframeworks.of3dPrimitive_disableNormals, None, of3dPrimitive)
of3dPrimitive.disableTextures = new_instancemethod(_openframeworks.of3dPrimitive_disableTextures, None, of3dPrimitive)
of3dPrimitive.disableColors = new_instancemethod(_openframeworks.of3dPrimitive_disableColors, None, of3dPrimitive)
of3dPrimitive.drawVertices = new_instancemethod(_openframeworks.of3dPrimitive_drawVertices, None, of3dPrimitive)
of3dPrimitive.drawWireframe = new_instancemethod(_openframeworks.of3dPrimitive_drawWireframe, None, of3dPrimitive)
of3dPrimitive.drawFaces = new_instancemethod(_openframeworks.of3dPrimitive_drawFaces, None, of3dPrimitive)
of3dPrimitive.drawNormals = new_instancemethod(_openframeworks.of3dPrimitive_drawNormals, None, of3dPrimitive)
of3dPrimitive.drawAxes = new_instancemethod(_openframeworks.of3dPrimitive_drawAxes, None, of3dPrimitive)
of3dPrimitive.setUseVbo = new_instancemethod(_openframeworks.of3dPrimitive_setUseVbo, None, of3dPrimitive)
of3dPrimitive.isUsingVbo = new_instancemethod(_openframeworks.of3dPrimitive_isUsingVbo, None, of3dPrimitive)
of3dPrimitive_swigregister = _openframeworks.of3dPrimitive_swigregister
of3dPrimitive_swigregister(of3dPrimitive)

class ofPlanePrimitive(of3dPrimitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openframeworks.ofPlanePrimitive_swiginit(self, _openframeworks.new_ofPlanePrimitive(*args))
    __swig_destroy__ = _openframeworks.delete_ofPlanePrimitive
ofPlanePrimitive.set = new_instancemethod(_openframeworks.ofPlanePrimitive_set, None, ofPlanePrimitive)
ofPlanePrimitive.resizeToTexture = new_instancemethod(_openframeworks.ofPlanePrimitive_resizeToTexture, None, ofPlanePrimitive)
ofPlanePrimitive.setWidth = new_instancemethod(_openframeworks.ofPlanePrimitive_setWidth, None, ofPlanePrimitive)
ofPlanePrimitive.setHeight = new_instancemethod(_openframeworks.ofPlanePrimitive_setHeight, None, ofPlanePrimitive)
ofPlanePrimitive.setColumns = new_instancemethod(_openframeworks.ofPlanePrimitive_setColumns, None, ofPlanePrimitive)
ofPlanePrimitive.setRows = new_instancemethod(_openframeworks.ofPlanePrimitive_setRows, None, ofPlanePrimitive)
ofPlanePrimitive.setResolution = new_instancemethod(_openframeworks.ofPlanePrimitive_setResolution, None, ofPlanePrimitive)
ofPlanePrimitive.setMode = new_instancemethod(_openframeworks.ofPlanePrimitive_setMode, None, ofPlanePrimitive)
ofPlanePrimitive.getNumColumns = new_instancemethod(_openframeworks.ofPlanePrimitive_getNumColumns, None, ofPlanePrimitive)
ofPlanePrimitive.getNumRows = new_instancemethod(_openframeworks.ofPlanePrimitive_getNumRows, None, ofPlanePrimitive)
ofPlanePrimitive.getResolution = new_instancemethod(_openframeworks.ofPlanePrimitive_getResolution, None, ofPlanePrimitive)
ofPlanePrimitive.getWidth = new_instancemethod(_openframeworks.ofPlanePrimitive_getWidth, None, ofPlanePrimitive)
ofPlanePrimitive.getHeight = new_instancemethod(_openframeworks.ofPlanePrimitive_getHeight, None, ofPlanePrimitive)
ofPlanePrimitive_swigregister = _openframeworks.ofPlanePrimitive_swigregister
ofPlanePrimitive_swigregister(ofPlanePrimitive)

class ofSpherePrimitive(of3dPrimitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openframeworks.ofSpherePrimitive_swiginit(self, _openframeworks.new_ofSpherePrimitive(*args))
    __swig_destroy__ = _openframeworks.delete_ofSpherePrimitive
ofSpherePrimitive.set = new_instancemethod(_openframeworks.ofSpherePrimitive_set, None, ofSpherePrimitive)
ofSpherePrimitive.setResolution = new_instancemethod(_openframeworks.ofSpherePrimitive_setResolution, None, ofSpherePrimitive)
ofSpherePrimitive.setRadius = new_instancemethod(_openframeworks.ofSpherePrimitive_setRadius, None, ofSpherePrimitive)
ofSpherePrimitive.setMode = new_instancemethod(_openframeworks.ofSpherePrimitive_setMode, None, ofSpherePrimitive)
ofSpherePrimitive.getRadius = new_instancemethod(_openframeworks.ofSpherePrimitive_getRadius, None, ofSpherePrimitive)
ofSpherePrimitive.getResolution = new_instancemethod(_openframeworks.ofSpherePrimitive_getResolution, None, ofSpherePrimitive)
ofSpherePrimitive_swigregister = _openframeworks.ofSpherePrimitive_swigregister
ofSpherePrimitive_swigregister(ofSpherePrimitive)

class ofIcoSpherePrimitive(of3dPrimitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openframeworks.ofIcoSpherePrimitive_swiginit(self, _openframeworks.new_ofIcoSpherePrimitive(*args))
    __swig_destroy__ = _openframeworks.delete_ofIcoSpherePrimitive
ofIcoSpherePrimitive.set = new_instancemethod(_openframeworks.ofIcoSpherePrimitive_set, None, ofIcoSpherePrimitive)
ofIcoSpherePrimitive.setResolution = new_instancemethod(_openframeworks.ofIcoSpherePrimitive_setResolution, None, ofIcoSpherePrimitive)
ofIcoSpherePrimitive.setRadius = new_instancemethod(_openframeworks.ofIcoSpherePrimitive_setRadius, None, ofIcoSpherePrimitive)
ofIcoSpherePrimitive.setMode = new_instancemethod(_openframeworks.ofIcoSpherePrimitive_setMode, None, ofIcoSpherePrimitive)
ofIcoSpherePrimitive.getRadius = new_instancemethod(_openframeworks.ofIcoSpherePrimitive_getRadius, None, ofIcoSpherePrimitive)
ofIcoSpherePrimitive.getResolution = new_instancemethod(_openframeworks.ofIcoSpherePrimitive_getResolution, None, ofIcoSpherePrimitive)
ofIcoSpherePrimitive_swigregister = _openframeworks.ofIcoSpherePrimitive_swigregister
ofIcoSpherePrimitive_swigregister(ofIcoSpherePrimitive)

class ofCylinderPrimitive(of3dPrimitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openframeworks.ofCylinderPrimitive_swiginit(self, _openframeworks.new_ofCylinderPrimitive(*args))
    __swig_destroy__ = _openframeworks.delete_ofCylinderPrimitive
ofCylinderPrimitive.set = new_instancemethod(_openframeworks.ofCylinderPrimitive_set, None, ofCylinderPrimitive)
ofCylinderPrimitive.setRadius = new_instancemethod(_openframeworks.ofCylinderPrimitive_setRadius, None, ofCylinderPrimitive)
ofCylinderPrimitive.setHeight = new_instancemethod(_openframeworks.ofCylinderPrimitive_setHeight, None, ofCylinderPrimitive)
ofCylinderPrimitive.setCapped = new_instancemethod(_openframeworks.ofCylinderPrimitive_setCapped, None, ofCylinderPrimitive)
ofCylinderPrimitive.setResolutionRadius = new_instancemethod(_openframeworks.ofCylinderPrimitive_setResolutionRadius, None, ofCylinderPrimitive)
ofCylinderPrimitive.setResolutionHeight = new_instancemethod(_openframeworks.ofCylinderPrimitive_setResolutionHeight, None, ofCylinderPrimitive)
ofCylinderPrimitive.setResolutionCap = new_instancemethod(_openframeworks.ofCylinderPrimitive_setResolutionCap, None, ofCylinderPrimitive)
ofCylinderPrimitive.setResolution = new_instancemethod(_openframeworks.ofCylinderPrimitive_setResolution, None, ofCylinderPrimitive)
ofCylinderPrimitive.setMode = new_instancemethod(_openframeworks.ofCylinderPrimitive_setMode, None, ofCylinderPrimitive)
ofCylinderPrimitive.setTopCapColor = new_instancemethod(_openframeworks.ofCylinderPrimitive_setTopCapColor, None, ofCylinderPrimitive)
ofCylinderPrimitive.setCylinderColor = new_instancemethod(_openframeworks.ofCylinderPrimitive_setCylinderColor, None, ofCylinderPrimitive)
ofCylinderPrimitive.setBottomCapColor = new_instancemethod(_openframeworks.ofCylinderPrimitive_setBottomCapColor, None, ofCylinderPrimitive)
ofCylinderPrimitive.getTopCapIndices = new_instancemethod(_openframeworks.ofCylinderPrimitive_getTopCapIndices, None, ofCylinderPrimitive)
ofCylinderPrimitive.getTopCapMesh = new_instancemethod(_openframeworks.ofCylinderPrimitive_getTopCapMesh, None, ofCylinderPrimitive)
ofCylinderPrimitive.getCylinderIndices = new_instancemethod(_openframeworks.ofCylinderPrimitive_getCylinderIndices, None, ofCylinderPrimitive)
ofCylinderPrimitive.getCylinderMesh = new_instancemethod(_openframeworks.ofCylinderPrimitive_getCylinderMesh, None, ofCylinderPrimitive)
ofCylinderPrimitive.getBottomCapIndices = new_instancemethod(_openframeworks.ofCylinderPrimitive_getBottomCapIndices, None, ofCylinderPrimitive)
ofCylinderPrimitive.getBottomCapMesh = new_instancemethod(_openframeworks.ofCylinderPrimitive_getBottomCapMesh, None, ofCylinderPrimitive)
ofCylinderPrimitive.getResolutionRadius = new_instancemethod(_openframeworks.ofCylinderPrimitive_getResolutionRadius, None, ofCylinderPrimitive)
ofCylinderPrimitive.getResolutionHeight = new_instancemethod(_openframeworks.ofCylinderPrimitive_getResolutionHeight, None, ofCylinderPrimitive)
ofCylinderPrimitive.getResolutionCap = new_instancemethod(_openframeworks.ofCylinderPrimitive_getResolutionCap, None, ofCylinderPrimitive)
ofCylinderPrimitive.getResolution = new_instancemethod(_openframeworks.ofCylinderPrimitive_getResolution, None, ofCylinderPrimitive)
ofCylinderPrimitive.getHeight = new_instancemethod(_openframeworks.ofCylinderPrimitive_getHeight, None, ofCylinderPrimitive)
ofCylinderPrimitive.getRadius = new_instancemethod(_openframeworks.ofCylinderPrimitive_getRadius, None, ofCylinderPrimitive)
ofCylinderPrimitive.getCapped = new_instancemethod(_openframeworks.ofCylinderPrimitive_getCapped, None, ofCylinderPrimitive)
ofCylinderPrimitive_swigregister = _openframeworks.ofCylinderPrimitive_swigregister
ofCylinderPrimitive_swigregister(ofCylinderPrimitive)

class ofConePrimitive(of3dPrimitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openframeworks.ofConePrimitive_swiginit(self, _openframeworks.new_ofConePrimitive(*args))
    __swig_destroy__ = _openframeworks.delete_ofConePrimitive
ofConePrimitive.set = new_instancemethod(_openframeworks.ofConePrimitive_set, None, ofConePrimitive)
ofConePrimitive.setResolutionRadius = new_instancemethod(_openframeworks.ofConePrimitive_setResolutionRadius, None, ofConePrimitive)
ofConePrimitive.setResolutionHeight = new_instancemethod(_openframeworks.ofConePrimitive_setResolutionHeight, None, ofConePrimitive)
ofConePrimitive.setResolutionCap = new_instancemethod(_openframeworks.ofConePrimitive_setResolutionCap, None, ofConePrimitive)
ofConePrimitive.setResolution = new_instancemethod(_openframeworks.ofConePrimitive_setResolution, None, ofConePrimitive)
ofConePrimitive.setMode = new_instancemethod(_openframeworks.ofConePrimitive_setMode, None, ofConePrimitive)
ofConePrimitive.setRadius = new_instancemethod(_openframeworks.ofConePrimitive_setRadius, None, ofConePrimitive)
ofConePrimitive.setHeight = new_instancemethod(_openframeworks.ofConePrimitive_setHeight, None, ofConePrimitive)
ofConePrimitive.setTopColor = new_instancemethod(_openframeworks.ofConePrimitive_setTopColor, None, ofConePrimitive)
ofConePrimitive.setCapColor = new_instancemethod(_openframeworks.ofConePrimitive_setCapColor, None, ofConePrimitive)
ofConePrimitive.getConeIndices = new_instancemethod(_openframeworks.ofConePrimitive_getConeIndices, None, ofConePrimitive)
ofConePrimitive.getConeMesh = new_instancemethod(_openframeworks.ofConePrimitive_getConeMesh, None, ofConePrimitive)
ofConePrimitive.getCapIndices = new_instancemethod(_openframeworks.ofConePrimitive_getCapIndices, None, ofConePrimitive)
ofConePrimitive.getCapMesh = new_instancemethod(_openframeworks.ofConePrimitive_getCapMesh, None, ofConePrimitive)
ofConePrimitive.getResolutionRadius = new_instancemethod(_openframeworks.ofConePrimitive_getResolutionRadius, None, ofConePrimitive)
ofConePrimitive.getResolutionHeight = new_instancemethod(_openframeworks.ofConePrimitive_getResolutionHeight, None, ofConePrimitive)
ofConePrimitive.getResolutionCap = new_instancemethod(_openframeworks.ofConePrimitive_getResolutionCap, None, ofConePrimitive)
ofConePrimitive.getResolution = new_instancemethod(_openframeworks.ofConePrimitive_getResolution, None, ofConePrimitive)
ofConePrimitive.getRadius = new_instancemethod(_openframeworks.ofConePrimitive_getRadius, None, ofConePrimitive)
ofConePrimitive.getHeight = new_instancemethod(_openframeworks.ofConePrimitive_getHeight, None, ofConePrimitive)
ofConePrimitive_swigregister = _openframeworks.ofConePrimitive_swigregister
ofConePrimitive_swigregister(ofConePrimitive)

class ofBoxPrimitive(of3dPrimitive):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    SIDE_FRONT = _openframeworks.ofBoxPrimitive_SIDE_FRONT
    SIDE_RIGHT = _openframeworks.ofBoxPrimitive_SIDE_RIGHT
    SIDE_LEFT = _openframeworks.ofBoxPrimitive_SIDE_LEFT
    SIDE_BACK = _openframeworks.ofBoxPrimitive_SIDE_BACK
    SIDE_TOP = _openframeworks.ofBoxPrimitive_SIDE_TOP
    SIDE_BOTTOM = _openframeworks.ofBoxPrimitive_SIDE_BOTTOM
    SIDES_TOTAL = _openframeworks.ofBoxPrimitive_SIDES_TOTAL

    def __init__(self, *args):
        _openframeworks.ofBoxPrimitive_swiginit(self, _openframeworks.new_ofBoxPrimitive(*args))
    __swig_destroy__ = _openframeworks.delete_ofBoxPrimitive
ofBoxPrimitive.set = new_instancemethod(_openframeworks.ofBoxPrimitive_set, None, ofBoxPrimitive)
ofBoxPrimitive.setWidth = new_instancemethod(_openframeworks.ofBoxPrimitive_setWidth, None, ofBoxPrimitive)
ofBoxPrimitive.setHeight = new_instancemethod(_openframeworks.ofBoxPrimitive_setHeight, None, ofBoxPrimitive)
ofBoxPrimitive.setDepth = new_instancemethod(_openframeworks.ofBoxPrimitive_setDepth, None, ofBoxPrimitive)
ofBoxPrimitive.resizeToTexture = new_instancemethod(_openframeworks.ofBoxPrimitive_resizeToTexture, None, ofBoxPrimitive)
ofBoxPrimitive.getSideIndices = new_instancemethod(_openframeworks.ofBoxPrimitive_getSideIndices, None, ofBoxPrimitive)
ofBoxPrimitive.getSideMesh = new_instancemethod(_openframeworks.ofBoxPrimitive_getSideMesh, None, ofBoxPrimitive)
ofBoxPrimitive.setResolutionWidth = new_instancemethod(_openframeworks.ofBoxPrimitive_setResolutionWidth, None, ofBoxPrimitive)
ofBoxPrimitive.setResolutionHeight = new_instancemethod(_openframeworks.ofBoxPrimitive_setResolutionHeight, None, ofBoxPrimitive)
ofBoxPrimitive.setResolutionDepth = new_instancemethod(_openframeworks.ofBoxPrimitive_setResolutionDepth, None, ofBoxPrimitive)
ofBoxPrimitive.setResolution = new_instancemethod(_openframeworks.ofBoxPrimitive_setResolution, None, ofBoxPrimitive)
ofBoxPrimitive.setMode = new_instancemethod(_openframeworks.ofBoxPrimitive_setMode, None, ofBoxPrimitive)
ofBoxPrimitive.setSideColor = new_instancemethod(_openframeworks.ofBoxPrimitive_setSideColor, None, ofBoxPrimitive)
ofBoxPrimitive.getResolutionWidth = new_instancemethod(_openframeworks.ofBoxPrimitive_getResolutionWidth, None, ofBoxPrimitive)
ofBoxPrimitive.getResolutionHeight = new_instancemethod(_openframeworks.ofBoxPrimitive_getResolutionHeight, None, ofBoxPrimitive)
ofBoxPrimitive.getResolutionDepth = new_instancemethod(_openframeworks.ofBoxPrimitive_getResolutionDepth, None, ofBoxPrimitive)
ofBoxPrimitive.getResolution = new_instancemethod(_openframeworks.ofBoxPrimitive_getResolution, None, ofBoxPrimitive)
ofBoxPrimitive.getWidth = new_instancemethod(_openframeworks.ofBoxPrimitive_getWidth, None, ofBoxPrimitive)
ofBoxPrimitive.getHeight = new_instancemethod(_openframeworks.ofBoxPrimitive_getHeight, None, ofBoxPrimitive)
ofBoxPrimitive.getDepth = new_instancemethod(_openframeworks.ofBoxPrimitive_getDepth, None, ofBoxPrimitive)
ofBoxPrimitive.getSize = new_instancemethod(_openframeworks.ofBoxPrimitive_getSize, None, ofBoxPrimitive)
ofBoxPrimitive_swigregister = _openframeworks.ofBoxPrimitive_swigregister
ofBoxPrimitive_swigregister(ofBoxPrimitive)


def ofExit(status=0):
    return _openframeworks.ofExit(status)
ofExit = _openframeworks.ofExit

def ofGetFrameRate():
    return _openframeworks.ofGetFrameRate()
ofGetFrameRate = _openframeworks.ofGetFrameRate

def ofGetTargetFrameRate():
    return _openframeworks.ofGetTargetFrameRate()
ofGetTargetFrameRate = _openframeworks.ofGetTargetFrameRate

def ofSetFrameRate(targetRate):
    return _openframeworks.ofSetFrameRate(targetRate)
ofSetFrameRate = _openframeworks.ofSetFrameRate

def ofGetLastFrameTime():
    return _openframeworks.ofGetLastFrameTime()
ofGetLastFrameTime = _openframeworks.ofGetLastFrameTime

def ofSetTimeModeSystem():
    return _openframeworks.ofSetTimeModeSystem()
ofSetTimeModeSystem = _openframeworks.ofSetTimeModeSystem

def ofGetFixedStepForFps(fps):
    return _openframeworks.ofGetFixedStepForFps(fps)
ofGetFixedStepForFps = _openframeworks.ofGetFixedStepForFps

def ofSetTimeModeFixedRate(*args):
    return _openframeworks.ofSetTimeModeFixedRate(*args)
ofSetTimeModeFixedRate = _openframeworks.ofSetTimeModeFixedRate

def ofSetTimeModeFiltered(alpha=0.9):
    return _openframeworks.ofSetTimeModeFiltered(alpha)
ofSetTimeModeFiltered = _openframeworks.ofSetTimeModeFiltered

def ofSetOrientation(orientation, vFlip=True):
    return _openframeworks.ofSetOrientation(orientation, vFlip)
ofSetOrientation = _openframeworks.ofSetOrientation

def ofGetOrientation():
    return _openframeworks.ofGetOrientation()
ofGetOrientation = _openframeworks.ofGetOrientation

def ofHideCursor():
    return _openframeworks.ofHideCursor()
ofHideCursor = _openframeworks.ofHideCursor

def ofShowCursor():
    return _openframeworks.ofShowCursor()
ofShowCursor = _openframeworks.ofShowCursor

def ofGetWindowPositionX():
    return _openframeworks.ofGetWindowPositionX()
ofGetWindowPositionX = _openframeworks.ofGetWindowPositionX

def ofGetWindowPositionY():
    return _openframeworks.ofGetWindowPositionY()
ofGetWindowPositionY = _openframeworks.ofGetWindowPositionY

def ofGetScreenWidth():
    return _openframeworks.ofGetScreenWidth()
ofGetScreenWidth = _openframeworks.ofGetScreenWidth

def ofGetScreenHeight():
    return _openframeworks.ofGetScreenHeight()
ofGetScreenHeight = _openframeworks.ofGetScreenHeight

def ofGetWindowMode():
    return _openframeworks.ofGetWindowMode()
ofGetWindowMode = _openframeworks.ofGetWindowMode

def ofGetWidth():
    return _openframeworks.ofGetWidth()
ofGetWidth = _openframeworks.ofGetWidth

def ofGetHeight():
    return _openframeworks.ofGetHeight()
ofGetHeight = _openframeworks.ofGetHeight

def ofGetWindowWidth():
    return _openframeworks.ofGetWindowWidth()
ofGetWindowWidth = _openframeworks.ofGetWindowWidth

def ofGetWindowHeight():
    return _openframeworks.ofGetWindowHeight()
ofGetWindowHeight = _openframeworks.ofGetWindowHeight

def ofGetClipboardString():
    return _openframeworks.ofGetClipboardString()
ofGetClipboardString = _openframeworks.ofGetClipboardString

def ofSetClipboardString(str):
    return _openframeworks.ofSetClipboardString(str)
ofSetClipboardString = _openframeworks.ofSetClipboardString

def ofRandomWidth():
    return _openframeworks.ofRandomWidth()
ofRandomWidth = _openframeworks.ofRandomWidth

def ofRandomHeight():
    return _openframeworks.ofRandomHeight()
ofRandomHeight = _openframeworks.ofRandomHeight

def ofDoesHWOrientation():
    return _openframeworks.ofDoesHWOrientation()
ofDoesHWOrientation = _openframeworks.ofDoesHWOrientation

def ofGetWindowSize():
    return _openframeworks.ofGetWindowSize()
ofGetWindowSize = _openframeworks.ofGetWindowSize

def ofGetWindowRect():
    return _openframeworks.ofGetWindowRect()
ofGetWindowRect = _openframeworks.ofGetWindowRect

def ofSetWindowPosition(x, y):
    return _openframeworks.ofSetWindowPosition(x, y)
ofSetWindowPosition = _openframeworks.ofSetWindowPosition

def ofSetWindowShape(width, height):
    return _openframeworks.ofSetWindowShape(width, height)
ofSetWindowShape = _openframeworks.ofSetWindowShape

def ofSetWindowTitle(title):
    return _openframeworks.ofSetWindowTitle(title)
ofSetWindowTitle = _openframeworks.ofSetWindowTitle

def ofEnableSetupScreen():
    return _openframeworks.ofEnableSetupScreen()
ofEnableSetupScreen = _openframeworks.ofEnableSetupScreen

def ofDisableSetupScreen():
    return _openframeworks.ofDisableSetupScreen()
ofDisableSetupScreen = _openframeworks.ofDisableSetupScreen

def ofSetFullscreen(fullscreen):
    return _openframeworks.ofSetFullscreen(fullscreen)
ofSetFullscreen = _openframeworks.ofSetFullscreen

def ofToggleFullscreen():
    return _openframeworks.ofToggleFullscreen()
ofToggleFullscreen = _openframeworks.ofToggleFullscreen

def ofSetVerticalSync(bSync):
    return _openframeworks.ofSetVerticalSync(bSync)
ofSetVerticalSync = _openframeworks.ofSetVerticalSync

def ofEvents():
    return _openframeworks.ofEvents()
ofEvents = _openframeworks.ofEvents

def ofSetEscapeQuitsApp(bQuitOnEsc):
    return _openframeworks.ofSetEscapeQuitsApp(bQuitOnEsc)
ofSetEscapeQuitsApp = _openframeworks.ofSetEscapeQuitsApp
FIRMATA_MAJOR_VERSION = _openframeworks.FIRMATA_MAJOR_VERSION
FIRMATA_MINOR_VERSION = _openframeworks.FIRMATA_MINOR_VERSION
FIRMATA_BUGFIX_VERSION = _openframeworks.FIRMATA_BUGFIX_VERSION
FIRMATA_MAX_DATA_BYTES = _openframeworks.FIRMATA_MAX_DATA_BYTES
DIGITAL_MESSAGE = _openframeworks.DIGITAL_MESSAGE
ANALOG_MESSAGE = _openframeworks.ANALOG_MESSAGE
REPORT_ANALOG = _openframeworks.REPORT_ANALOG
REPORT_DIGITAL = _openframeworks.REPORT_DIGITAL
SET_PIN_MODE = _openframeworks.SET_PIN_MODE
SET_DIGITAL_PIN_VALUE = _openframeworks.SET_DIGITAL_PIN_VALUE
REPORT_VERSION = _openframeworks.REPORT_VERSION
SYSTEM_RESET = _openframeworks.SYSTEM_RESET
START_SYSEX = _openframeworks.START_SYSEX
END_SYSEX = _openframeworks.END_SYSEX
SERIAL_MESSAGE = _openframeworks.SERIAL_MESSAGE
ENCODER_DATA = _openframeworks.ENCODER_DATA
SERVO_CONFIG = _openframeworks.SERVO_CONFIG
STRING_DATA = _openframeworks.STRING_DATA
STEPPER_DATA = _openframeworks.STEPPER_DATA
ONEWIRE_DATA = _openframeworks.ONEWIRE_DATA
SHIFT_DATA = _openframeworks.SHIFT_DATA
I2C_REQUEST = _openframeworks.I2C_REQUEST
I2C_REPLY = _openframeworks.I2C_REPLY
I2C_CONFIG = _openframeworks.I2C_CONFIG
EXTENDED_ANALOG = _openframeworks.EXTENDED_ANALOG
PIN_STATE_QUERY = _openframeworks.PIN_STATE_QUERY
PIN_STATE_RESPONSE = _openframeworks.PIN_STATE_RESPONSE
CAPABILITY_QUERY = _openframeworks.CAPABILITY_QUERY
CAPABILITY_RESPONSE = _openframeworks.CAPABILITY_RESPONSE
ANALOG_MAPPING_QUERY = _openframeworks.ANALOG_MAPPING_QUERY
ANALOG_MAPPING_RESPONSE = _openframeworks.ANALOG_MAPPING_RESPONSE
REPORT_FIRMWARE = _openframeworks.REPORT_FIRMWARE
SAMPLING_INTERVAL = _openframeworks.SAMPLING_INTERVAL
SCHEDULER_DATA = _openframeworks.SCHEDULER_DATA
SYSEX_NON_REALTIME = _openframeworks.SYSEX_NON_REALTIME
SYSEX_REALTIME = _openframeworks.SYSEX_REALTIME
ARD_INPUT = _openframeworks.ARD_INPUT
ARD_OUTPUT = _openframeworks.ARD_OUTPUT
ARD_ANALOG = _openframeworks.ARD_ANALOG
ARD_PWM = _openframeworks.ARD_PWM
ARD_SERVO = _openframeworks.ARD_SERVO
ARD_SHIFT = _openframeworks.ARD_SHIFT
ARD_I2C = _openframeworks.ARD_I2C
ARD_ONEWIRE = _openframeworks.ARD_ONEWIRE
ARD_STEPPER = _openframeworks.ARD_STEPPER
ARD_ENCODER = _openframeworks.ARD_ENCODER
ARD_SERIAL = _openframeworks.ARD_SERIAL
ARD_INPUT_PULLUP = _openframeworks.ARD_INPUT_PULLUP
ARD_IGNORE = _openframeworks.ARD_IGNORE
TOTAL_PIN_MODES = _openframeworks.TOTAL_PIN_MODES
MAX_STEPPERS = _openframeworks.MAX_STEPPERS
STEPPER_CONFIG = _openframeworks.STEPPER_CONFIG
STEPPER_STEP = _openframeworks.STEPPER_STEP
ONEWIRE_SEARCH_REQUEST = _openframeworks.ONEWIRE_SEARCH_REQUEST
ONEWIRE_CONFIG_REQUEST = _openframeworks.ONEWIRE_CONFIG_REQUEST
ONEWIRE_SEARCH_REPLY = _openframeworks.ONEWIRE_SEARCH_REPLY
ONEWIRE_READ_REPLY = _openframeworks.ONEWIRE_READ_REPLY
ONEWIRE_SEARCH_ALARMS_REQUEST = _openframeworks.ONEWIRE_SEARCH_ALARMS_REQUEST
ONEWIRE_SEARCH_ALARMS_REPLY = _openframeworks.ONEWIRE_SEARCH_ALARMS_REPLY
ONEWIRE_RESET_REQUEST_BIT = _openframeworks.ONEWIRE_RESET_REQUEST_BIT
ONEWIRE_SKIP_REQUEST_BIT = _openframeworks.ONEWIRE_SKIP_REQUEST_BIT
ONEWIRE_SELECT_REQUEST_BIT = _openframeworks.ONEWIRE_SELECT_REQUEST_BIT
ONEWIRE_READ_REQUEST_BIT = _openframeworks.ONEWIRE_READ_REQUEST_BIT
ONEWIRE_DELAY_REQUEST_BIT = _openframeworks.ONEWIRE_DELAY_REQUEST_BIT
ONEWIRE_WRITE_REQUEST_BIT = _openframeworks.ONEWIRE_WRITE_REQUEST_BIT
ONEWIRE_WITHDATA_REQUEST_BITS = _openframeworks.ONEWIRE_WITHDATA_REQUEST_BITS
ONEWIRE_POWER = _openframeworks.ONEWIRE_POWER
I2C_STOP_TX = _openframeworks.I2C_STOP_TX
I2C_RESTART_TX = _openframeworks.I2C_RESTART_TX
I2C_MAX_QUERIES = _openframeworks.I2C_MAX_QUERIES
I2C_REGISTER_NOT_SPECIFIED = _openframeworks.I2C_REGISTER_NOT_SPECIFIED
MAX_ENCODERS = _openframeworks.MAX_ENCODERS
ENCODER_ATTACH = _openframeworks.ENCODER_ATTACH
ENCODER_REPORT_POSITION = _openframeworks.ENCODER_REPORT_POSITION
ENCODER_REPORT_POSITIONS = _openframeworks.ENCODER_REPORT_POSITIONS
ENCODER_RESET_POSITION = _openframeworks.ENCODER_RESET_POSITION
ENCODER_REPORT_AUTO = _openframeworks.ENCODER_REPORT_AUTO
ENCODER_DETACH = _openframeworks.ENCODER_DETACH
ENCODER_DIRECTION_MASK = _openframeworks.ENCODER_DIRECTION_MASK
ENCODER_CHANNEL_MASK = _openframeworks.ENCODER_CHANNEL_MASK
SERIAL_CONFIG = _openframeworks.SERIAL_CONFIG
SERIAL_WRITE = _openframeworks.SERIAL_WRITE
SERIAL_READ = _openframeworks.SERIAL_READ
SERIAL_REPLY = _openframeworks.SERIAL_REPLY
SERIAL_CLOSE = _openframeworks.SERIAL_CLOSE
SERIAL_FLUSH = _openframeworks.SERIAL_FLUSH
SERIAL_LISTEN = _openframeworks.SERIAL_LISTEN
ARD_TOTAL_PORTS = _openframeworks.ARD_TOTAL_PORTS
ARD_HIGH = _openframeworks.ARD_HIGH
ARD_LOW = _openframeworks.ARD_LOW
ARD_ON = _openframeworks.ARD_ON
ARD_OFF = _openframeworks.ARD_OFF
OF_ARDUINO_DELAY_LENGTH = _openframeworks.OF_ARDUINO_DELAY_LENGTH
class supportedPinTypes(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    inputSupported = _swig_property(_openframeworks.supportedPinTypes_inputSupported_get, _openframeworks.supportedPinTypes_inputSupported_set)
    outputSupported = _swig_property(_openframeworks.supportedPinTypes_outputSupported_get, _openframeworks.supportedPinTypes_outputSupported_set)
    analogSupported = _swig_property(_openframeworks.supportedPinTypes_analogSupported_get, _openframeworks.supportedPinTypes_analogSupported_set)
    pwmSupported = _swig_property(_openframeworks.supportedPinTypes_pwmSupported_get, _openframeworks.supportedPinTypes_pwmSupported_set)
    servoSupported = _swig_property(_openframeworks.supportedPinTypes_servoSupported_get, _openframeworks.supportedPinTypes_servoSupported_set)
    i2cSupported = _swig_property(_openframeworks.supportedPinTypes_i2cSupported_get, _openframeworks.supportedPinTypes_i2cSupported_set)
    serialSupported = _swig_property(_openframeworks.supportedPinTypes_serialSupported_get, _openframeworks.supportedPinTypes_serialSupported_set)
    onewireSupported = _swig_property(_openframeworks.supportedPinTypes_onewireSupported_get, _openframeworks.supportedPinTypes_onewireSupported_set)
    stepperSupported = _swig_property(_openframeworks.supportedPinTypes_stepperSupported_get, _openframeworks.supportedPinTypes_stepperSupported_set)
    encoderSupported = _swig_property(_openframeworks.supportedPinTypes_encoderSupported_get, _openframeworks.supportedPinTypes_encoderSupported_set)

    def __init__(self):
        _openframeworks.supportedPinTypes_swiginit(self, _openframeworks.new_supportedPinTypes())
    __swig_destroy__ = _openframeworks.delete_supportedPinTypes
supportedPinTypes_swigregister = _openframeworks.supportedPinTypes_swigregister
supportedPinTypes_swigregister(supportedPinTypes)

MODE_INPUT = _openframeworks.MODE_INPUT
MODE_OUTPUT = _openframeworks.MODE_OUTPUT
MODE_INPUT_PULLUP = _openframeworks.MODE_INPUT_PULLUP
MODE_ANALOG = _openframeworks.MODE_ANALOG
MODE_PWM = _openframeworks.MODE_PWM
MODE_SERVO = _openframeworks.MODE_SERVO
MODE_I2C = _openframeworks.MODE_I2C
MODE_SERIAL = _openframeworks.MODE_SERIAL
MODE_ONEWIRE = _openframeworks.MODE_ONEWIRE
MODE_STEPPER = _openframeworks.MODE_STEPPER
MODE_ENCODER = _openframeworks.MODE_ENCODER
FIRMATA_STEPPER_DRIVER = _openframeworks.FIRMATA_STEPPER_DRIVER
FIRMATA_STEPPER_TWO_WIRE = _openframeworks.FIRMATA_STEPPER_TWO_WIRE
FIRMATA_STEPPER_FOUR_WIRE = _openframeworks.FIRMATA_STEPPER_FOUR_WIRE
FIRMATA_STEPPER_CCW = _openframeworks.FIRMATA_STEPPER_CCW
FIRMATA_STEPPER_CW = _openframeworks.FIRMATA_STEPPER_CW
FIRMATA_I2C_WRITE = _openframeworks.FIRMATA_I2C_WRITE
FIRMATA_I2C_READ = _openframeworks.FIRMATA_I2C_READ
FIRMATA_I2C_CONTINUOUS_READ = _openframeworks.FIRMATA_I2C_CONTINUOUS_READ
FIRMATA_I2C_STOP_READING = _openframeworks.FIRMATA_I2C_STOP_READING
class Firmata_I2C_Data(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    address = _swig_property(_openframeworks.Firmata_I2C_Data_address_get, _openframeworks.Firmata_I2C_Data_address_set)
    reg = _swig_property(_openframeworks.Firmata_I2C_Data_reg_get, _openframeworks.Firmata_I2C_Data_reg_set)
    data = _swig_property(_openframeworks.Firmata_I2C_Data_data_get, _openframeworks.Firmata_I2C_Data_data_set)

    def __init__(self):
        _openframeworks.Firmata_I2C_Data_swiginit(self, _openframeworks.new_Firmata_I2C_Data())
    __swig_destroy__ = _openframeworks.delete_Firmata_I2C_Data
Firmata_I2C_Data_swigregister = _openframeworks.Firmata_I2C_Data_swigregister
Firmata_I2C_Data_swigregister(Firmata_I2C_Data)

class Firmata_Encoder_Data(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ID = _swig_property(_openframeworks.Firmata_Encoder_Data_ID_get, _openframeworks.Firmata_Encoder_Data_ID_set)
    direction = _swig_property(_openframeworks.Firmata_Encoder_Data_direction_get, _openframeworks.Firmata_Encoder_Data_direction_set)
    position = _swig_property(_openframeworks.Firmata_Encoder_Data_position_get, _openframeworks.Firmata_Encoder_Data_position_set)

    def __init__(self):
        _openframeworks.Firmata_Encoder_Data_swiginit(self, _openframeworks.new_Firmata_Encoder_Data())
    __swig_destroy__ = _openframeworks.delete_Firmata_Encoder_Data
Firmata_Encoder_Data_swigregister = _openframeworks.Firmata_Encoder_Data_swigregister
Firmata_Encoder_Data_swigregister(Firmata_Encoder_Data)

class Firmata_Stepper_Data(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    id = _swig_property(_openframeworks.Firmata_Stepper_Data_id_get, _openframeworks.Firmata_Stepper_Data_id_set)
    type = _swig_property(_openframeworks.Firmata_Stepper_Data_type_get, _openframeworks.Firmata_Stepper_Data_type_set)
    data = _swig_property(_openframeworks.Firmata_Stepper_Data_data_get, _openframeworks.Firmata_Stepper_Data_data_set)

    def __init__(self):
        _openframeworks.Firmata_Stepper_Data_swiginit(self, _openframeworks.new_Firmata_Stepper_Data())
    __swig_destroy__ = _openframeworks.delete_Firmata_Stepper_Data
Firmata_Stepper_Data_swigregister = _openframeworks.Firmata_Stepper_Data_swigregister
Firmata_Stepper_Data_swigregister(Firmata_Stepper_Data)

FIRMATA_SERIAL_READ_CONTINUOUS = _openframeworks.FIRMATA_SERIAL_READ_CONTINUOUS
FIRMATA_SERIAL_STOP_READING = _openframeworks.FIRMATA_SERIAL_STOP_READING
HW_SERIAL0 = _openframeworks.HW_SERIAL0
HW_SERIAL1 = _openframeworks.HW_SERIAL1
HW_SERIAL2 = _openframeworks.HW_SERIAL2
HW_SERIAL3 = _openframeworks.HW_SERIAL3
SW_SERIAL0 = _openframeworks.SW_SERIAL0
SW_SERIAL1 = _openframeworks.SW_SERIAL1
SW_SERIAL2 = _openframeworks.SW_SERIAL2
SW_SERIAL3 = _openframeworks.SW_SERIAL3
class Firmata_Serial_Data(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    portID = _swig_property(_openframeworks.Firmata_Serial_Data_portID_get, _openframeworks.Firmata_Serial_Data_portID_set)
    data = _swig_property(_openframeworks.Firmata_Serial_Data_data_get, _openframeworks.Firmata_Serial_Data_data_set)

    def __init__(self):
        _openframeworks.Firmata_Serial_Data_swiginit(self, _openframeworks.new_Firmata_Serial_Data())
    __swig_destroy__ = _openframeworks.delete_Firmata_Serial_Data
Firmata_Serial_Data_swigregister = _openframeworks.Firmata_Serial_Data_swigregister
Firmata_Serial_Data_swigregister(Firmata_Serial_Data)

class ofArduino(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _openframeworks.ofArduino_swiginit(self, _openframeworks.new_ofArduino())
    __swig_destroy__ = _openframeworks.delete_ofArduino
    EDigitalPinChanged = _swig_property(_openframeworks.ofArduino_EDigitalPinChanged_get, _openframeworks.ofArduino_EDigitalPinChanged_set)
    EAnalogPinChanged = _swig_property(_openframeworks.ofArduino_EAnalogPinChanged_get, _openframeworks.ofArduino_EAnalogPinChanged_set)
    ESysExReceived = _swig_property(_openframeworks.ofArduino_ESysExReceived_get, _openframeworks.ofArduino_ESysExReceived_set)
    EFirmwareVersionReceived = _swig_property(_openframeworks.ofArduino_EFirmwareVersionReceived_get, _openframeworks.ofArduino_EFirmwareVersionReceived_set)
    EInitialized = _swig_property(_openframeworks.ofArduino_EInitialized_get, _openframeworks.ofArduino_EInitialized_set)
    EStringReceived = _swig_property(_openframeworks.ofArduino_EStringReceived_get, _openframeworks.ofArduino_EStringReceived_set)
    EStepperDataReceived = _swig_property(_openframeworks.ofArduino_EStepperDataReceived_get, _openframeworks.ofArduino_EStepperDataReceived_set)
    EI2CDataRecieved = _swig_property(_openframeworks.ofArduino_EI2CDataRecieved_get, _openframeworks.ofArduino_EI2CDataRecieved_set)
    EEncoderDataReceived = _swig_property(_openframeworks.ofArduino_EEncoderDataReceived_get, _openframeworks.ofArduino_EEncoderDataReceived_set)
    ESerialDataReceived = _swig_property(_openframeworks.ofArduino_ESerialDataReceived_get, _openframeworks.ofArduino_ESerialDataReceived_set)
    EPinStateResponseReceived = _swig_property(_openframeworks.ofArduino_EPinStateResponseReceived_get, _openframeworks.ofArduino_EPinStateResponseReceived_set)
ofArduino.connect = new_instancemethod(_openframeworks.ofArduino_connect, None, ofArduino)
ofArduino.isInitialized = new_instancemethod(_openframeworks.ofArduino_isInitialized, None, ofArduino)
ofArduino.isArduinoReady = new_instancemethod(_openframeworks.ofArduino_isArduinoReady, None, ofArduino)
ofArduino.disconnect = new_instancemethod(_openframeworks.ofArduino_disconnect, None, ofArduino)
ofArduino.update = new_instancemethod(_openframeworks.ofArduino_update, None, ofArduino)
ofArduino.sendDigitalPinMode = new_instancemethod(_openframeworks.ofArduino_sendDigitalPinMode, None, ofArduino)
ofArduino.sendAnalogPinReporting = new_instancemethod(_openframeworks.ofArduino_sendAnalogPinReporting, None, ofArduino)
ofArduino.setUseDelay = new_instancemethod(_openframeworks.ofArduino_setUseDelay, None, ofArduino)
ofArduino.setDigitalHistoryLength = new_instancemethod(_openframeworks.ofArduino_setDigitalHistoryLength, None, ofArduino)
ofArduino.setAnalogHistoryLength = new_instancemethod(_openframeworks.ofArduino_setAnalogHistoryLength, None, ofArduino)
ofArduino.setStringHistoryLength = new_instancemethod(_openframeworks.ofArduino_setStringHistoryLength, None, ofArduino)
ofArduino.setSysExHistoryLength = new_instancemethod(_openframeworks.ofArduino_setSysExHistoryLength, None, ofArduino)
ofArduino.sendDigital = new_instancemethod(_openframeworks.ofArduino_sendDigital, None, ofArduino)
ofArduino.sendPwm = new_instancemethod(_openframeworks.ofArduino_sendPwm, None, ofArduino)
ofArduino.sendSysEx = new_instancemethod(_openframeworks.ofArduino_sendSysEx, None, ofArduino)
ofArduino.isAttached = new_instancemethod(_openframeworks.ofArduino_isAttached, None, ofArduino)
ofArduino.sendString = new_instancemethod(_openframeworks.ofArduino_sendString, None, ofArduino)
ofArduino.sendProtocolVersionRequest = new_instancemethod(_openframeworks.ofArduino_sendProtocolVersionRequest, None, ofArduino)
ofArduino.sendFirmwareVersionRequest = new_instancemethod(_openframeworks.ofArduino_sendFirmwareVersionRequest, None, ofArduino)
ofArduino.sendPinCofigurationRequest = new_instancemethod(_openframeworks.ofArduino_sendPinCofigurationRequest, None, ofArduino)
ofArduino.sendPinCapabilityRequest = new_instancemethod(_openframeworks.ofArduino_sendPinCapabilityRequest, None, ofArduino)
ofArduino.sendAnalogMappingRequest = new_instancemethod(_openframeworks.ofArduino_sendAnalogMappingRequest, None, ofArduino)
ofArduino.sendPinStateQuery = new_instancemethod(_openframeworks.ofArduino_sendPinStateQuery, None, ofArduino)
ofArduino.sendReset = new_instancemethod(_openframeworks.ofArduino_sendReset, None, ofArduino)
ofArduino.sendSysExBegin = new_instancemethod(_openframeworks.ofArduino_sendSysExBegin, None, ofArduino)
ofArduino.sendSysExEnd = new_instancemethod(_openframeworks.ofArduino_sendSysExEnd, None, ofArduino)
ofArduino.sendByte = new_instancemethod(_openframeworks.ofArduino_sendByte, None, ofArduino)
ofArduino.sendValueAsTwo7bitBytes = new_instancemethod(_openframeworks.ofArduino_sendValueAsTwo7bitBytes, None, ofArduino)
ofArduino.getPwm = new_instancemethod(_openframeworks.ofArduino_getPwm, None, ofArduino)
ofArduino.getDigital = new_instancemethod(_openframeworks.ofArduino_getDigital, None, ofArduino)
ofArduino.getAnalog = new_instancemethod(_openframeworks.ofArduino_getAnalog, None, ofArduino)
ofArduino.getSysEx = new_instancemethod(_openframeworks.ofArduino_getSysEx, None, ofArduino)
ofArduino.getString = new_instancemethod(_openframeworks.ofArduino_getString, None, ofArduino)
ofArduino.getMajorFirmwareVersion = new_instancemethod(_openframeworks.ofArduino_getMajorFirmwareVersion, None, ofArduino)
ofArduino.getMinorFirmwareVersion = new_instancemethod(_openframeworks.ofArduino_getMinorFirmwareVersion, None, ofArduino)
ofArduino.getFirmwareName = new_instancemethod(_openframeworks.ofArduino_getFirmwareName, None, ofArduino)
ofArduino.getDigitalPinMode = new_instancemethod(_openframeworks.ofArduino_getDigitalPinMode, None, ofArduino)
ofArduino.getAnalogPinReporting = new_instancemethod(_openframeworks.ofArduino_getAnalogPinReporting, None, ofArduino)
ofArduino.getValueFromTwo7bitBytes = new_instancemethod(_openframeworks.ofArduino_getValueFromTwo7bitBytes, None, ofArduino)
ofArduino.getInvertedValueFromTwo7bitBytes = new_instancemethod(_openframeworks.ofArduino_getInvertedValueFromTwo7bitBytes, None, ofArduino)
ofArduino.sendServo = new_instancemethod(_openframeworks.ofArduino_sendServo, None, ofArduino)
ofArduino.sendServoAttach = new_instancemethod(_openframeworks.ofArduino_sendServoAttach, None, ofArduino)
ofArduino.getServo = new_instancemethod(_openframeworks.ofArduino_getServo, None, ofArduino)
ofArduino.sendStepper2Wire = new_instancemethod(_openframeworks.ofArduino_sendStepper2Wire, None, ofArduino)
ofArduino.sendStepper4Wire = new_instancemethod(_openframeworks.ofArduino_sendStepper4Wire, None, ofArduino)
ofArduino.sendStepperMove = new_instancemethod(_openframeworks.ofArduino_sendStepperMove, None, ofArduino)
ofArduino.sendI2CConfig = new_instancemethod(_openframeworks.ofArduino_sendI2CConfig, None, ofArduino)
ofArduino.isI2CConfigured = new_instancemethod(_openframeworks.ofArduino_isI2CConfigured, None, ofArduino)
ofArduino.sendI2CWriteRequest = new_instancemethod(_openframeworks.ofArduino_sendI2CWriteRequest, None, ofArduino)
ofArduino.sendI2CReadRequest = new_instancemethod(_openframeworks.ofArduino_sendI2CReadRequest, None, ofArduino)
ofArduino.sendI2ContinuousReadRequest = new_instancemethod(_openframeworks.ofArduino_sendI2ContinuousReadRequest, None, ofArduino)
ofArduino.sendOneWireConfig = new_instancemethod(_openframeworks.ofArduino_sendOneWireConfig, None, ofArduino)
ofArduino.sendOneWireAlarmsSearch = new_instancemethod(_openframeworks.ofArduino_sendOneWireAlarmsSearch, None, ofArduino)
ofArduino.sendOneWireSearch = new_instancemethod(_openframeworks.ofArduino_sendOneWireSearch, None, ofArduino)
ofArduino.sendOneWireRead = new_instancemethod(_openframeworks.ofArduino_sendOneWireRead, None, ofArduino)
ofArduino.sendOneWireReset = new_instancemethod(_openframeworks.ofArduino_sendOneWireReset, None, ofArduino)
ofArduino.sendOneWireWrite = new_instancemethod(_openframeworks.ofArduino_sendOneWireWrite, None, ofArduino)
ofArduino.sendOneWireDelay = new_instancemethod(_openframeworks.ofArduino_sendOneWireDelay, None, ofArduino)
ofArduino.sendOneWireWriteAndRead = new_instancemethod(_openframeworks.ofArduino_sendOneWireWriteAndRead, None, ofArduino)
ofArduino.sendOneWireRequest = new_instancemethod(_openframeworks.ofArduino_sendOneWireRequest, None, ofArduino)
ofArduino.attachEncoder = new_instancemethod(_openframeworks.ofArduino_attachEncoder, None, ofArduino)
ofArduino.getEncoderPosition = new_instancemethod(_openframeworks.ofArduino_getEncoderPosition, None, ofArduino)
ofArduino.getAllEncoderPositions = new_instancemethod(_openframeworks.ofArduino_getAllEncoderPositions, None, ofArduino)
ofArduino.resetEncoderPosition = new_instancemethod(_openframeworks.ofArduino_resetEncoderPosition, None, ofArduino)
ofArduino.enableEncoderReporting = new_instancemethod(_openframeworks.ofArduino_enableEncoderReporting, None, ofArduino)
ofArduino.disableEncoderReporting = new_instancemethod(_openframeworks.ofArduino_disableEncoderReporting, None, ofArduino)
ofArduino.detachEncoder = new_instancemethod(_openframeworks.ofArduino_detachEncoder, None, ofArduino)
ofArduino.sendSerialConfig = new_instancemethod(_openframeworks.ofArduino_sendSerialConfig, None, ofArduino)
ofArduino.serialWrite = new_instancemethod(_openframeworks.ofArduino_serialWrite, None, ofArduino)
ofArduino.serialRead = new_instancemethod(_openframeworks.ofArduino_serialRead, None, ofArduino)
ofArduino.serialStop = new_instancemethod(_openframeworks.ofArduino_serialStop, None, ofArduino)
ofArduino.serialClose = new_instancemethod(_openframeworks.ofArduino_serialClose, None, ofArduino)
ofArduino.serialFlush = new_instancemethod(_openframeworks.ofArduino_serialFlush, None, ofArduino)
ofArduino.serialListen = new_instancemethod(_openframeworks.ofArduino_serialListen, None, ofArduino)
ofArduino.getPinCapabilities = new_instancemethod(_openframeworks.ofArduino_getPinCapabilities, None, ofArduino)
ofArduino.getTotalPins = new_instancemethod(_openframeworks.ofArduino_getTotalPins, None, ofArduino)
ofArduino.getNumAnalogPins = new_instancemethod(_openframeworks.ofArduino_getNumAnalogPins, None, ofArduino)
ofArduino_swigregister = _openframeworks.ofArduino_swigregister
ofArduino_swigregister(ofArduino)

OF_SERIAL_NO_DATA = _openframeworks.OF_SERIAL_NO_DATA
OF_SERIAL_ERROR = _openframeworks.OF_SERIAL_ERROR
class ofSerialDeviceInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openframeworks.ofSerialDeviceInfo_swiginit(self, _openframeworks.new_ofSerialDeviceInfo(*args))
    __swig_destroy__ = _openframeworks.delete_ofSerialDeviceInfo
ofSerialDeviceInfo.getDevicePath = new_instancemethod(_openframeworks.ofSerialDeviceInfo_getDevicePath, None, ofSerialDeviceInfo)
ofSerialDeviceInfo.getDeviceName = new_instancemethod(_openframeworks.ofSerialDeviceInfo_getDeviceName, None, ofSerialDeviceInfo)
ofSerialDeviceInfo.getDeviceID = new_instancemethod(_openframeworks.ofSerialDeviceInfo_getDeviceID, None, ofSerialDeviceInfo)
ofSerialDeviceInfo_swigregister = _openframeworks.ofSerialDeviceInfo_swigregister
ofSerialDeviceInfo_swigregister(ofSerialDeviceInfo)

class ofSerial(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _openframeworks.ofSerial_swiginit(self, _openframeworks.new_ofSerial())
    __swig_destroy__ = _openframeworks.delete_ofSerial
ofSerial.listDevices = new_instancemethod(_openframeworks.ofSerial_listDevices, None, ofSerial)
ofSerial.getDeviceList = new_instancemethod(_openframeworks.ofSerial_getDeviceList, None, ofSerial)
ofSerial.setup = new_instancemethod(_openframeworks.ofSerial_setup, None, ofSerial)
ofSerial.isInitialized = new_instancemethod(_openframeworks.ofSerial_isInitialized, None, ofSerial)
ofSerial.close = new_instancemethod(_openframeworks.ofSerial_close, None, ofSerial)
ofSerial.available = new_instancemethod(_openframeworks.ofSerial_available, None, ofSerial)
ofSerial.readBytes = new_instancemethod(_openframeworks.ofSerial_readBytes, None, ofSerial)
ofSerial.readByte = new_instancemethod(_openframeworks.ofSerial_readByte, None, ofSerial)
ofSerial.writeBytes = new_instancemethod(_openframeworks.ofSerial_writeBytes, None, ofSerial)
ofSerial.writeByte = new_instancemethod(_openframeworks.ofSerial_writeByte, None, ofSerial)
ofSerial.flush = new_instancemethod(_openframeworks.ofSerial_flush, None, ofSerial)
ofSerial.drain = new_instancemethod(_openframeworks.ofSerial_drain, None, ofSerial)
ofSerial_swigregister = _openframeworks.ofSerial_swigregister
ofSerial_swigregister(ofSerial)


def ofRandom(*args):
    return _openframeworks.ofRandom(*args)
ofRandom = _openframeworks.ofRandom

def ofRandomf():
    return _openframeworks.ofRandomf()
ofRandomf = _openframeworks.ofRandomf

def ofRandomuf():
    return _openframeworks.ofRandomuf()
ofRandomuf = _openframeworks.ofRandomuf

def ofSeedRandom(*args):
    return _openframeworks.ofSeedRandom(*args)
ofSeedRandom = _openframeworks.ofSeedRandom

def ofNormalize(value, min, max):
    return _openframeworks.ofNormalize(value, min, max)
ofNormalize = _openframeworks.ofNormalize

def ofMap(value, inputMin, inputMax, outputMin, outputMax, clamp=False):
    return _openframeworks.ofMap(value, inputMin, inputMax, outputMin, outputMax, clamp)
ofMap = _openframeworks.ofMap

def ofClamp(value, min, max):
    return _openframeworks.ofClamp(value, min, max)
ofClamp = _openframeworks.ofClamp

def ofInRange(t, min, max):
    return _openframeworks.ofInRange(t, min, max)
ofInRange = _openframeworks.ofInRange

def ofLerp(start, stop, amt):
    return _openframeworks.ofLerp(start, stop, amt)
ofLerp = _openframeworks.ofLerp

def ofDist(*args):
    return _openframeworks.ofDist(*args)
ofDist = _openframeworks.ofDist

def ofDistSquared(*args):
    return _openframeworks.ofDistSquared(*args)
ofDistSquared = _openframeworks.ofDistSquared

def ofRadToDeg(radians):
    return _openframeworks.ofRadToDeg(radians)
ofRadToDeg = _openframeworks.ofRadToDeg

def ofDegToRad(degrees):
    return _openframeworks.ofDegToRad(degrees)
ofDegToRad = _openframeworks.ofDegToRad

def ofLerpDegrees(currentAngle, targetAngle, pct):
    return _openframeworks.ofLerpDegrees(currentAngle, targetAngle, pct)
ofLerpDegrees = _openframeworks.ofLerpDegrees

def ofLerpRadians(currentAngle, targetAngle, pct):
    return _openframeworks.ofLerpRadians(currentAngle, targetAngle, pct)
ofLerpRadians = _openframeworks.ofLerpRadians

def ofAngleDifferenceDegrees(currentAngle, targetAngle):
    return _openframeworks.ofAngleDifferenceDegrees(currentAngle, targetAngle)
ofAngleDifferenceDegrees = _openframeworks.ofAngleDifferenceDegrees

def ofAngleDifferenceRadians(currentAngle, targetAngle):
    return _openframeworks.ofAngleDifferenceRadians(currentAngle, targetAngle)
ofAngleDifferenceRadians = _openframeworks.ofAngleDifferenceRadians

def ofWrap(value, arg2, to):
    return _openframeworks.ofWrap(value, arg2, to)
ofWrap = _openframeworks.ofWrap

def ofWrapRadians(*args):
    return _openframeworks.ofWrapRadians(*args)
ofWrapRadians = _openframeworks.ofWrapRadians

def ofWrapDegrees(angle, arg2=-180, to=+180):
    return _openframeworks.ofWrapDegrees(angle, arg2, to)
ofWrapDegrees = _openframeworks.ofWrapDegrees

def ofNoise(*args):
    return _openframeworks.ofNoise(*args)
ofNoise = _openframeworks.ofNoise

def ofSignedNoise(*args):
    return _openframeworks.ofSignedNoise(*args)
ofSignedNoise = _openframeworks.ofSignedNoise

def ofNextPow2(a):
    return _openframeworks.ofNextPow2(a)
ofNextPow2 = _openframeworks.ofNextPow2

def ofSign(n):
    return _openframeworks.ofSign(n)
ofSign = _openframeworks.ofSign
class ofMatrix3x3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    a = _swig_property(_openframeworks.ofMatrix3x3_a_get, _openframeworks.ofMatrix3x3_a_set)
    b = _swig_property(_openframeworks.ofMatrix3x3_b_get, _openframeworks.ofMatrix3x3_b_set)
    c = _swig_property(_openframeworks.ofMatrix3x3_c_get, _openframeworks.ofMatrix3x3_c_set)
    d = _swig_property(_openframeworks.ofMatrix3x3_d_get, _openframeworks.ofMatrix3x3_d_set)
    e = _swig_property(_openframeworks.ofMatrix3x3_e_get, _openframeworks.ofMatrix3x3_e_set)
    f = _swig_property(_openframeworks.ofMatrix3x3_f_get, _openframeworks.ofMatrix3x3_f_set)
    g = _swig_property(_openframeworks.ofMatrix3x3_g_get, _openframeworks.ofMatrix3x3_g_set)
    h = _swig_property(_openframeworks.ofMatrix3x3_h_get, _openframeworks.ofMatrix3x3_h_set)
    i = _swig_property(_openframeworks.ofMatrix3x3_i_get, _openframeworks.ofMatrix3x3_i_set)

    def __init__(self, *args):
        _openframeworks.ofMatrix3x3_swiginit(self, _openframeworks.new_ofMatrix3x3(*args))

    def __truediv__(self, *args):
        return _openframeworks.ofMatrix3x3___div__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _openframeworks.ofMatrix3x3___itruediv__(self, *args)
    __idiv__ = __itruediv__


    __swig_destroy__ = _openframeworks.delete_ofMatrix3x3
ofMatrix3x3.set = new_instancemethod(_openframeworks.ofMatrix3x3_set, None, ofMatrix3x3)
ofMatrix3x3.__getitem__ = new_instancemethod(_openframeworks.ofMatrix3x3___getitem__, None, ofMatrix3x3)
ofMatrix3x3.transpose = new_instancemethod(_openframeworks.ofMatrix3x3_transpose, None, ofMatrix3x3)
ofMatrix3x3.determinant = new_instancemethod(_openframeworks.ofMatrix3x3_determinant, None, ofMatrix3x3)
ofMatrix3x3.inverse = new_instancemethod(_openframeworks.ofMatrix3x3_inverse, None, ofMatrix3x3)
ofMatrix3x3.invert = new_instancemethod(_openframeworks.ofMatrix3x3_invert, None, ofMatrix3x3)
ofMatrix3x3.entrywiseTimes = new_instancemethod(_openframeworks.ofMatrix3x3_entrywiseTimes, None, ofMatrix3x3)
ofMatrix3x3.__add__ = new_instancemethod(_openframeworks.ofMatrix3x3___add__, None, ofMatrix3x3)
ofMatrix3x3.__iadd__ = new_instancemethod(_openframeworks.ofMatrix3x3___iadd__, None, ofMatrix3x3)
ofMatrix3x3.__sub__ = new_instancemethod(_openframeworks.ofMatrix3x3___sub__, None, ofMatrix3x3)
ofMatrix3x3.__isub__ = new_instancemethod(_openframeworks.ofMatrix3x3___isub__, None, ofMatrix3x3)
ofMatrix3x3.__imul__ = new_instancemethod(_openframeworks.ofMatrix3x3___imul__, None, ofMatrix3x3)
ofMatrix3x3.__mul__ = new_instancemethod(_openframeworks.ofMatrix3x3___mul__, None, ofMatrix3x3)
ofMatrix3x3.mat3 = new_instancemethod(_openframeworks.ofMatrix3x3_mat3, None, ofMatrix3x3)
ofMatrix3x3.__str__ = new_instancemethod(_openframeworks.ofMatrix3x3___str__, None, ofMatrix3x3)
ofMatrix3x3_swigregister = _openframeworks.ofMatrix3x3_swigregister
ofMatrix3x3_swigregister(ofMatrix3x3)

class ofMatrix4x4(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _mat = _swig_property(_openframeworks.ofMatrix4x4__mat_get, _openframeworks.ofMatrix4x4__mat_set)

    def __init__(self, *args):
        _openframeworks.ofMatrix4x4_swiginit(self, _openframeworks.new_ofMatrix4x4(*args))
    __swig_destroy__ = _openframeworks.delete_ofMatrix4x4
    newIdentityMatrix = staticmethod(_openframeworks.ofMatrix4x4_newIdentityMatrix)
    newScaleMatrix = staticmethod(_openframeworks.ofMatrix4x4_newScaleMatrix)
    newTranslationMatrix = staticmethod(_openframeworks.ofMatrix4x4_newTranslationMatrix)
    newRotationMatrix = staticmethod(_openframeworks.ofMatrix4x4_newRotationMatrix)
    newOrthoMatrix = staticmethod(_openframeworks.ofMatrix4x4_newOrthoMatrix)
    newOrtho2DMatrix = staticmethod(_openframeworks.ofMatrix4x4_newOrtho2DMatrix)
    newFrustumMatrix = staticmethod(_openframeworks.ofMatrix4x4_newFrustumMatrix)
    newPerspectiveMatrix = staticmethod(_openframeworks.ofMatrix4x4_newPerspectiveMatrix)
    newLookAtMatrix = staticmethod(_openframeworks.ofMatrix4x4_newLookAtMatrix)
    getInverseOf = staticmethod(_openframeworks.ofMatrix4x4_getInverseOf)
    getTransposedOf = staticmethod(_openframeworks.ofMatrix4x4_getTransposedOf)
    getOrthoNormalOf = staticmethod(_openframeworks.ofMatrix4x4_getOrthoNormalOf)
    transform3x3 = staticmethod(_openframeworks.ofMatrix4x4_transform3x3)
ofMatrix4x4.makeIdentityMatrix = new_instancemethod(_openframeworks.ofMatrix4x4_makeIdentityMatrix, None, ofMatrix4x4)
ofMatrix4x4.makeScaleMatrix = new_instancemethod(_openframeworks.ofMatrix4x4_makeScaleMatrix, None, ofMatrix4x4)
ofMatrix4x4.makeTranslationMatrix = new_instancemethod(_openframeworks.ofMatrix4x4_makeTranslationMatrix, None, ofMatrix4x4)
ofMatrix4x4.makeRotationMatrix = new_instancemethod(_openframeworks.ofMatrix4x4_makeRotationMatrix, None, ofMatrix4x4)
ofMatrix4x4.makeInvertOf = new_instancemethod(_openframeworks.ofMatrix4x4_makeInvertOf, None, ofMatrix4x4)
ofMatrix4x4.makeOrthoNormalOf = new_instancemethod(_openframeworks.ofMatrix4x4_makeOrthoNormalOf, None, ofMatrix4x4)
ofMatrix4x4.makeFromMultiplicationOf = new_instancemethod(_openframeworks.ofMatrix4x4_makeFromMultiplicationOf, None, ofMatrix4x4)
ofMatrix4x4.makeOrthoMatrix = new_instancemethod(_openframeworks.ofMatrix4x4_makeOrthoMatrix, None, ofMatrix4x4)
ofMatrix4x4.makeOrtho2DMatrix = new_instancemethod(_openframeworks.ofMatrix4x4_makeOrtho2DMatrix, None, ofMatrix4x4)
ofMatrix4x4.makeFrustumMatrix = new_instancemethod(_openframeworks.ofMatrix4x4_makeFrustumMatrix, None, ofMatrix4x4)
ofMatrix4x4.makePerspectiveMatrix = new_instancemethod(_openframeworks.ofMatrix4x4_makePerspectiveMatrix, None, ofMatrix4x4)
ofMatrix4x4.makeLookAtMatrix = new_instancemethod(_openframeworks.ofMatrix4x4_makeLookAtMatrix, None, ofMatrix4x4)
ofMatrix4x4.makeLookAtViewMatrix = new_instancemethod(_openframeworks.ofMatrix4x4_makeLookAtViewMatrix, None, ofMatrix4x4)
ofMatrix4x4.__call__ = new_instancemethod(_openframeworks.ofMatrix4x4___call__, None, ofMatrix4x4)
ofMatrix4x4.getRowAsVec3f = new_instancemethod(_openframeworks.ofMatrix4x4_getRowAsVec3f, None, ofMatrix4x4)
ofMatrix4x4.getRowAsVec4f = new_instancemethod(_openframeworks.ofMatrix4x4_getRowAsVec4f, None, ofMatrix4x4)
ofMatrix4x4.getPtr = new_instancemethod(_openframeworks.ofMatrix4x4_getPtr, None, ofMatrix4x4)
ofMatrix4x4.isValid = new_instancemethod(_openframeworks.ofMatrix4x4_isValid, None, ofMatrix4x4)
ofMatrix4x4.isNaN = new_instancemethod(_openframeworks.ofMatrix4x4_isNaN, None, ofMatrix4x4)
ofMatrix4x4.isIdentity = new_instancemethod(_openframeworks.ofMatrix4x4_isIdentity, None, ofMatrix4x4)
ofMatrix4x4.set = new_instancemethod(_openframeworks.ofMatrix4x4_set, None, ofMatrix4x4)
ofMatrix4x4.getInverse = new_instancemethod(_openframeworks.ofMatrix4x4_getInverse, None, ofMatrix4x4)
ofMatrix4x4.getOrtho = new_instancemethod(_openframeworks.ofMatrix4x4_getOrtho, None, ofMatrix4x4)
ofMatrix4x4.getFrustum = new_instancemethod(_openframeworks.ofMatrix4x4_getFrustum, None, ofMatrix4x4)
ofMatrix4x4.getPerspective = new_instancemethod(_openframeworks.ofMatrix4x4_getPerspective, None, ofMatrix4x4)
ofMatrix4x4.getLookAt = new_instancemethod(_openframeworks.ofMatrix4x4_getLookAt, None, ofMatrix4x4)
ofMatrix4x4.decompose = new_instancemethod(_openframeworks.ofMatrix4x4_decompose, None, ofMatrix4x4)
ofMatrix4x4.postMult = new_instancemethod(_openframeworks.ofMatrix4x4_postMult, None, ofMatrix4x4)
ofMatrix4x4.preMult = new_instancemethod(_openframeworks.ofMatrix4x4_preMult, None, ofMatrix4x4)
ofMatrix4x4.__imul__ = new_instancemethod(_openframeworks.ofMatrix4x4___imul__, None, ofMatrix4x4)
ofMatrix4x4.__mul__ = new_instancemethod(_openframeworks.ofMatrix4x4___mul__, None, ofMatrix4x4)
ofMatrix4x4.postMultTranslate = new_instancemethod(_openframeworks.ofMatrix4x4_postMultTranslate, None, ofMatrix4x4)
ofMatrix4x4.postMultRotate = new_instancemethod(_openframeworks.ofMatrix4x4_postMultRotate, None, ofMatrix4x4)
ofMatrix4x4.postMultScale = new_instancemethod(_openframeworks.ofMatrix4x4_postMultScale, None, ofMatrix4x4)
ofMatrix4x4.preMultScale = new_instancemethod(_openframeworks.ofMatrix4x4_preMultScale, None, ofMatrix4x4)
ofMatrix4x4.preMultTranslate = new_instancemethod(_openframeworks.ofMatrix4x4_preMultTranslate, None, ofMatrix4x4)
ofMatrix4x4.preMultRotate = new_instancemethod(_openframeworks.ofMatrix4x4_preMultRotate, None, ofMatrix4x4)
ofMatrix4x4.setRotate = new_instancemethod(_openframeworks.ofMatrix4x4_setRotate, None, ofMatrix4x4)
ofMatrix4x4.setTranslation = new_instancemethod(_openframeworks.ofMatrix4x4_setTranslation, None, ofMatrix4x4)
ofMatrix4x4.rotateRad = new_instancemethod(_openframeworks.ofMatrix4x4_rotateRad, None, ofMatrix4x4)
ofMatrix4x4.rotate = new_instancemethod(_openframeworks.ofMatrix4x4_rotate, None, ofMatrix4x4)
ofMatrix4x4.translate = new_instancemethod(_openframeworks.ofMatrix4x4_translate, None, ofMatrix4x4)
ofMatrix4x4.scale = new_instancemethod(_openframeworks.ofMatrix4x4_scale, None, ofMatrix4x4)
ofMatrix4x4.glRotateRad = new_instancemethod(_openframeworks.ofMatrix4x4_glRotateRad, None, ofMatrix4x4)
ofMatrix4x4.glRotate = new_instancemethod(_openframeworks.ofMatrix4x4_glRotate, None, ofMatrix4x4)
ofMatrix4x4.glTranslate = new_instancemethod(_openframeworks.ofMatrix4x4_glTranslate, None, ofMatrix4x4)
ofMatrix4x4.glScale = new_instancemethod(_openframeworks.ofMatrix4x4_glScale, None, ofMatrix4x4)
ofMatrix4x4.getRotate = new_instancemethod(_openframeworks.ofMatrix4x4_getRotate, None, ofMatrix4x4)
ofMatrix4x4.getTranslation = new_instancemethod(_openframeworks.ofMatrix4x4_getTranslation, None, ofMatrix4x4)
ofMatrix4x4.getScale = new_instancemethod(_openframeworks.ofMatrix4x4_getScale, None, ofMatrix4x4)
ofMatrix4x4.mat4 = new_instancemethod(_openframeworks.ofMatrix4x4_mat4, None, ofMatrix4x4)
ofMatrix4x4.__str__ = new_instancemethod(_openframeworks.ofMatrix4x4___str__, None, ofMatrix4x4)
ofMatrix4x4_swigregister = _openframeworks.ofMatrix4x4_swigregister
ofMatrix4x4_swigregister(ofMatrix4x4)

def ofMatrix4x4_newIdentityMatrix():
    return _openframeworks.ofMatrix4x4_newIdentityMatrix()
ofMatrix4x4_newIdentityMatrix = _openframeworks.ofMatrix4x4_newIdentityMatrix

def ofMatrix4x4_newScaleMatrix(*args):
    return _openframeworks.ofMatrix4x4_newScaleMatrix(*args)
ofMatrix4x4_newScaleMatrix = _openframeworks.ofMatrix4x4_newScaleMatrix

def ofMatrix4x4_newTranslationMatrix(*args):
    return _openframeworks.ofMatrix4x4_newTranslationMatrix(*args)
ofMatrix4x4_newTranslationMatrix = _openframeworks.ofMatrix4x4_newTranslationMatrix

def ofMatrix4x4_newRotationMatrix(*args):
    return _openframeworks.ofMatrix4x4_newRotationMatrix(*args)
ofMatrix4x4_newRotationMatrix = _openframeworks.ofMatrix4x4_newRotationMatrix

def ofMatrix4x4_newOrthoMatrix(left, right, bottom, top, zNear, zFar):
    return _openframeworks.ofMatrix4x4_newOrthoMatrix(left, right, bottom, top, zNear, zFar)
ofMatrix4x4_newOrthoMatrix = _openframeworks.ofMatrix4x4_newOrthoMatrix

def ofMatrix4x4_newOrtho2DMatrix(left, right, bottom, top):
    return _openframeworks.ofMatrix4x4_newOrtho2DMatrix(left, right, bottom, top)
ofMatrix4x4_newOrtho2DMatrix = _openframeworks.ofMatrix4x4_newOrtho2DMatrix

def ofMatrix4x4_newFrustumMatrix(left, right, bottom, top, zNear, zFar):
    return _openframeworks.ofMatrix4x4_newFrustumMatrix(left, right, bottom, top, zNear, zFar)
ofMatrix4x4_newFrustumMatrix = _openframeworks.ofMatrix4x4_newFrustumMatrix

def ofMatrix4x4_newPerspectiveMatrix(fovy, aspectRatio, zNear, zFar):
    return _openframeworks.ofMatrix4x4_newPerspectiveMatrix(fovy, aspectRatio, zNear, zFar)
ofMatrix4x4_newPerspectiveMatrix = _openframeworks.ofMatrix4x4_newPerspectiveMatrix

def ofMatrix4x4_newLookAtMatrix(eye, center, up):
    return _openframeworks.ofMatrix4x4_newLookAtMatrix(eye, center, up)
ofMatrix4x4_newLookAtMatrix = _openframeworks.ofMatrix4x4_newLookAtMatrix

def ofMatrix4x4_getInverseOf(matrix):
    return _openframeworks.ofMatrix4x4_getInverseOf(matrix)
ofMatrix4x4_getInverseOf = _openframeworks.ofMatrix4x4_getInverseOf

def ofMatrix4x4_getTransposedOf(matrix):
    return _openframeworks.ofMatrix4x4_getTransposedOf(matrix)
ofMatrix4x4_getTransposedOf = _openframeworks.ofMatrix4x4_getTransposedOf

def ofMatrix4x4_getOrthoNormalOf(matrix):
    return _openframeworks.ofMatrix4x4_getOrthoNormalOf(matrix)
ofMatrix4x4_getOrthoNormalOf = _openframeworks.ofMatrix4x4_getOrthoNormalOf

def ofMatrix4x4_transform3x3(*args):
    return _openframeworks.ofMatrix4x4_transform3x3(*args)
ofMatrix4x4_transform3x3 = _openframeworks.ofMatrix4x4_transform3x3

class ofQuaternion(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _v = _swig_property(_openframeworks.ofQuaternion__v_get, _openframeworks.ofQuaternion__v_set)

    def __init__(self, *args):
        _openframeworks.ofQuaternion_swiginit(self, _openframeworks.new_ofQuaternion(*args))

    def __truediv__(self, *args):
        return _openframeworks.ofQuaternion___div__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _openframeworks.ofQuaternion___itruediv__(self, *args)
    __idiv__ = __itruediv__


    __swig_destroy__ = _openframeworks.delete_ofQuaternion
ofQuaternion.set = new_instancemethod(_openframeworks.ofQuaternion_set, None, ofQuaternion)
ofQuaternion.__getitem__ = new_instancemethod(_openframeworks.ofQuaternion___getitem__, None, ofQuaternion)
ofQuaternion.get = new_instancemethod(_openframeworks.ofQuaternion_get, None, ofQuaternion)
ofQuaternion.x = new_instancemethod(_openframeworks.ofQuaternion_x, None, ofQuaternion)
ofQuaternion.y = new_instancemethod(_openframeworks.ofQuaternion_y, None, ofQuaternion)
ofQuaternion.z = new_instancemethod(_openframeworks.ofQuaternion_z, None, ofQuaternion)
ofQuaternion.w = new_instancemethod(_openframeworks.ofQuaternion_w, None, ofQuaternion)
ofQuaternion.asVec4 = new_instancemethod(_openframeworks.ofQuaternion_asVec4, None, ofQuaternion)
ofQuaternion.asVec3 = new_instancemethod(_openframeworks.ofQuaternion_asVec3, None, ofQuaternion)
ofQuaternion.zeroRotation = new_instancemethod(_openframeworks.ofQuaternion_zeroRotation, None, ofQuaternion)
ofQuaternion.length = new_instancemethod(_openframeworks.ofQuaternion_length, None, ofQuaternion)
ofQuaternion.length2 = new_instancemethod(_openframeworks.ofQuaternion_length2, None, ofQuaternion)
ofQuaternion.conj = new_instancemethod(_openframeworks.ofQuaternion_conj, None, ofQuaternion)
ofQuaternion.inverse = new_instancemethod(_openframeworks.ofQuaternion_inverse, None, ofQuaternion)
ofQuaternion.makeRotate = new_instancemethod(_openframeworks.ofQuaternion_makeRotate, None, ofQuaternion)
ofQuaternion.makeRotate_original = new_instancemethod(_openframeworks.ofQuaternion_makeRotate_original, None, ofQuaternion)
ofQuaternion.getRotate = new_instancemethod(_openframeworks.ofQuaternion_getRotate, None, ofQuaternion)
ofQuaternion.getEuler = new_instancemethod(_openframeworks.ofQuaternion_getEuler, None, ofQuaternion)
ofQuaternion.slerp = new_instancemethod(_openframeworks.ofQuaternion_slerp, None, ofQuaternion)
ofQuaternion.normalize = new_instancemethod(_openframeworks.ofQuaternion_normalize, None, ofQuaternion)
ofQuaternion.__eq__ = new_instancemethod(_openframeworks.ofQuaternion___eq__, None, ofQuaternion)
ofQuaternion.__ne__ = new_instancemethod(_openframeworks.ofQuaternion___ne__, None, ofQuaternion)
ofQuaternion.__mul__ = new_instancemethod(_openframeworks.ofQuaternion___mul__, None, ofQuaternion)
ofQuaternion.__imul__ = new_instancemethod(_openframeworks.ofQuaternion___imul__, None, ofQuaternion)
ofQuaternion.__add__ = new_instancemethod(_openframeworks.ofQuaternion___add__, None, ofQuaternion)
ofQuaternion.__iadd__ = new_instancemethod(_openframeworks.ofQuaternion___iadd__, None, ofQuaternion)
ofQuaternion.__isub__ = new_instancemethod(_openframeworks.ofQuaternion___isub__, None, ofQuaternion)
ofQuaternion.__sub__ = new_instancemethod(_openframeworks.ofQuaternion___sub__, None, ofQuaternion)
ofQuaternion.__neg__ = new_instancemethod(_openframeworks.ofQuaternion___neg__, None, ofQuaternion)
ofQuaternion.quat = new_instancemethod(_openframeworks.ofQuaternion_quat, None, ofQuaternion)
ofQuaternion.__str__ = new_instancemethod(_openframeworks.ofQuaternion___str__, None, ofQuaternion)
ofQuaternion_swigregister = _openframeworks.ofQuaternion_swigregister
ofQuaternion_swigregister(ofQuaternion)

class ofVec2f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    DIM = _openframeworks.ofVec2f_DIM
    x = _swig_property(_openframeworks.ofVec2f_x_get, _openframeworks.ofVec2f_x_set)
    y = _swig_property(_openframeworks.ofVec2f_y_get, _openframeworks.ofVec2f_y_set)

    def __init__(self, *args):
        _openframeworks.ofVec2f_swiginit(self, _openframeworks.new_ofVec2f(*args))

    def __truediv__(self, *args):
        return _openframeworks.ofVec2f___div__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _openframeworks.ofVec2f___itruediv__(self, *args)
    __idiv__ = __itruediv__


    zero = staticmethod(_openframeworks.ofVec2f_zero)
    one = staticmethod(_openframeworks.ofVec2f_one)
    __swig_destroy__ = _openframeworks.delete_ofVec2f
ofVec2f.getPtr = new_instancemethod(_openframeworks.ofVec2f_getPtr, None, ofVec2f)
ofVec2f.__getitem__ = new_instancemethod(_openframeworks.ofVec2f___getitem__, None, ofVec2f)
ofVec2f.set = new_instancemethod(_openframeworks.ofVec2f_set, None, ofVec2f)
ofVec2f.__eq__ = new_instancemethod(_openframeworks.ofVec2f___eq__, None, ofVec2f)
ofVec2f.__ne__ = new_instancemethod(_openframeworks.ofVec2f___ne__, None, ofVec2f)
ofVec2f.match = new_instancemethod(_openframeworks.ofVec2f_match, None, ofVec2f)
ofVec2f.isAligned = new_instancemethod(_openframeworks.ofVec2f_isAligned, None, ofVec2f)
ofVec2f.isAlignedRad = new_instancemethod(_openframeworks.ofVec2f_isAlignedRad, None, ofVec2f)
ofVec2f.align = new_instancemethod(_openframeworks.ofVec2f_align, None, ofVec2f)
ofVec2f.alignRad = new_instancemethod(_openframeworks.ofVec2f_alignRad, None, ofVec2f)
ofVec2f.__add__ = new_instancemethod(_openframeworks.ofVec2f___add__, None, ofVec2f)
ofVec2f.__iadd__ = new_instancemethod(_openframeworks.ofVec2f___iadd__, None, ofVec2f)
ofVec2f.__sub__ = new_instancemethod(_openframeworks.ofVec2f___sub__, None, ofVec2f)
ofVec2f.__neg__ = new_instancemethod(_openframeworks.ofVec2f___neg__, None, ofVec2f)
ofVec2f.__isub__ = new_instancemethod(_openframeworks.ofVec2f___isub__, None, ofVec2f)
ofVec2f.__mul__ = new_instancemethod(_openframeworks.ofVec2f___mul__, None, ofVec2f)
ofVec2f.__imul__ = new_instancemethod(_openframeworks.ofVec2f___imul__, None, ofVec2f)
ofVec2f.getScaled = new_instancemethod(_openframeworks.ofVec2f_getScaled, None, ofVec2f)
ofVec2f.scale = new_instancemethod(_openframeworks.ofVec2f_scale, None, ofVec2f)
ofVec2f.getRotated = new_instancemethod(_openframeworks.ofVec2f_getRotated, None, ofVec2f)
ofVec2f.getRotatedRad = new_instancemethod(_openframeworks.ofVec2f_getRotatedRad, None, ofVec2f)
ofVec2f.rotate = new_instancemethod(_openframeworks.ofVec2f_rotate, None, ofVec2f)
ofVec2f.rotateRad = new_instancemethod(_openframeworks.ofVec2f_rotateRad, None, ofVec2f)
ofVec2f.getMapped = new_instancemethod(_openframeworks.ofVec2f_getMapped, None, ofVec2f)
ofVec2f.map = new_instancemethod(_openframeworks.ofVec2f_map, None, ofVec2f)
ofVec2f.distance = new_instancemethod(_openframeworks.ofVec2f_distance, None, ofVec2f)
ofVec2f.squareDistance = new_instancemethod(_openframeworks.ofVec2f_squareDistance, None, ofVec2f)
ofVec2f.getInterpolated = new_instancemethod(_openframeworks.ofVec2f_getInterpolated, None, ofVec2f)
ofVec2f.interpolate = new_instancemethod(_openframeworks.ofVec2f_interpolate, None, ofVec2f)
ofVec2f.getMiddle = new_instancemethod(_openframeworks.ofVec2f_getMiddle, None, ofVec2f)
ofVec2f.middle = new_instancemethod(_openframeworks.ofVec2f_middle, None, ofVec2f)
ofVec2f.average = new_instancemethod(_openframeworks.ofVec2f_average, None, ofVec2f)
ofVec2f.getNormalized = new_instancemethod(_openframeworks.ofVec2f_getNormalized, None, ofVec2f)
ofVec2f.normalize = new_instancemethod(_openframeworks.ofVec2f_normalize, None, ofVec2f)
ofVec2f.getLimited = new_instancemethod(_openframeworks.ofVec2f_getLimited, None, ofVec2f)
ofVec2f.limit = new_instancemethod(_openframeworks.ofVec2f_limit, None, ofVec2f)
ofVec2f.length = new_instancemethod(_openframeworks.ofVec2f_length, None, ofVec2f)
ofVec2f.lengthSquared = new_instancemethod(_openframeworks.ofVec2f_lengthSquared, None, ofVec2f)
ofVec2f.angle = new_instancemethod(_openframeworks.ofVec2f_angle, None, ofVec2f)
ofVec2f.angleRad = new_instancemethod(_openframeworks.ofVec2f_angleRad, None, ofVec2f)
ofVec2f.getPerpendicular = new_instancemethod(_openframeworks.ofVec2f_getPerpendicular, None, ofVec2f)
ofVec2f.perpendicular = new_instancemethod(_openframeworks.ofVec2f_perpendicular, None, ofVec2f)
ofVec2f.dot = new_instancemethod(_openframeworks.ofVec2f_dot, None, ofVec2f)
ofVec2f.vec2 = new_instancemethod(_openframeworks.ofVec2f_vec2, None, ofVec2f)
ofVec2f.__str__ = new_instancemethod(_openframeworks.ofVec2f___str__, None, ofVec2f)
ofVec2f_swigregister = _openframeworks.ofVec2f_swigregister
ofVec2f_swigregister(ofVec2f)

def ofVec2f_zero():
    return _openframeworks.ofVec2f_zero()
ofVec2f_zero = _openframeworks.ofVec2f_zero

def ofVec2f_one():
    return _openframeworks.ofVec2f_one()
ofVec2f_one = _openframeworks.ofVec2f_one

class ofVec3f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    DIM = _openframeworks.ofVec3f_DIM
    x = _swig_property(_openframeworks.ofVec3f_x_get, _openframeworks.ofVec3f_x_set)
    y = _swig_property(_openframeworks.ofVec3f_y_get, _openframeworks.ofVec3f_y_set)
    z = _swig_property(_openframeworks.ofVec3f_z_get, _openframeworks.ofVec3f_z_set)

    def __init__(self, *args):
        _openframeworks.ofVec3f_swiginit(self, _openframeworks.new_ofVec3f(*args))

    def __truediv__(self, *args):
        return _openframeworks.ofVec3f___div__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _openframeworks.ofVec3f___itruediv__(self, *args)
    __idiv__ = __itruediv__


    zero = staticmethod(_openframeworks.ofVec3f_zero)
    one = staticmethod(_openframeworks.ofVec3f_one)
    __swig_destroy__ = _openframeworks.delete_ofVec3f
ofVec3f.getPtr = new_instancemethod(_openframeworks.ofVec3f_getPtr, None, ofVec3f)
ofVec3f.__getitem__ = new_instancemethod(_openframeworks.ofVec3f___getitem__, None, ofVec3f)
ofVec3f.set = new_instancemethod(_openframeworks.ofVec3f_set, None, ofVec3f)
ofVec3f.__eq__ = new_instancemethod(_openframeworks.ofVec3f___eq__, None, ofVec3f)
ofVec3f.__ne__ = new_instancemethod(_openframeworks.ofVec3f___ne__, None, ofVec3f)
ofVec3f.match = new_instancemethod(_openframeworks.ofVec3f_match, None, ofVec3f)
ofVec3f.isAligned = new_instancemethod(_openframeworks.ofVec3f_isAligned, None, ofVec3f)
ofVec3f.isAlignedRad = new_instancemethod(_openframeworks.ofVec3f_isAlignedRad, None, ofVec3f)
ofVec3f.align = new_instancemethod(_openframeworks.ofVec3f_align, None, ofVec3f)
ofVec3f.alignRad = new_instancemethod(_openframeworks.ofVec3f_alignRad, None, ofVec3f)
ofVec3f.__add__ = new_instancemethod(_openframeworks.ofVec3f___add__, None, ofVec3f)
ofVec3f.__iadd__ = new_instancemethod(_openframeworks.ofVec3f___iadd__, None, ofVec3f)
ofVec3f.__sub__ = new_instancemethod(_openframeworks.ofVec3f___sub__, None, ofVec3f)
ofVec3f.__neg__ = new_instancemethod(_openframeworks.ofVec3f___neg__, None, ofVec3f)
ofVec3f.__isub__ = new_instancemethod(_openframeworks.ofVec3f___isub__, None, ofVec3f)
ofVec3f.__mul__ = new_instancemethod(_openframeworks.ofVec3f___mul__, None, ofVec3f)
ofVec3f.__imul__ = new_instancemethod(_openframeworks.ofVec3f___imul__, None, ofVec3f)
ofVec3f.getScaled = new_instancemethod(_openframeworks.ofVec3f_getScaled, None, ofVec3f)
ofVec3f.scale = new_instancemethod(_openframeworks.ofVec3f_scale, None, ofVec3f)
ofVec3f.getRotated = new_instancemethod(_openframeworks.ofVec3f_getRotated, None, ofVec3f)
ofVec3f.getRotatedRad = new_instancemethod(_openframeworks.ofVec3f_getRotatedRad, None, ofVec3f)
ofVec3f.rotate = new_instancemethod(_openframeworks.ofVec3f_rotate, None, ofVec3f)
ofVec3f.rotateRad = new_instancemethod(_openframeworks.ofVec3f_rotateRad, None, ofVec3f)
ofVec3f.getMapped = new_instancemethod(_openframeworks.ofVec3f_getMapped, None, ofVec3f)
ofVec3f.map = new_instancemethod(_openframeworks.ofVec3f_map, None, ofVec3f)
ofVec3f.distance = new_instancemethod(_openframeworks.ofVec3f_distance, None, ofVec3f)
ofVec3f.squareDistance = new_instancemethod(_openframeworks.ofVec3f_squareDistance, None, ofVec3f)
ofVec3f.getInterpolated = new_instancemethod(_openframeworks.ofVec3f_getInterpolated, None, ofVec3f)
ofVec3f.interpolate = new_instancemethod(_openframeworks.ofVec3f_interpolate, None, ofVec3f)
ofVec3f.getMiddle = new_instancemethod(_openframeworks.ofVec3f_getMiddle, None, ofVec3f)
ofVec3f.middle = new_instancemethod(_openframeworks.ofVec3f_middle, None, ofVec3f)
ofVec3f.average = new_instancemethod(_openframeworks.ofVec3f_average, None, ofVec3f)
ofVec3f.getNormalized = new_instancemethod(_openframeworks.ofVec3f_getNormalized, None, ofVec3f)
ofVec3f.normalize = new_instancemethod(_openframeworks.ofVec3f_normalize, None, ofVec3f)
ofVec3f.getLimited = new_instancemethod(_openframeworks.ofVec3f_getLimited, None, ofVec3f)
ofVec3f.limit = new_instancemethod(_openframeworks.ofVec3f_limit, None, ofVec3f)
ofVec3f.length = new_instancemethod(_openframeworks.ofVec3f_length, None, ofVec3f)
ofVec3f.lengthSquared = new_instancemethod(_openframeworks.ofVec3f_lengthSquared, None, ofVec3f)
ofVec3f.angle = new_instancemethod(_openframeworks.ofVec3f_angle, None, ofVec3f)
ofVec3f.angleRad = new_instancemethod(_openframeworks.ofVec3f_angleRad, None, ofVec3f)
ofVec3f.getPerpendicular = new_instancemethod(_openframeworks.ofVec3f_getPerpendicular, None, ofVec3f)
ofVec3f.perpendicular = new_instancemethod(_openframeworks.ofVec3f_perpendicular, None, ofVec3f)
ofVec3f.getCrossed = new_instancemethod(_openframeworks.ofVec3f_getCrossed, None, ofVec3f)
ofVec3f.cross = new_instancemethod(_openframeworks.ofVec3f_cross, None, ofVec3f)
ofVec3f.dot = new_instancemethod(_openframeworks.ofVec3f_dot, None, ofVec3f)
ofVec3f.vec3 = new_instancemethod(_openframeworks.ofVec3f_vec3, None, ofVec3f)
ofVec3f.__str__ = new_instancemethod(_openframeworks.ofVec3f___str__, None, ofVec3f)
ofVec3f_swigregister = _openframeworks.ofVec3f_swigregister
ofVec3f_swigregister(ofVec3f)

def ofVec3f_zero():
    return _openframeworks.ofVec3f_zero()
ofVec3f_zero = _openframeworks.ofVec3f_zero

def ofVec3f_one():
    return _openframeworks.ofVec3f_one()
ofVec3f_one = _openframeworks.ofVec3f_one

class ofVec4f(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    DIM = _openframeworks.ofVec4f_DIM
    x = _swig_property(_openframeworks.ofVec4f_x_get, _openframeworks.ofVec4f_x_set)
    y = _swig_property(_openframeworks.ofVec4f_y_get, _openframeworks.ofVec4f_y_set)
    z = _swig_property(_openframeworks.ofVec4f_z_get, _openframeworks.ofVec4f_z_set)
    w = _swig_property(_openframeworks.ofVec4f_w_get, _openframeworks.ofVec4f_w_set)

    def __init__(self, *args):
        _openframeworks.ofVec4f_swiginit(self, _openframeworks.new_ofVec4f(*args))

    def __truediv__(self, *args):
        return _openframeworks.ofVec4f___div__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _openframeworks.ofVec4f___itruediv__(self, *args)
    __idiv__ = __itruediv__


    zero = staticmethod(_openframeworks.ofVec4f_zero)
    one = staticmethod(_openframeworks.ofVec4f_one)
    __swig_destroy__ = _openframeworks.delete_ofVec4f
ofVec4f.getPtr = new_instancemethod(_openframeworks.ofVec4f_getPtr, None, ofVec4f)
ofVec4f.__getitem__ = new_instancemethod(_openframeworks.ofVec4f___getitem__, None, ofVec4f)
ofVec4f.set = new_instancemethod(_openframeworks.ofVec4f_set, None, ofVec4f)
ofVec4f.__eq__ = new_instancemethod(_openframeworks.ofVec4f___eq__, None, ofVec4f)
ofVec4f.__ne__ = new_instancemethod(_openframeworks.ofVec4f___ne__, None, ofVec4f)
ofVec4f.match = new_instancemethod(_openframeworks.ofVec4f_match, None, ofVec4f)
ofVec4f.__add__ = new_instancemethod(_openframeworks.ofVec4f___add__, None, ofVec4f)
ofVec4f.__iadd__ = new_instancemethod(_openframeworks.ofVec4f___iadd__, None, ofVec4f)
ofVec4f.__sub__ = new_instancemethod(_openframeworks.ofVec4f___sub__, None, ofVec4f)
ofVec4f.__neg__ = new_instancemethod(_openframeworks.ofVec4f___neg__, None, ofVec4f)
ofVec4f.__isub__ = new_instancemethod(_openframeworks.ofVec4f___isub__, None, ofVec4f)
ofVec4f.__mul__ = new_instancemethod(_openframeworks.ofVec4f___mul__, None, ofVec4f)
ofVec4f.__imul__ = new_instancemethod(_openframeworks.ofVec4f___imul__, None, ofVec4f)
ofVec4f.getScaled = new_instancemethod(_openframeworks.ofVec4f_getScaled, None, ofVec4f)
ofVec4f.scale = new_instancemethod(_openframeworks.ofVec4f_scale, None, ofVec4f)
ofVec4f.distance = new_instancemethod(_openframeworks.ofVec4f_distance, None, ofVec4f)
ofVec4f.squareDistance = new_instancemethod(_openframeworks.ofVec4f_squareDistance, None, ofVec4f)
ofVec4f.getInterpolated = new_instancemethod(_openframeworks.ofVec4f_getInterpolated, None, ofVec4f)
ofVec4f.interpolate = new_instancemethod(_openframeworks.ofVec4f_interpolate, None, ofVec4f)
ofVec4f.getMiddle = new_instancemethod(_openframeworks.ofVec4f_getMiddle, None, ofVec4f)
ofVec4f.middle = new_instancemethod(_openframeworks.ofVec4f_middle, None, ofVec4f)
ofVec4f.average = new_instancemethod(_openframeworks.ofVec4f_average, None, ofVec4f)
ofVec4f.getNormalized = new_instancemethod(_openframeworks.ofVec4f_getNormalized, None, ofVec4f)
ofVec4f.normalize = new_instancemethod(_openframeworks.ofVec4f_normalize, None, ofVec4f)
ofVec4f.getLimited = new_instancemethod(_openframeworks.ofVec4f_getLimited, None, ofVec4f)
ofVec4f.limit = new_instancemethod(_openframeworks.ofVec4f_limit, None, ofVec4f)
ofVec4f.length = new_instancemethod(_openframeworks.ofVec4f_length, None, ofVec4f)
ofVec4f.lengthSquared = new_instancemethod(_openframeworks.ofVec4f_lengthSquared, None, ofVec4f)
ofVec4f.dot = new_instancemethod(_openframeworks.ofVec4f_dot, None, ofVec4f)
ofVec4f.vec4 = new_instancemethod(_openframeworks.ofVec4f_vec4, None, ofVec4f)
ofVec4f.__str__ = new_instancemethod(_openframeworks.ofVec4f___str__, None, ofVec4f)
ofVec4f_swigregister = _openframeworks.ofVec4f_swigregister
ofVec4f_swigregister(ofVec4f)

def ofVec4f_zero():
    return _openframeworks.ofVec4f_zero()
ofVec4f_zero = _openframeworks.ofVec4f_zero

def ofVec4f_one():
    return _openframeworks.ofVec4f_one()
ofVec4f_one = _openframeworks.ofVec4f_one


def ofGetMousePressed(button=-1):
    return _openframeworks.ofGetMousePressed(button)
ofGetMousePressed = _openframeworks.ofGetMousePressed

def ofGetKeyPressed(key=-1):
    return _openframeworks.ofGetKeyPressed(key)
ofGetKeyPressed = _openframeworks.ofGetKeyPressed

def ofGetMouseX():
    return _openframeworks.ofGetMouseX()
ofGetMouseX = _openframeworks.ofGetMouseX

def ofGetMouseY():
    return _openframeworks.ofGetMouseY()
ofGetMouseY = _openframeworks.ofGetMouseY

def ofGetPreviousMouseX():
    return _openframeworks.ofGetPreviousMouseX()
ofGetPreviousMouseX = _openframeworks.ofGetPreviousMouseX

def ofGetPreviousMouseY():
    return _openframeworks.ofGetPreviousMouseY()
ofGetPreviousMouseY = _openframeworks.ofGetPreviousMouseY
OF_KEY_RETURN = _openframeworks.OF_KEY_RETURN
OF_KEY_ESC = _openframeworks.OF_KEY_ESC
OF_KEY_TAB = _openframeworks.OF_KEY_TAB
OF_KEY_BACKSPACE = _openframeworks.OF_KEY_BACKSPACE
OF_KEY_DEL = _openframeworks.OF_KEY_DEL
OF_KEY_SHIFT = _openframeworks.OF_KEY_SHIFT
OF_KEY_CONTROL = _openframeworks.OF_KEY_CONTROL
OF_KEY_ALT = _openframeworks.OF_KEY_ALT
OF_KEY_SUPER = _openframeworks.OF_KEY_SUPER
OF_KEY_COMMAND = _openframeworks.OF_KEY_COMMAND
OF_KEY_LEFT_SHIFT = _openframeworks.OF_KEY_LEFT_SHIFT
OF_KEY_RIGHT_SHIFT = _openframeworks.OF_KEY_RIGHT_SHIFT
OF_KEY_LEFT_CONTROL = _openframeworks.OF_KEY_LEFT_CONTROL
OF_KEY_RIGHT_CONTROL = _openframeworks.OF_KEY_RIGHT_CONTROL
OF_KEY_LEFT_ALT = _openframeworks.OF_KEY_LEFT_ALT
OF_KEY_RIGHT_ALT = _openframeworks.OF_KEY_RIGHT_ALT
OF_KEY_LEFT_SUPER = _openframeworks.OF_KEY_LEFT_SUPER
OF_KEY_RIGHT_SUPER = _openframeworks.OF_KEY_RIGHT_SUPER
OF_KEY_LEFT_COMMAND = _openframeworks.OF_KEY_LEFT_COMMAND
OF_KEY_RIGHT_COMMAND = _openframeworks.OF_KEY_RIGHT_COMMAND
OF_KEY_F1 = _openframeworks.OF_KEY_F1
OF_KEY_F2 = _openframeworks.OF_KEY_F2
OF_KEY_F3 = _openframeworks.OF_KEY_F3
OF_KEY_F4 = _openframeworks.OF_KEY_F4
OF_KEY_F5 = _openframeworks.OF_KEY_F5
OF_KEY_F6 = _openframeworks.OF_KEY_F6
OF_KEY_F7 = _openframeworks.OF_KEY_F7
OF_KEY_F8 = _openframeworks.OF_KEY_F8
OF_KEY_F9 = _openframeworks.OF_KEY_F9
OF_KEY_F10 = _openframeworks.OF_KEY_F10
OF_KEY_F11 = _openframeworks.OF_KEY_F11
OF_KEY_F12 = _openframeworks.OF_KEY_F12
OF_KEY_LEFT = _openframeworks.OF_KEY_LEFT
OF_KEY_UP = _openframeworks.OF_KEY_UP
OF_KEY_RIGHT = _openframeworks.OF_KEY_RIGHT
OF_KEY_DOWN = _openframeworks.OF_KEY_DOWN
OF_KEY_PAGE_UP = _openframeworks.OF_KEY_PAGE_UP
OF_KEY_PAGE_DOWN = _openframeworks.OF_KEY_PAGE_DOWN
OF_KEY_HOME = _openframeworks.OF_KEY_HOME
OF_KEY_END = _openframeworks.OF_KEY_END
OF_KEY_INSERT = _openframeworks.OF_KEY_INSERT
OF_MOUSE_BUTTON_1 = _openframeworks.OF_MOUSE_BUTTON_1
OF_MOUSE_BUTTON_2 = _openframeworks.OF_MOUSE_BUTTON_2
OF_MOUSE_BUTTON_3 = _openframeworks.OF_MOUSE_BUTTON_3
OF_MOUSE_BUTTON_4 = _openframeworks.OF_MOUSE_BUTTON_4
OF_MOUSE_BUTTON_5 = _openframeworks.OF_MOUSE_BUTTON_5
OF_MOUSE_BUTTON_6 = _openframeworks.OF_MOUSE_BUTTON_6
OF_MOUSE_BUTTON_7 = _openframeworks.OF_MOUSE_BUTTON_7
OF_MOUSE_BUTTON_8 = _openframeworks.OF_MOUSE_BUTTON_8
OF_MOUSE_BUTTON_LAST = _openframeworks.OF_MOUSE_BUTTON_LAST
OF_MOUSE_BUTTON_LEFT = _openframeworks.OF_MOUSE_BUTTON_LEFT
OF_MOUSE_BUTTON_MIDDLE = _openframeworks.OF_MOUSE_BUTTON_MIDDLE
OF_MOUSE_BUTTON_RIGHT = _openframeworks.OF_MOUSE_BUTTON_RIGHT
class ofDragInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    files = _swig_property(_openframeworks.ofDragInfo_files_get, _openframeworks.ofDragInfo_files_set)
    position = _swig_property(_openframeworks.ofDragInfo_position_get, _openframeworks.ofDragInfo_position_set)

    def __init__(self):
        _openframeworks.ofDragInfo_swiginit(self, _openframeworks.new_ofDragInfo())
    __swig_destroy__ = _openframeworks.delete_ofDragInfo
ofDragInfo_swigregister = _openframeworks.ofDragInfo_swigregister
ofDragInfo_swigregister(ofDragInfo)

class ofTouchEventArgs(glm.vec2):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    down = _openframeworks.ofTouchEventArgs_down
    up = _openframeworks.ofTouchEventArgs_up
    move = _openframeworks.ofTouchEventArgs_move
    doubleTap = _openframeworks.ofTouchEventArgs_doubleTap
    cancel = _openframeworks.ofTouchEventArgs_cancel

    def __init__(self, *args):
        _openframeworks.ofTouchEventArgs_swiginit(self, _openframeworks.new_ofTouchEventArgs(*args))
    type = _swig_property(_openframeworks.ofTouchEventArgs_type_get, _openframeworks.ofTouchEventArgs_type_set)
    id = _swig_property(_openframeworks.ofTouchEventArgs_id_get, _openframeworks.ofTouchEventArgs_id_set)
    time = _swig_property(_openframeworks.ofTouchEventArgs_time_get, _openframeworks.ofTouchEventArgs_time_set)
    numTouches = _swig_property(_openframeworks.ofTouchEventArgs_numTouches_get, _openframeworks.ofTouchEventArgs_numTouches_set)
    width = _swig_property(_openframeworks.ofTouchEventArgs_width_get, _openframeworks.ofTouchEventArgs_width_set)
    height = _swig_property(_openframeworks.ofTouchEventArgs_height_get, _openframeworks.ofTouchEventArgs_height_set)
    angle = _swig_property(_openframeworks.ofTouchEventArgs_angle_get, _openframeworks.ofTouchEventArgs_angle_set)
    minoraxis = _swig_property(_openframeworks.ofTouchEventArgs_minoraxis_get, _openframeworks.ofTouchEventArgs_minoraxis_set)
    majoraxis = _swig_property(_openframeworks.ofTouchEventArgs_majoraxis_get, _openframeworks.ofTouchEventArgs_majoraxis_set)
    pressure = _swig_property(_openframeworks.ofTouchEventArgs_pressure_get, _openframeworks.ofTouchEventArgs_pressure_set)
    xspeed = _swig_property(_openframeworks.ofTouchEventArgs_xspeed_get, _openframeworks.ofTouchEventArgs_xspeed_set)
    yspeed = _swig_property(_openframeworks.ofTouchEventArgs_yspeed_get, _openframeworks.ofTouchEventArgs_yspeed_set)
    xaccel = _swig_property(_openframeworks.ofTouchEventArgs_xaccel_get, _openframeworks.ofTouchEventArgs_xaccel_set)
    yaccel = _swig_property(_openframeworks.ofTouchEventArgs_yaccel_get, _openframeworks.ofTouchEventArgs_yaccel_set)
    x = _swig_property(_openframeworks.ofTouchEventArgs_x_get, _openframeworks.ofTouchEventArgs_x_set)
    y = _swig_property(_openframeworks.ofTouchEventArgs_y_get, _openframeworks.ofTouchEventArgs_y_set)
    __swig_destroy__ = _openframeworks.delete_ofTouchEventArgs
ofTouchEventArgs.getX = new_instancemethod(_openframeworks.ofTouchEventArgs_getX, None, ofTouchEventArgs)
ofTouchEventArgs.getY = new_instancemethod(_openframeworks.ofTouchEventArgs_getY, None, ofTouchEventArgs)
ofTouchEventArgs.setX = new_instancemethod(_openframeworks.ofTouchEventArgs_setX, None, ofTouchEventArgs)
ofTouchEventArgs.setY = new_instancemethod(_openframeworks.ofTouchEventArgs_setY, None, ofTouchEventArgs)
ofTouchEventArgs.__str__ = new_instancemethod(_openframeworks.ofTouchEventArgs___str__, None, ofTouchEventArgs)
ofTouchEventArgs_swigregister = _openframeworks.ofTouchEventArgs_swigregister
ofTouchEventArgs_swigregister(ofTouchEventArgs)


def ofSendMessage(messageString):
    return _openframeworks.ofSendMessage(messageString)
ofSendMessage = _openframeworks.ofSendMessage
OF_TEXTURE_LUMINANCE = _openframeworks.OF_TEXTURE_LUMINANCE
OF_TEXTURE_RGB = _openframeworks.OF_TEXTURE_RGB
OF_TEXTURE_RGBA = _openframeworks.OF_TEXTURE_RGBA
OF_NEAREST = _openframeworks.OF_NEAREST
OF_LINEAR = _openframeworks.OF_LINEAR
OF_FRAGMENT_SHADER = _openframeworks.OF_FRAGMENT_SHADER
OF_VERTEX_SHADER = _openframeworks.OF_VERTEX_SHADER
OF_CLAMP_TO_EDGE = _openframeworks.OF_CLAMP_TO_EDGE
OF_CLAMP_TO_BORDER = _openframeworks.OF_CLAMP_TO_BORDER
OF_REPEAT = _openframeworks.OF_REPEAT
OF_MIRRORED_REPEAT = _openframeworks.OF_MIRRORED_REPEAT
class ofBufferObject(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _openframeworks.ofBufferObject_swiginit(self, _openframeworks.new_ofBufferObject())
    __swig_destroy__ = _openframeworks.delete_ofBufferObject
ofBufferObject.allocate = new_instancemethod(_openframeworks.ofBufferObject_allocate, None, ofBufferObject)
ofBufferObject.isAllocated = new_instancemethod(_openframeworks.ofBufferObject_isAllocated, None, ofBufferObject)
ofBufferObject.bind = new_instancemethod(_openframeworks.ofBufferObject_bind, None, ofBufferObject)
ofBufferObject.unbind = new_instancemethod(_openframeworks.ofBufferObject_unbind, None, ofBufferObject)
ofBufferObject.bindBase = new_instancemethod(_openframeworks.ofBufferObject_bindBase, None, ofBufferObject)
ofBufferObject.unbindBase = new_instancemethod(_openframeworks.ofBufferObject_unbindBase, None, ofBufferObject)
ofBufferObject.bindRange = new_instancemethod(_openframeworks.ofBufferObject_bindRange, None, ofBufferObject)
ofBufferObject.unbindRange = new_instancemethod(_openframeworks.ofBufferObject_unbindRange, None, ofBufferObject)
ofBufferObject.getId = new_instancemethod(_openframeworks.ofBufferObject_getId, None, ofBufferObject)
ofBufferObject.setData = new_instancemethod(_openframeworks.ofBufferObject_setData, None, ofBufferObject)
ofBufferObject.updateData = new_instancemethod(_openframeworks.ofBufferObject_updateData, None, ofBufferObject)
ofBufferObject.map = new_instancemethod(_openframeworks.ofBufferObject_map, None, ofBufferObject)
ofBufferObject.unmap = new_instancemethod(_openframeworks.ofBufferObject_unmap, None, ofBufferObject)
ofBufferObject.mapRange = new_instancemethod(_openframeworks.ofBufferObject_mapRange, None, ofBufferObject)
ofBufferObject.unmapRange = new_instancemethod(_openframeworks.ofBufferObject_unmapRange, None, ofBufferObject)
ofBufferObject.copyTo = new_instancemethod(_openframeworks.ofBufferObject_copyTo, None, ofBufferObject)
ofBufferObject.invalidate = new_instancemethod(_openframeworks.ofBufferObject_invalidate, None, ofBufferObject)
ofBufferObject.size = new_instancemethod(_openframeworks.ofBufferObject_size, None, ofBufferObject)
ofBufferObject_swigregister = _openframeworks.ofBufferObject_swigregister
ofBufferObject_swigregister(ofBufferObject)


def ofGetGLInternalFormat(*args):
    return _openframeworks.ofGetGLInternalFormat(*args)
ofGetGLInternalFormat = _openframeworks.ofGetGLInternalFormat

def ofGetGLInternalFormatName(glInternalFormat):
    return _openframeworks.ofGetGLInternalFormatName(glInternalFormat)
ofGetGLInternalFormatName = _openframeworks.ofGetGLInternalFormatName

def ofGetGLFormatFromInternal(gInternalFormat):
    return _openframeworks.ofGetGLFormatFromInternal(gInternalFormat)
ofGetGLFormatFromInternal = _openframeworks.ofGetGLFormatFromInternal

def ofGetGLTypeFromInternal(glInternalFormat):
    return _openframeworks.ofGetGLTypeFromInternal(glInternalFormat)
ofGetGLTypeFromInternal = _openframeworks.ofGetGLTypeFromInternal

def ofGetGLType(*args):
    return _openframeworks.ofGetGLType(*args)
ofGetGLType = _openframeworks.ofGetGLType

def ofGetImageTypeFromGLType(glType):
    return _openframeworks.ofGetImageTypeFromGLType(glType)
ofGetImageTypeFromGLType = _openframeworks.ofGetImageTypeFromGLType

def ofGetGLPolyMode(m):
    return _openframeworks.ofGetGLPolyMode(m)
ofGetGLPolyMode = _openframeworks.ofGetGLPolyMode

def ofGetOFPolyMode(m):
    return _openframeworks.ofGetOFPolyMode(m)
ofGetOFPolyMode = _openframeworks.ofGetOFPolyMode

def ofGetGLPrimitiveMode(mode):
    return _openframeworks.ofGetGLPrimitiveMode(mode)
ofGetGLPrimitiveMode = _openframeworks.ofGetGLPrimitiveMode

def ofGetOFPrimitiveMode(mode):
    return _openframeworks.ofGetOFPrimitiveMode(mode)
ofGetOFPrimitiveMode = _openframeworks.ofGetOFPrimitiveMode

def ofGetGLInternalFormatFromPixelFormat(pixelFormat):
    return _openframeworks.ofGetGLInternalFormatFromPixelFormat(pixelFormat)
ofGetGLInternalFormatFromPixelFormat = _openframeworks.ofGetGLInternalFormatFromPixelFormat

def ofGetGLFormatFromPixelFormat(pixelFormat):
    return _openframeworks.ofGetGLFormatFromPixelFormat(pixelFormat)
ofGetGLFormatFromPixelFormat = _openframeworks.ofGetGLFormatFromPixelFormat

def ofGetBytesPerChannelFromGLType(glType):
    return _openframeworks.ofGetBytesPerChannelFromGLType(glType)
ofGetBytesPerChannelFromGLType = _openframeworks.ofGetBytesPerChannelFromGLType

def ofGetNumChannelsFromGLFormat(glFormat):
    return _openframeworks.ofGetNumChannelsFromGLFormat(glFormat)
ofGetNumChannelsFromGLFormat = _openframeworks.ofGetNumChannelsFromGLFormat

def ofSetPixelStoreiAlignment(*args):
    return _openframeworks.ofSetPixelStoreiAlignment(*args)
ofSetPixelStoreiAlignment = _openframeworks.ofSetPixelStoreiAlignment

def ofGLSupportedExtensions():
    return _openframeworks.ofGLSupportedExtensions()
ofGLSupportedExtensions = _openframeworks.ofGLSupportedExtensions

def ofGLCheckExtension(searchName):
    return _openframeworks.ofGLCheckExtension(searchName)
ofGLCheckExtension = _openframeworks.ofGLCheckExtension

def ofGLSupportsNPOTTextures():
    return _openframeworks.ofGLSupportsNPOTTextures()
ofGLSupportsNPOTTextures = _openframeworks.ofGLSupportsNPOTTextures

def ofIsGLProgrammableRenderer():
    return _openframeworks.ofIsGLProgrammableRenderer()
ofIsGLProgrammableRenderer = _openframeworks.ofIsGLProgrammableRenderer

def ofGLSLVersionFromGL(major, minor):
    return _openframeworks.ofGLSLVersionFromGL(major, minor)
ofGLSLVersionFromGL = _openframeworks.ofGLSLVersionFromGL

def ofEnableGLDebugLog():
    return _openframeworks.ofEnableGLDebugLog()
ofEnableGLDebugLog = _openframeworks.ofEnableGLDebugLog

def ofDisableGLDebugLog():
    return _openframeworks.ofDisableGLDebugLog()
ofDisableGLDebugLog = _openframeworks.ofDisableGLDebugLog
OF_LIGHT_POINT = _openframeworks.OF_LIGHT_POINT
OF_LIGHT_DIRECTIONAL = _openframeworks.OF_LIGHT_DIRECTIONAL
OF_LIGHT_SPOT = _openframeworks.OF_LIGHT_SPOT
OF_LIGHT_AREA = _openframeworks.OF_LIGHT_AREA

def ofEnableLighting():
    return _openframeworks.ofEnableLighting()
ofEnableLighting = _openframeworks.ofEnableLighting

def ofDisableLighting():
    return _openframeworks.ofDisableLighting()
ofDisableLighting = _openframeworks.ofDisableLighting

def ofEnableSeparateSpecularLight():
    return _openframeworks.ofEnableSeparateSpecularLight()
ofEnableSeparateSpecularLight = _openframeworks.ofEnableSeparateSpecularLight

def ofDisableSeparateSpecularLight():
    return _openframeworks.ofDisableSeparateSpecularLight()
ofDisableSeparateSpecularLight = _openframeworks.ofDisableSeparateSpecularLight

def ofGetLightingEnabled():
    return _openframeworks.ofGetLightingEnabled()
ofGetLightingEnabled = _openframeworks.ofGetLightingEnabled

def ofSetSmoothLighting(b):
    return _openframeworks.ofSetSmoothLighting(b)
ofSetSmoothLighting = _openframeworks.ofSetSmoothLighting

def ofSetGlobalAmbientColor(c):
    return _openframeworks.ofSetGlobalAmbientColor(c)
ofSetGlobalAmbientColor = _openframeworks.ofSetGlobalAmbientColor

def ofGetGlobalAmbientColor():
    return _openframeworks.ofGetGlobalAmbientColor()
ofGetGlobalAmbientColor = _openframeworks.ofGetGlobalAmbientColor
class ofLight(ofNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _openframeworks.ofLight_swiginit(self, _openframeworks.new_ofLight())
    __swig_destroy__ = _openframeworks.delete_ofLight
ofLight.setup = new_instancemethod(_openframeworks.ofLight_setup, None, ofLight)
ofLight.enable = new_instancemethod(_openframeworks.ofLight_enable, None, ofLight)
ofLight.disable = new_instancemethod(_openframeworks.ofLight_disable, None, ofLight)
ofLight.getIsEnabled = new_instancemethod(_openframeworks.ofLight_getIsEnabled, None, ofLight)
ofLight.setDirectional = new_instancemethod(_openframeworks.ofLight_setDirectional, None, ofLight)
ofLight.getIsDirectional = new_instancemethod(_openframeworks.ofLight_getIsDirectional, None, ofLight)
ofLight.setSpotlight = new_instancemethod(_openframeworks.ofLight_setSpotlight, None, ofLight)
ofLight.getIsSpotlight = new_instancemethod(_openframeworks.ofLight_getIsSpotlight, None, ofLight)
ofLight.setSpotlightCutOff = new_instancemethod(_openframeworks.ofLight_setSpotlightCutOff, None, ofLight)
ofLight.getSpotlightCutOff = new_instancemethod(_openframeworks.ofLight_getSpotlightCutOff, None, ofLight)
ofLight.setSpotConcentration = new_instancemethod(_openframeworks.ofLight_setSpotConcentration, None, ofLight)
ofLight.getSpotConcentration = new_instancemethod(_openframeworks.ofLight_getSpotConcentration, None, ofLight)
ofLight.setPointLight = new_instancemethod(_openframeworks.ofLight_setPointLight, None, ofLight)
ofLight.getIsPointLight = new_instancemethod(_openframeworks.ofLight_getIsPointLight, None, ofLight)
ofLight.setAttenuation = new_instancemethod(_openframeworks.ofLight_setAttenuation, None, ofLight)
ofLight.getAttenuationConstant = new_instancemethod(_openframeworks.ofLight_getAttenuationConstant, None, ofLight)
ofLight.getAttenuationLinear = new_instancemethod(_openframeworks.ofLight_getAttenuationLinear, None, ofLight)
ofLight.getAttenuationQuadratic = new_instancemethod(_openframeworks.ofLight_getAttenuationQuadratic, None, ofLight)
ofLight.setAreaLight = new_instancemethod(_openframeworks.ofLight_setAreaLight, None, ofLight)
ofLight.getIsAreaLight = new_instancemethod(_openframeworks.ofLight_getIsAreaLight, None, ofLight)
ofLight.getType = new_instancemethod(_openframeworks.ofLight_getType, None, ofLight)
ofLight.setAmbientColor = new_instancemethod(_openframeworks.ofLight_setAmbientColor, None, ofLight)
ofLight.setDiffuseColor = new_instancemethod(_openframeworks.ofLight_setDiffuseColor, None, ofLight)
ofLight.setSpecularColor = new_instancemethod(_openframeworks.ofLight_setSpecularColor, None, ofLight)
ofLight.getAmbientColor = new_instancemethod(_openframeworks.ofLight_getAmbientColor, None, ofLight)
ofLight.getDiffuseColor = new_instancemethod(_openframeworks.ofLight_getDiffuseColor, None, ofLight)
ofLight.getSpecularColor = new_instancemethod(_openframeworks.ofLight_getSpecularColor, None, ofLight)
ofLight.getLightID = new_instancemethod(_openframeworks.ofLight_getLightID, None, ofLight)
ofLight_swigregister = _openframeworks.ofLight_swigregister
ofLight_swigregister(ofLight)

class ofMaterial(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _openframeworks.ofMaterial_swiginit(self, _openframeworks.new_ofMaterial())
    __swig_destroy__ = _openframeworks.delete_ofMaterial
ofMaterial.setup = new_instancemethod(_openframeworks.ofMaterial_setup, None, ofMaterial)
ofMaterial.setColors = new_instancemethod(_openframeworks.ofMaterial_setColors, None, ofMaterial)
ofMaterial.setDiffuseColor = new_instancemethod(_openframeworks.ofMaterial_setDiffuseColor, None, ofMaterial)
ofMaterial.setAmbientColor = new_instancemethod(_openframeworks.ofMaterial_setAmbientColor, None, ofMaterial)
ofMaterial.setSpecularColor = new_instancemethod(_openframeworks.ofMaterial_setSpecularColor, None, ofMaterial)
ofMaterial.setEmissiveColor = new_instancemethod(_openframeworks.ofMaterial_setEmissiveColor, None, ofMaterial)
ofMaterial.setShininess = new_instancemethod(_openframeworks.ofMaterial_setShininess, None, ofMaterial)
ofMaterial.getDiffuseColor = new_instancemethod(_openframeworks.ofMaterial_getDiffuseColor, None, ofMaterial)
ofMaterial.getAmbientColor = new_instancemethod(_openframeworks.ofMaterial_getAmbientColor, None, ofMaterial)
ofMaterial.getSpecularColor = new_instancemethod(_openframeworks.ofMaterial_getSpecularColor, None, ofMaterial)
ofMaterial.getEmissiveColor = new_instancemethod(_openframeworks.ofMaterial_getEmissiveColor, None, ofMaterial)
ofMaterial.getShininess = new_instancemethod(_openframeworks.ofMaterial_getShininess, None, ofMaterial)
ofMaterial.getSettings = new_instancemethod(_openframeworks.ofMaterial_getSettings, None, ofMaterial)
ofMaterial.begin = new_instancemethod(_openframeworks.ofMaterial_begin, None, ofMaterial)
ofMaterial.end = new_instancemethod(_openframeworks.ofMaterial_end, None, ofMaterial)
ofMaterial.setCustomUniform1f = new_instancemethod(_openframeworks.ofMaterial_setCustomUniform1f, None, ofMaterial)
ofMaterial.setCustomUniform2f = new_instancemethod(_openframeworks.ofMaterial_setCustomUniform2f, None, ofMaterial)
ofMaterial.setCustomUniform3f = new_instancemethod(_openframeworks.ofMaterial_setCustomUniform3f, None, ofMaterial)
ofMaterial.setCustomUniform4f = new_instancemethod(_openframeworks.ofMaterial_setCustomUniform4f, None, ofMaterial)
ofMaterial.setCustomUniformMatrix4f = new_instancemethod(_openframeworks.ofMaterial_setCustomUniformMatrix4f, None, ofMaterial)
ofMaterial.setCustomUniformMatrix3f = new_instancemethod(_openframeworks.ofMaterial_setCustomUniformMatrix3f, None, ofMaterial)
ofMaterial.setCustomUniform1i = new_instancemethod(_openframeworks.ofMaterial_setCustomUniform1i, None, ofMaterial)
ofMaterial.setCustomUniform2i = new_instancemethod(_openframeworks.ofMaterial_setCustomUniform2i, None, ofMaterial)
ofMaterial.setCustomUniform3i = new_instancemethod(_openframeworks.ofMaterial_setCustomUniform3i, None, ofMaterial)
ofMaterial.setCustomUniform4i = new_instancemethod(_openframeworks.ofMaterial_setCustomUniform4i, None, ofMaterial)
ofMaterial.setCustomUniformTexture = new_instancemethod(_openframeworks.ofMaterial_setCustomUniformTexture, None, ofMaterial)
ofMaterial_swigregister = _openframeworks.ofMaterial_swigregister
ofMaterial_swigregister(ofMaterial)

class ofShader(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofShader

    def __init__(self, *args):
        _openframeworks.ofShader_swiginit(self, _openframeworks.new_ofShader(*args))
ofShader.load = new_instancemethod(_openframeworks.ofShader_load, None, ofShader)
ofShader.setup = new_instancemethod(_openframeworks.ofShader_setup, None, ofShader)
ofShader.setGeometryInputType = new_instancemethod(_openframeworks.ofShader_setGeometryInputType, None, ofShader)
ofShader.setGeometryOutputType = new_instancemethod(_openframeworks.ofShader_setGeometryOutputType, None, ofShader)
ofShader.setGeometryOutputCount = new_instancemethod(_openframeworks.ofShader_setGeometryOutputCount, None, ofShader)
ofShader.getGeometryMaxOutputCount = new_instancemethod(_openframeworks.ofShader_getGeometryMaxOutputCount, None, ofShader)
ofShader.unload = new_instancemethod(_openframeworks.ofShader_unload, None, ofShader)
ofShader.isLoaded = new_instancemethod(_openframeworks.ofShader_isLoaded, None, ofShader)
ofShader.begin = new_instancemethod(_openframeworks.ofShader_begin, None, ofShader)
ofShader.end = new_instancemethod(_openframeworks.ofShader_end, None, ofShader)
ofShader.setUniformTexture = new_instancemethod(_openframeworks.ofShader_setUniformTexture, None, ofShader)
ofShader.setUniform1i = new_instancemethod(_openframeworks.ofShader_setUniform1i, None, ofShader)
ofShader.setUniform2i = new_instancemethod(_openframeworks.ofShader_setUniform2i, None, ofShader)
ofShader.setUniform3i = new_instancemethod(_openframeworks.ofShader_setUniform3i, None, ofShader)
ofShader.setUniform4i = new_instancemethod(_openframeworks.ofShader_setUniform4i, None, ofShader)
ofShader.setUniform1f = new_instancemethod(_openframeworks.ofShader_setUniform1f, None, ofShader)
ofShader.setUniform2f = new_instancemethod(_openframeworks.ofShader_setUniform2f, None, ofShader)
ofShader.setUniform3f = new_instancemethod(_openframeworks.ofShader_setUniform3f, None, ofShader)
ofShader.setUniform4f = new_instancemethod(_openframeworks.ofShader_setUniform4f, None, ofShader)
ofShader.setUniform1iv = new_instancemethod(_openframeworks.ofShader_setUniform1iv, None, ofShader)
ofShader.setUniform2iv = new_instancemethod(_openframeworks.ofShader_setUniform2iv, None, ofShader)
ofShader.setUniform3iv = new_instancemethod(_openframeworks.ofShader_setUniform3iv, None, ofShader)
ofShader.setUniform4iv = new_instancemethod(_openframeworks.ofShader_setUniform4iv, None, ofShader)
ofShader.setUniform1fv = new_instancemethod(_openframeworks.ofShader_setUniform1fv, None, ofShader)
ofShader.setUniform2fv = new_instancemethod(_openframeworks.ofShader_setUniform2fv, None, ofShader)
ofShader.setUniform3fv = new_instancemethod(_openframeworks.ofShader_setUniform3fv, None, ofShader)
ofShader.setUniform4fv = new_instancemethod(_openframeworks.ofShader_setUniform4fv, None, ofShader)
ofShader.setUniforms = new_instancemethod(_openframeworks.ofShader_setUniforms, None, ofShader)
ofShader.setUniformMatrix3f = new_instancemethod(_openframeworks.ofShader_setUniformMatrix3f, None, ofShader)
ofShader.setUniformMatrix4f = new_instancemethod(_openframeworks.ofShader_setUniformMatrix4f, None, ofShader)
ofShader.getUniformLocation = new_instancemethod(_openframeworks.ofShader_getUniformLocation, None, ofShader)
ofShader.getAttributeLocation = new_instancemethod(_openframeworks.ofShader_getAttributeLocation, None, ofShader)
ofShader.setAttribute1s = new_instancemethod(_openframeworks.ofShader_setAttribute1s, None, ofShader)
ofShader.setAttribute2s = new_instancemethod(_openframeworks.ofShader_setAttribute2s, None, ofShader)
ofShader.setAttribute3s = new_instancemethod(_openframeworks.ofShader_setAttribute3s, None, ofShader)
ofShader.setAttribute4s = new_instancemethod(_openframeworks.ofShader_setAttribute4s, None, ofShader)
ofShader.setAttribute1f = new_instancemethod(_openframeworks.ofShader_setAttribute1f, None, ofShader)
ofShader.setAttribute2f = new_instancemethod(_openframeworks.ofShader_setAttribute2f, None, ofShader)
ofShader.setAttribute3f = new_instancemethod(_openframeworks.ofShader_setAttribute3f, None, ofShader)
ofShader.setAttribute4f = new_instancemethod(_openframeworks.ofShader_setAttribute4f, None, ofShader)
ofShader.setAttribute1d = new_instancemethod(_openframeworks.ofShader_setAttribute1d, None, ofShader)
ofShader.setAttribute2d = new_instancemethod(_openframeworks.ofShader_setAttribute2d, None, ofShader)
ofShader.setAttribute3d = new_instancemethod(_openframeworks.ofShader_setAttribute3d, None, ofShader)
ofShader.setAttribute4d = new_instancemethod(_openframeworks.ofShader_setAttribute4d, None, ofShader)
ofShader.setAttribute1fv = new_instancemethod(_openframeworks.ofShader_setAttribute1fv, None, ofShader)
ofShader.setAttribute2fv = new_instancemethod(_openframeworks.ofShader_setAttribute2fv, None, ofShader)
ofShader.setAttribute3fv = new_instancemethod(_openframeworks.ofShader_setAttribute3fv, None, ofShader)
ofShader.setAttribute4fv = new_instancemethod(_openframeworks.ofShader_setAttribute4fv, None, ofShader)
ofShader.bindAttribute = new_instancemethod(_openframeworks.ofShader_bindAttribute, None, ofShader)
ofShader.printActiveUniforms = new_instancemethod(_openframeworks.ofShader_printActiveUniforms, None, ofShader)
ofShader.printActiveAttributes = new_instancemethod(_openframeworks.ofShader_printActiveAttributes, None, ofShader)
ofShader.setupShaderFromSource = new_instancemethod(_openframeworks.ofShader_setupShaderFromSource, None, ofShader)
ofShader.setupShaderFromFile = new_instancemethod(_openframeworks.ofShader_setupShaderFromFile, None, ofShader)
ofShader.linkProgram = new_instancemethod(_openframeworks.ofShader_linkProgram, None, ofShader)
ofShader.bindDefaults = new_instancemethod(_openframeworks.ofShader_bindDefaults, None, ofShader)
ofShader.getProgram = new_instancemethod(_openframeworks.ofShader_getProgram, None, ofShader)
ofShader.getShader = new_instancemethod(_openframeworks.ofShader_getShader, None, ofShader)
ofShader.__eq__ = new_instancemethod(_openframeworks.ofShader___eq__, None, ofShader)
ofShader.__ne__ = new_instancemethod(_openframeworks.ofShader___ne__, None, ofShader)
ofShader.getShaderSource = new_instancemethod(_openframeworks.ofShader_getShaderSource, None, ofShader)
ofShader_swigregister = _openframeworks.ofShader_swigregister
ofShader_swigregister(ofShader)

class ofVbo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openframeworks.ofVbo_swiginit(self, _openframeworks.new_ofVbo(*args))
    __swig_destroy__ = _openframeworks.delete_ofVbo
ofVbo.setMesh = new_instancemethod(_openframeworks.ofVbo_setMesh, None, ofVbo)
ofVbo.setIndexData = new_instancemethod(_openframeworks.ofVbo_setIndexData, None, ofVbo)
ofVbo.setVertexData = new_instancemethod(_openframeworks.ofVbo_setVertexData, None, ofVbo)
ofVbo.setColorData = new_instancemethod(_openframeworks.ofVbo_setColorData, None, ofVbo)
ofVbo.setNormalData = new_instancemethod(_openframeworks.ofVbo_setNormalData, None, ofVbo)
ofVbo.setTexCoordData = new_instancemethod(_openframeworks.ofVbo_setTexCoordData, None, ofVbo)
ofVbo.setAttributeData = new_instancemethod(_openframeworks.ofVbo_setAttributeData, None, ofVbo)
ofVbo.setAttributeDivisor = new_instancemethod(_openframeworks.ofVbo_setAttributeDivisor, None, ofVbo)
ofVbo.setVertexBuffer = new_instancemethod(_openframeworks.ofVbo_setVertexBuffer, None, ofVbo)
ofVbo.setColorBuffer = new_instancemethod(_openframeworks.ofVbo_setColorBuffer, None, ofVbo)
ofVbo.setNormalBuffer = new_instancemethod(_openframeworks.ofVbo_setNormalBuffer, None, ofVbo)
ofVbo.setTexCoordBuffer = new_instancemethod(_openframeworks.ofVbo_setTexCoordBuffer, None, ofVbo)
ofVbo.setIndexBuffer = new_instancemethod(_openframeworks.ofVbo_setIndexBuffer, None, ofVbo)
ofVbo.setAttributeBuffer = new_instancemethod(_openframeworks.ofVbo_setAttributeBuffer, None, ofVbo)
ofVbo.getVertexBuffer = new_instancemethod(_openframeworks.ofVbo_getVertexBuffer, None, ofVbo)
ofVbo.getColorBuffer = new_instancemethod(_openframeworks.ofVbo_getColorBuffer, None, ofVbo)
ofVbo.getNormalBuffer = new_instancemethod(_openframeworks.ofVbo_getNormalBuffer, None, ofVbo)
ofVbo.getTexCoordBuffer = new_instancemethod(_openframeworks.ofVbo_getTexCoordBuffer, None, ofVbo)
ofVbo.getIndexBuffer = new_instancemethod(_openframeworks.ofVbo_getIndexBuffer, None, ofVbo)
ofVbo.getAttributeBuffer = new_instancemethod(_openframeworks.ofVbo_getAttributeBuffer, None, ofVbo)
ofVbo.updateMesh = new_instancemethod(_openframeworks.ofVbo_updateMesh, None, ofVbo)
ofVbo.updateIndexData = new_instancemethod(_openframeworks.ofVbo_updateIndexData, None, ofVbo)
ofVbo.updateVertexData = new_instancemethod(_openframeworks.ofVbo_updateVertexData, None, ofVbo)
ofVbo.updateColorData = new_instancemethod(_openframeworks.ofVbo_updateColorData, None, ofVbo)
ofVbo.updateNormalData = new_instancemethod(_openframeworks.ofVbo_updateNormalData, None, ofVbo)
ofVbo.updateTexCoordData = new_instancemethod(_openframeworks.ofVbo_updateTexCoordData, None, ofVbo)
ofVbo.updateAttributeData = new_instancemethod(_openframeworks.ofVbo_updateAttributeData, None, ofVbo)
ofVbo.enableColors = new_instancemethod(_openframeworks.ofVbo_enableColors, None, ofVbo)
ofVbo.enableNormals = new_instancemethod(_openframeworks.ofVbo_enableNormals, None, ofVbo)
ofVbo.enableTexCoords = new_instancemethod(_openframeworks.ofVbo_enableTexCoords, None, ofVbo)
ofVbo.enableIndices = new_instancemethod(_openframeworks.ofVbo_enableIndices, None, ofVbo)
ofVbo.disableColors = new_instancemethod(_openframeworks.ofVbo_disableColors, None, ofVbo)
ofVbo.disableNormals = new_instancemethod(_openframeworks.ofVbo_disableNormals, None, ofVbo)
ofVbo.disableTexCoords = new_instancemethod(_openframeworks.ofVbo_disableTexCoords, None, ofVbo)
ofVbo.disableIndices = new_instancemethod(_openframeworks.ofVbo_disableIndices, None, ofVbo)
ofVbo.getVaoId = new_instancemethod(_openframeworks.ofVbo_getVaoId, None, ofVbo)
ofVbo.getVertId = new_instancemethod(_openframeworks.ofVbo_getVertId, None, ofVbo)
ofVbo.getColorId = new_instancemethod(_openframeworks.ofVbo_getColorId, None, ofVbo)
ofVbo.getNormalId = new_instancemethod(_openframeworks.ofVbo_getNormalId, None, ofVbo)
ofVbo.getTexCoordId = new_instancemethod(_openframeworks.ofVbo_getTexCoordId, None, ofVbo)
ofVbo.getIndexId = new_instancemethod(_openframeworks.ofVbo_getIndexId, None, ofVbo)
ofVbo.getAttributeId = new_instancemethod(_openframeworks.ofVbo_getAttributeId, None, ofVbo)
ofVbo.getIsAllocated = new_instancemethod(_openframeworks.ofVbo_getIsAllocated, None, ofVbo)
ofVbo.getUsingVerts = new_instancemethod(_openframeworks.ofVbo_getUsingVerts, None, ofVbo)
ofVbo.getUsingColors = new_instancemethod(_openframeworks.ofVbo_getUsingColors, None, ofVbo)
ofVbo.getUsingNormals = new_instancemethod(_openframeworks.ofVbo_getUsingNormals, None, ofVbo)
ofVbo.getUsingTexCoords = new_instancemethod(_openframeworks.ofVbo_getUsingTexCoords, None, ofVbo)
ofVbo.getUsingIndices = new_instancemethod(_openframeworks.ofVbo_getUsingIndices, None, ofVbo)
ofVbo.draw = new_instancemethod(_openframeworks.ofVbo_draw, None, ofVbo)
ofVbo.drawElements = new_instancemethod(_openframeworks.ofVbo_drawElements, None, ofVbo)
ofVbo.drawInstanced = new_instancemethod(_openframeworks.ofVbo_drawInstanced, None, ofVbo)
ofVbo.drawElementsInstanced = new_instancemethod(_openframeworks.ofVbo_drawElementsInstanced, None, ofVbo)
ofVbo.bind = new_instancemethod(_openframeworks.ofVbo_bind, None, ofVbo)
ofVbo.unbind = new_instancemethod(_openframeworks.ofVbo_unbind, None, ofVbo)
ofVbo.clear = new_instancemethod(_openframeworks.ofVbo_clear, None, ofVbo)
ofVbo.clearVertices = new_instancemethod(_openframeworks.ofVbo_clearVertices, None, ofVbo)
ofVbo.clearNormals = new_instancemethod(_openframeworks.ofVbo_clearNormals, None, ofVbo)
ofVbo.clearColors = new_instancemethod(_openframeworks.ofVbo_clearColors, None, ofVbo)
ofVbo.clearTexCoords = new_instancemethod(_openframeworks.ofVbo_clearTexCoords, None, ofVbo)
ofVbo.clearIndices = new_instancemethod(_openframeworks.ofVbo_clearIndices, None, ofVbo)
ofVbo.clearAttribute = new_instancemethod(_openframeworks.ofVbo_clearAttribute, None, ofVbo)
ofVbo.getNumVertices = new_instancemethod(_openframeworks.ofVbo_getNumVertices, None, ofVbo)
ofVbo.getNumIndices = new_instancemethod(_openframeworks.ofVbo_getNumIndices, None, ofVbo)
ofVbo.hasAttribute = new_instancemethod(_openframeworks.ofVbo_hasAttribute, None, ofVbo)
ofVbo_swigregister = _openframeworks.ofVbo_swigregister
ofVbo_swigregister(ofVbo)

class ofVboMesh(ofMesh):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openframeworks.ofVboMesh_swiginit(self, _openframeworks.new_ofVboMesh(*args))
    __swig_destroy__ = _openframeworks.delete_ofVboMesh
ofVboMesh.setUsage = new_instancemethod(_openframeworks.ofVboMesh_setUsage, None, ofVboMesh)
ofVboMesh.draw = new_instancemethod(_openframeworks.ofVboMesh_draw, None, ofVboMesh)
ofVboMesh.drawInstanced = new_instancemethod(_openframeworks.ofVboMesh_drawInstanced, None, ofVboMesh)
ofVboMesh.getVbo = new_instancemethod(_openframeworks.ofVboMesh_getVbo, None, ofVboMesh)
ofVboMesh_swigregister = _openframeworks.ofVboMesh_swigregister
ofVboMesh_swigregister(ofVboMesh)

OF_MESH_POINTS = _openframeworks.OF_MESH_POINTS
OF_MESH_WIREFRAME = _openframeworks.OF_MESH_WIREFRAME
OF_MESH_FILL = _openframeworks.OF_MESH_FILL
OF_PRIMITIVE_TRIANGLES = _openframeworks.OF_PRIMITIVE_TRIANGLES
OF_PRIMITIVE_TRIANGLE_STRIP = _openframeworks.OF_PRIMITIVE_TRIANGLE_STRIP
OF_PRIMITIVE_TRIANGLE_FAN = _openframeworks.OF_PRIMITIVE_TRIANGLE_FAN
OF_PRIMITIVE_LINES = _openframeworks.OF_PRIMITIVE_LINES
OF_PRIMITIVE_LINE_STRIP = _openframeworks.OF_PRIMITIVE_LINE_STRIP
OF_PRIMITIVE_LINE_LOOP = _openframeworks.OF_PRIMITIVE_LINE_LOOP
OF_PRIMITIVE_POINTS = _openframeworks.OF_PRIMITIVE_POINTS
OF_PRIMITIVE_LINES_ADJACENCY = _openframeworks.OF_PRIMITIVE_LINES_ADJACENCY
OF_PRIMITIVE_LINE_STRIP_ADJACENCY = _openframeworks.OF_PRIMITIVE_LINE_STRIP_ADJACENCY
OF_PRIMITIVE_TRIANGLES_ADJACENCY = _openframeworks.OF_PRIMITIVE_TRIANGLES_ADJACENCY
OF_PRIMITIVE_TRIANGLE_STRIP_ADJACENCY = _openframeworks.OF_PRIMITIVE_TRIANGLE_STRIP_ADJACENCY
OF_PRIMITIVE_PATCHES = _openframeworks.OF_PRIMITIVE_PATCHES
OF_OUTLINE = _openframeworks.OF_OUTLINE
OF_FILLED = _openframeworks.OF_FILLED
OF_MAX_STYLE_HISTORY = _openframeworks.OF_MAX_STYLE_HISTORY
OF_MAX_VIEWPORT_HISTORY = _openframeworks.OF_MAX_VIEWPORT_HISTORY
OF_MAX_CIRCLE_PTS = _openframeworks.OF_MAX_CIRCLE_PTS
OF_BLENDMODE_DISABLED = _openframeworks.OF_BLENDMODE_DISABLED
OF_BLENDMODE_ALPHA = _openframeworks.OF_BLENDMODE_ALPHA
OF_BLENDMODE_ADD = _openframeworks.OF_BLENDMODE_ADD
OF_BLENDMODE_SUBTRACT = _openframeworks.OF_BLENDMODE_SUBTRACT
OF_BLENDMODE_MULTIPLY = _openframeworks.OF_BLENDMODE_MULTIPLY
OF_BLENDMODE_SCREEN = _openframeworks.OF_BLENDMODE_SCREEN
OF_GRADIENT_LINEAR = _openframeworks.OF_GRADIENT_LINEAR
OF_GRADIENT_CIRCULAR = _openframeworks.OF_GRADIENT_CIRCULAR
OF_GRADIENT_BAR = _openframeworks.OF_GRADIENT_BAR
OF_POLY_WINDING_ODD = _openframeworks.OF_POLY_WINDING_ODD
OF_POLY_WINDING_NONZERO = _openframeworks.OF_POLY_WINDING_NONZERO
OF_POLY_WINDING_POSITIVE = _openframeworks.OF_POLY_WINDING_POSITIVE
OF_POLY_WINDING_NEGATIVE = _openframeworks.OF_POLY_WINDING_NEGATIVE
OF_POLY_WINDING_ABS_GEQ_TWO = _openframeworks.OF_POLY_WINDING_ABS_GEQ_TWO
OF_LEFT_HANDED = _openframeworks.OF_LEFT_HANDED
OF_RIGHT_HANDED = _openframeworks.OF_RIGHT_HANDED
OF_MATRIX_MODELVIEW = _openframeworks.OF_MATRIX_MODELVIEW
OF_MATRIX_PROJECTION = _openframeworks.OF_MATRIX_PROJECTION
OF_MATRIX_TEXTURE = _openframeworks.OF_MATRIX_TEXTURE
OF_BITMAPMODE_SIMPLE = _openframeworks.OF_BITMAPMODE_SIMPLE
OF_BITMAPMODE_SCREEN = _openframeworks.OF_BITMAPMODE_SCREEN
OF_BITMAPMODE_VIEWPORT = _openframeworks.OF_BITMAPMODE_VIEWPORT
OF_BITMAPMODE_MODEL = _openframeworks.OF_BITMAPMODE_MODEL
OF_BITMAPMODE_MODEL_BILLBOARD = _openframeworks.OF_BITMAPMODE_MODEL_BILLBOARD
OF_RECTMODE_CORNER = _openframeworks.OF_RECTMODE_CORNER
OF_RECTMODE_CENTER = _openframeworks.OF_RECTMODE_CENTER
OF_IMAGE_GRAYSCALE = _openframeworks.OF_IMAGE_GRAYSCALE
OF_IMAGE_COLOR = _openframeworks.OF_IMAGE_COLOR
OF_IMAGE_COLOR_ALPHA = _openframeworks.OF_IMAGE_COLOR_ALPHA
OF_IMAGE_UNDEFINED = _openframeworks.OF_IMAGE_UNDEFINED
OF_INTERPOLATE_NEAREST_NEIGHBOR = _openframeworks.OF_INTERPOLATE_NEAREST_NEIGHBOR
OF_INTERPOLATE_BILINEAR = _openframeworks.OF_INTERPOLATE_BILINEAR
OF_INTERPOLATE_BICUBIC = _openframeworks.OF_INTERPOLATE_BICUBIC
OF_PIXELS_GRAY = _openframeworks.OF_PIXELS_GRAY
OF_PIXELS_GRAY_ALPHA = _openframeworks.OF_PIXELS_GRAY_ALPHA
OF_PIXELS_RGB = _openframeworks.OF_PIXELS_RGB
OF_PIXELS_BGR = _openframeworks.OF_PIXELS_BGR
OF_PIXELS_RGBA = _openframeworks.OF_PIXELS_RGBA
OF_PIXELS_BGRA = _openframeworks.OF_PIXELS_BGRA
OF_PIXELS_RGB565 = _openframeworks.OF_PIXELS_RGB565
OF_PIXELS_NV12 = _openframeworks.OF_PIXELS_NV12
OF_PIXELS_NV21 = _openframeworks.OF_PIXELS_NV21
OF_PIXELS_YV12 = _openframeworks.OF_PIXELS_YV12
OF_PIXELS_I420 = _openframeworks.OF_PIXELS_I420
OF_PIXELS_YUY2 = _openframeworks.OF_PIXELS_YUY2
OF_PIXELS_UYVY = _openframeworks.OF_PIXELS_UYVY
OF_PIXELS_Y = _openframeworks.OF_PIXELS_Y
OF_PIXELS_U = _openframeworks.OF_PIXELS_U
OF_PIXELS_V = _openframeworks.OF_PIXELS_V
OF_PIXELS_UV = _openframeworks.OF_PIXELS_UV
OF_PIXELS_VU = _openframeworks.OF_PIXELS_VU
OF_PIXELS_NUM_FORMATS = _openframeworks.OF_PIXELS_NUM_FORMATS
OF_PIXELS_UNKNOWN = _openframeworks.OF_PIXELS_UNKNOWN
OF_PIXELS_NATIVE = _openframeworks.OF_PIXELS_NATIVE
class ofPixels(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofPixels

    def __init__(self, *args):
        _openframeworks.ofPixels_swiginit(self, _openframeworks.new_ofPixels(*args))
ofPixels.allocate = new_instancemethod(_openframeworks.ofPixels_allocate, None, ofPixels)
ofPixels.allocatePixelFormat = new_instancemethod(_openframeworks.ofPixels_allocatePixelFormat, None, ofPixels)
ofPixels.allocateImageType = new_instancemethod(_openframeworks.ofPixels_allocateImageType, None, ofPixels)
ofPixels.isAllocated = new_instancemethod(_openframeworks.ofPixels_isAllocated, None, ofPixels)
ofPixels.clear = new_instancemethod(_openframeworks.ofPixels_clear, None, ofPixels)
ofPixels.set = new_instancemethod(_openframeworks.ofPixels_set, None, ofPixels)
ofPixels.setFromPixels = new_instancemethod(_openframeworks.ofPixels_setFromPixels, None, ofPixels)
ofPixels.setFromPixelsImageType = new_instancemethod(_openframeworks.ofPixels_setFromPixelsImageType, None, ofPixels)
ofPixels.setFromExternalPixels = new_instancemethod(_openframeworks.ofPixels_setFromExternalPixels, None, ofPixels)
ofPixels.setFromAlignedPixels = new_instancemethod(_openframeworks.ofPixels_setFromAlignedPixels, None, ofPixels)
ofPixels.swap = new_instancemethod(_openframeworks.ofPixels_swap, None, ofPixels)
ofPixels.crop = new_instancemethod(_openframeworks.ofPixels_crop, None, ofPixels)
ofPixels.cropTo = new_instancemethod(_openframeworks.ofPixels_cropTo, None, ofPixels)
ofPixels.rotate90 = new_instancemethod(_openframeworks.ofPixels_rotate90, None, ofPixels)
ofPixels.rotate90To = new_instancemethod(_openframeworks.ofPixels_rotate90To, None, ofPixels)
ofPixels.mirrorTo = new_instancemethod(_openframeworks.ofPixels_mirrorTo, None, ofPixels)
ofPixels.mirror = new_instancemethod(_openframeworks.ofPixels_mirror, None, ofPixels)
ofPixels.resize = new_instancemethod(_openframeworks.ofPixels_resize, None, ofPixels)
ofPixels.resizeTo = new_instancemethod(_openframeworks.ofPixels_resizeTo, None, ofPixels)
ofPixels.pasteInto = new_instancemethod(_openframeworks.ofPixels_pasteInto, None, ofPixels)
ofPixels.blendInto = new_instancemethod(_openframeworks.ofPixels_blendInto, None, ofPixels)
ofPixels.swapRgb = new_instancemethod(_openframeworks.ofPixels_swapRgb, None, ofPixels)
ofPixels.getData = new_instancemethod(_openframeworks.ofPixels_getData, None, ofPixels)
ofPixels.getPixelIndex = new_instancemethod(_openframeworks.ofPixels_getPixelIndex, None, ofPixels)
ofPixels.getColor = new_instancemethod(_openframeworks.ofPixels_getColor, None, ofPixels)
ofPixels.setColor = new_instancemethod(_openframeworks.ofPixels_setColor, None, ofPixels)
ofPixels.__getitem__ = new_instancemethod(_openframeworks.ofPixels___getitem__, None, ofPixels)
ofPixels.getWidth = new_instancemethod(_openframeworks.ofPixels_getWidth, None, ofPixels)
ofPixels.getHeight = new_instancemethod(_openframeworks.ofPixels_getHeight, None, ofPixels)
ofPixels.getBytesPerPixel = new_instancemethod(_openframeworks.ofPixels_getBytesPerPixel, None, ofPixels)
ofPixels.getBitsPerPixel = new_instancemethod(_openframeworks.ofPixels_getBitsPerPixel, None, ofPixels)
ofPixels.getBytesPerChannel = new_instancemethod(_openframeworks.ofPixels_getBytesPerChannel, None, ofPixels)
ofPixels.getBitsPerChannel = new_instancemethod(_openframeworks.ofPixels_getBitsPerChannel, None, ofPixels)
ofPixels.getBytesStride = new_instancemethod(_openframeworks.ofPixels_getBytesStride, None, ofPixels)
ofPixels.getNumChannels = new_instancemethod(_openframeworks.ofPixels_getNumChannels, None, ofPixels)
ofPixels.getTotalBytes = new_instancemethod(_openframeworks.ofPixels_getTotalBytes, None, ofPixels)
ofPixels.getNumPlanes = new_instancemethod(_openframeworks.ofPixels_getNumPlanes, None, ofPixels)
ofPixels.getPlane = new_instancemethod(_openframeworks.ofPixels_getPlane, None, ofPixels)
ofPixels.getChannel = new_instancemethod(_openframeworks.ofPixels_getChannel, None, ofPixels)
ofPixels.getPixelFormat = new_instancemethod(_openframeworks.ofPixels_getPixelFormat, None, ofPixels)
ofPixels.size = new_instancemethod(_openframeworks.ofPixels_size, None, ofPixels)
ofPixels.getImageType = new_instancemethod(_openframeworks.ofPixels_getImageType, None, ofPixels)
ofPixels.setChannel = new_instancemethod(_openframeworks.ofPixels_setChannel, None, ofPixels)
ofPixels.setImageType = new_instancemethod(_openframeworks.ofPixels_setImageType, None, ofPixels)
ofPixels.setNumChannels = new_instancemethod(_openframeworks.ofPixels_setNumChannels, None, ofPixels)
ofPixels_swigregister = _openframeworks.ofPixels_swigregister
ofPixels_swigregister(ofPixels)

class ofFloatPixels(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofFloatPixels

    def __init__(self, *args):
        _openframeworks.ofFloatPixels_swiginit(self, _openframeworks.new_ofFloatPixels(*args))
ofFloatPixels.allocate = new_instancemethod(_openframeworks.ofFloatPixels_allocate, None, ofFloatPixels)
ofFloatPixels.allocatePixelFormat = new_instancemethod(_openframeworks.ofFloatPixels_allocatePixelFormat, None, ofFloatPixels)
ofFloatPixels.allocateImageType = new_instancemethod(_openframeworks.ofFloatPixels_allocateImageType, None, ofFloatPixels)
ofFloatPixels.isAllocated = new_instancemethod(_openframeworks.ofFloatPixels_isAllocated, None, ofFloatPixels)
ofFloatPixels.clear = new_instancemethod(_openframeworks.ofFloatPixels_clear, None, ofFloatPixels)
ofFloatPixels.set = new_instancemethod(_openframeworks.ofFloatPixels_set, None, ofFloatPixels)
ofFloatPixels.setFromPixels = new_instancemethod(_openframeworks.ofFloatPixels_setFromPixels, None, ofFloatPixels)
ofFloatPixels.setFromPixelsImageType = new_instancemethod(_openframeworks.ofFloatPixels_setFromPixelsImageType, None, ofFloatPixels)
ofFloatPixels.setFromExternalPixels = new_instancemethod(_openframeworks.ofFloatPixels_setFromExternalPixels, None, ofFloatPixels)
ofFloatPixels.setFromAlignedPixels = new_instancemethod(_openframeworks.ofFloatPixels_setFromAlignedPixels, None, ofFloatPixels)
ofFloatPixels.swap = new_instancemethod(_openframeworks.ofFloatPixels_swap, None, ofFloatPixels)
ofFloatPixels.crop = new_instancemethod(_openframeworks.ofFloatPixels_crop, None, ofFloatPixels)
ofFloatPixels.cropTo = new_instancemethod(_openframeworks.ofFloatPixels_cropTo, None, ofFloatPixels)
ofFloatPixels.rotate90 = new_instancemethod(_openframeworks.ofFloatPixels_rotate90, None, ofFloatPixels)
ofFloatPixels.rotate90To = new_instancemethod(_openframeworks.ofFloatPixels_rotate90To, None, ofFloatPixels)
ofFloatPixels.mirrorTo = new_instancemethod(_openframeworks.ofFloatPixels_mirrorTo, None, ofFloatPixels)
ofFloatPixels.mirror = new_instancemethod(_openframeworks.ofFloatPixels_mirror, None, ofFloatPixels)
ofFloatPixels.resize = new_instancemethod(_openframeworks.ofFloatPixels_resize, None, ofFloatPixels)
ofFloatPixels.resizeTo = new_instancemethod(_openframeworks.ofFloatPixels_resizeTo, None, ofFloatPixels)
ofFloatPixels.pasteInto = new_instancemethod(_openframeworks.ofFloatPixels_pasteInto, None, ofFloatPixels)
ofFloatPixels.blendInto = new_instancemethod(_openframeworks.ofFloatPixels_blendInto, None, ofFloatPixels)
ofFloatPixels.swapRgb = new_instancemethod(_openframeworks.ofFloatPixels_swapRgb, None, ofFloatPixels)
ofFloatPixels.getData = new_instancemethod(_openframeworks.ofFloatPixels_getData, None, ofFloatPixels)
ofFloatPixels.getPixelIndex = new_instancemethod(_openframeworks.ofFloatPixels_getPixelIndex, None, ofFloatPixels)
ofFloatPixels.getColor = new_instancemethod(_openframeworks.ofFloatPixels_getColor, None, ofFloatPixels)
ofFloatPixels.setColor = new_instancemethod(_openframeworks.ofFloatPixels_setColor, None, ofFloatPixels)
ofFloatPixels.__getitem__ = new_instancemethod(_openframeworks.ofFloatPixels___getitem__, None, ofFloatPixels)
ofFloatPixels.getWidth = new_instancemethod(_openframeworks.ofFloatPixels_getWidth, None, ofFloatPixels)
ofFloatPixels.getHeight = new_instancemethod(_openframeworks.ofFloatPixels_getHeight, None, ofFloatPixels)
ofFloatPixels.getBytesPerPixel = new_instancemethod(_openframeworks.ofFloatPixels_getBytesPerPixel, None, ofFloatPixels)
ofFloatPixels.getBitsPerPixel = new_instancemethod(_openframeworks.ofFloatPixels_getBitsPerPixel, None, ofFloatPixels)
ofFloatPixels.getBytesPerChannel = new_instancemethod(_openframeworks.ofFloatPixels_getBytesPerChannel, None, ofFloatPixels)
ofFloatPixels.getBitsPerChannel = new_instancemethod(_openframeworks.ofFloatPixels_getBitsPerChannel, None, ofFloatPixels)
ofFloatPixels.getBytesStride = new_instancemethod(_openframeworks.ofFloatPixels_getBytesStride, None, ofFloatPixels)
ofFloatPixels.getNumChannels = new_instancemethod(_openframeworks.ofFloatPixels_getNumChannels, None, ofFloatPixels)
ofFloatPixels.getTotalBytes = new_instancemethod(_openframeworks.ofFloatPixels_getTotalBytes, None, ofFloatPixels)
ofFloatPixels.getNumPlanes = new_instancemethod(_openframeworks.ofFloatPixels_getNumPlanes, None, ofFloatPixels)
ofFloatPixels.getPlane = new_instancemethod(_openframeworks.ofFloatPixels_getPlane, None, ofFloatPixels)
ofFloatPixels.getChannel = new_instancemethod(_openframeworks.ofFloatPixels_getChannel, None, ofFloatPixels)
ofFloatPixels.getPixelFormat = new_instancemethod(_openframeworks.ofFloatPixels_getPixelFormat, None, ofFloatPixels)
ofFloatPixels.size = new_instancemethod(_openframeworks.ofFloatPixels_size, None, ofFloatPixels)
ofFloatPixels.getImageType = new_instancemethod(_openframeworks.ofFloatPixels_getImageType, None, ofFloatPixels)
ofFloatPixels.setChannel = new_instancemethod(_openframeworks.ofFloatPixels_setChannel, None, ofFloatPixels)
ofFloatPixels.setImageType = new_instancemethod(_openframeworks.ofFloatPixels_setImageType, None, ofFloatPixels)
ofFloatPixels.setNumChannels = new_instancemethod(_openframeworks.ofFloatPixels_setNumChannels, None, ofFloatPixels)
ofFloatPixels_swigregister = _openframeworks.ofFloatPixels_swigregister
ofFloatPixels_swigregister(ofFloatPixels)

class ofShortPixels(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofShortPixels

    def __init__(self, *args):
        _openframeworks.ofShortPixels_swiginit(self, _openframeworks.new_ofShortPixels(*args))
ofShortPixels.allocate = new_instancemethod(_openframeworks.ofShortPixels_allocate, None, ofShortPixels)
ofShortPixels.allocatePixelFormat = new_instancemethod(_openframeworks.ofShortPixels_allocatePixelFormat, None, ofShortPixels)
ofShortPixels.allocateImageType = new_instancemethod(_openframeworks.ofShortPixels_allocateImageType, None, ofShortPixels)
ofShortPixels.isAllocated = new_instancemethod(_openframeworks.ofShortPixels_isAllocated, None, ofShortPixels)
ofShortPixels.clear = new_instancemethod(_openframeworks.ofShortPixels_clear, None, ofShortPixels)
ofShortPixels.set = new_instancemethod(_openframeworks.ofShortPixels_set, None, ofShortPixels)
ofShortPixels.setFromPixels = new_instancemethod(_openframeworks.ofShortPixels_setFromPixels, None, ofShortPixels)
ofShortPixels.setFromPixelsImageType = new_instancemethod(_openframeworks.ofShortPixels_setFromPixelsImageType, None, ofShortPixels)
ofShortPixels.setFromExternalPixels = new_instancemethod(_openframeworks.ofShortPixels_setFromExternalPixels, None, ofShortPixels)
ofShortPixels.setFromAlignedPixels = new_instancemethod(_openframeworks.ofShortPixels_setFromAlignedPixels, None, ofShortPixels)
ofShortPixels.swap = new_instancemethod(_openframeworks.ofShortPixels_swap, None, ofShortPixels)
ofShortPixels.crop = new_instancemethod(_openframeworks.ofShortPixels_crop, None, ofShortPixels)
ofShortPixels.cropTo = new_instancemethod(_openframeworks.ofShortPixels_cropTo, None, ofShortPixels)
ofShortPixels.rotate90 = new_instancemethod(_openframeworks.ofShortPixels_rotate90, None, ofShortPixels)
ofShortPixels.rotate90To = new_instancemethod(_openframeworks.ofShortPixels_rotate90To, None, ofShortPixels)
ofShortPixels.mirrorTo = new_instancemethod(_openframeworks.ofShortPixels_mirrorTo, None, ofShortPixels)
ofShortPixels.mirror = new_instancemethod(_openframeworks.ofShortPixels_mirror, None, ofShortPixels)
ofShortPixels.resize = new_instancemethod(_openframeworks.ofShortPixels_resize, None, ofShortPixels)
ofShortPixels.resizeTo = new_instancemethod(_openframeworks.ofShortPixels_resizeTo, None, ofShortPixels)
ofShortPixels.pasteInto = new_instancemethod(_openframeworks.ofShortPixels_pasteInto, None, ofShortPixels)
ofShortPixels.blendInto = new_instancemethod(_openframeworks.ofShortPixels_blendInto, None, ofShortPixels)
ofShortPixels.swapRgb = new_instancemethod(_openframeworks.ofShortPixels_swapRgb, None, ofShortPixels)
ofShortPixels.getData = new_instancemethod(_openframeworks.ofShortPixels_getData, None, ofShortPixels)
ofShortPixels.getPixelIndex = new_instancemethod(_openframeworks.ofShortPixels_getPixelIndex, None, ofShortPixels)
ofShortPixels.getColor = new_instancemethod(_openframeworks.ofShortPixels_getColor, None, ofShortPixels)
ofShortPixels.setColor = new_instancemethod(_openframeworks.ofShortPixels_setColor, None, ofShortPixels)
ofShortPixels.__getitem__ = new_instancemethod(_openframeworks.ofShortPixels___getitem__, None, ofShortPixels)
ofShortPixels.getWidth = new_instancemethod(_openframeworks.ofShortPixels_getWidth, None, ofShortPixels)
ofShortPixels.getHeight = new_instancemethod(_openframeworks.ofShortPixels_getHeight, None, ofShortPixels)
ofShortPixels.getBytesPerPixel = new_instancemethod(_openframeworks.ofShortPixels_getBytesPerPixel, None, ofShortPixels)
ofShortPixels.getBitsPerPixel = new_instancemethod(_openframeworks.ofShortPixels_getBitsPerPixel, None, ofShortPixels)
ofShortPixels.getBytesPerChannel = new_instancemethod(_openframeworks.ofShortPixels_getBytesPerChannel, None, ofShortPixels)
ofShortPixels.getBitsPerChannel = new_instancemethod(_openframeworks.ofShortPixels_getBitsPerChannel, None, ofShortPixels)
ofShortPixels.getBytesStride = new_instancemethod(_openframeworks.ofShortPixels_getBytesStride, None, ofShortPixels)
ofShortPixels.getNumChannels = new_instancemethod(_openframeworks.ofShortPixels_getNumChannels, None, ofShortPixels)
ofShortPixels.getTotalBytes = new_instancemethod(_openframeworks.ofShortPixels_getTotalBytes, None, ofShortPixels)
ofShortPixels.getNumPlanes = new_instancemethod(_openframeworks.ofShortPixels_getNumPlanes, None, ofShortPixels)
ofShortPixels.getPlane = new_instancemethod(_openframeworks.ofShortPixels_getPlane, None, ofShortPixels)
ofShortPixels.getChannel = new_instancemethod(_openframeworks.ofShortPixels_getChannel, None, ofShortPixels)
ofShortPixels.getPixelFormat = new_instancemethod(_openframeworks.ofShortPixels_getPixelFormat, None, ofShortPixels)
ofShortPixels.size = new_instancemethod(_openframeworks.ofShortPixels_size, None, ofShortPixels)
ofShortPixels.getImageType = new_instancemethod(_openframeworks.ofShortPixels_getImageType, None, ofShortPixels)
ofShortPixels.setChannel = new_instancemethod(_openframeworks.ofShortPixels_setChannel, None, ofShortPixels)
ofShortPixels.setImageType = new_instancemethod(_openframeworks.ofShortPixels_setImageType, None, ofShortPixels)
ofShortPixels.setNumChannels = new_instancemethod(_openframeworks.ofShortPixels_setNumChannels, None, ofShortPixels)
ofShortPixels_swigregister = _openframeworks.ofShortPixels_swigregister
ofShortPixels_swigregister(ofShortPixels)

class ofPath(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _openframeworks.ofPath_swiginit(self, _openframeworks.new_ofPath())
    COMMANDS = _openframeworks.ofPath_COMMANDS
    POLYLINES = _openframeworks.ofPath_POLYLINES
    __swig_destroy__ = _openframeworks.delete_ofPath
ofPath.clear = new_instancemethod(_openframeworks.ofPath_clear, None, ofPath)
ofPath.newSubPath = new_instancemethod(_openframeworks.ofPath_newSubPath, None, ofPath)
ofPath.close = new_instancemethod(_openframeworks.ofPath_close, None, ofPath)
ofPath.lineTo = new_instancemethod(_openframeworks.ofPath_lineTo, None, ofPath)
ofPath.moveTo = new_instancemethod(_openframeworks.ofPath_moveTo, None, ofPath)
ofPath.curveTo = new_instancemethod(_openframeworks.ofPath_curveTo, None, ofPath)
ofPath.bezierTo = new_instancemethod(_openframeworks.ofPath_bezierTo, None, ofPath)
ofPath.quadBezierTo = new_instancemethod(_openframeworks.ofPath_quadBezierTo, None, ofPath)
ofPath.arc = new_instancemethod(_openframeworks.ofPath_arc, None, ofPath)
ofPath.arcNegative = new_instancemethod(_openframeworks.ofPath_arcNegative, None, ofPath)
ofPath.triangle = new_instancemethod(_openframeworks.ofPath_triangle, None, ofPath)
ofPath.circle = new_instancemethod(_openframeworks.ofPath_circle, None, ofPath)
ofPath.ellipse = new_instancemethod(_openframeworks.ofPath_ellipse, None, ofPath)
ofPath.rectangle = new_instancemethod(_openframeworks.ofPath_rectangle, None, ofPath)
ofPath.rectRounded = new_instancemethod(_openframeworks.ofPath_rectRounded, None, ofPath)
ofPath.setPolyWindingMode = new_instancemethod(_openframeworks.ofPath_setPolyWindingMode, None, ofPath)
ofPath.getWindingMode = new_instancemethod(_openframeworks.ofPath_getWindingMode, None, ofPath)
ofPath.setFilled = new_instancemethod(_openframeworks.ofPath_setFilled, None, ofPath)
ofPath.setStrokeWidth = new_instancemethod(_openframeworks.ofPath_setStrokeWidth, None, ofPath)
ofPath.setColor = new_instancemethod(_openframeworks.ofPath_setColor, None, ofPath)
ofPath.setHexColor = new_instancemethod(_openframeworks.ofPath_setHexColor, None, ofPath)
ofPath.setFillColor = new_instancemethod(_openframeworks.ofPath_setFillColor, None, ofPath)
ofPath.setFillHexColor = new_instancemethod(_openframeworks.ofPath_setFillHexColor, None, ofPath)
ofPath.setStrokeColor = new_instancemethod(_openframeworks.ofPath_setStrokeColor, None, ofPath)
ofPath.setStrokeHexColor = new_instancemethod(_openframeworks.ofPath_setStrokeHexColor, None, ofPath)
ofPath.isFilled = new_instancemethod(_openframeworks.ofPath_isFilled, None, ofPath)
ofPath.getFillColor = new_instancemethod(_openframeworks.ofPath_getFillColor, None, ofPath)
ofPath.getStrokeColor = new_instancemethod(_openframeworks.ofPath_getStrokeColor, None, ofPath)
ofPath.getStrokeWidth = new_instancemethod(_openframeworks.ofPath_getStrokeWidth, None, ofPath)
ofPath.hasOutline = new_instancemethod(_openframeworks.ofPath_hasOutline, None, ofPath)
ofPath.setCurveResolution = new_instancemethod(_openframeworks.ofPath_setCurveResolution, None, ofPath)
ofPath.getCurveResolution = new_instancemethod(_openframeworks.ofPath_getCurveResolution, None, ofPath)
ofPath.setCircleResolution = new_instancemethod(_openframeworks.ofPath_setCircleResolution, None, ofPath)
ofPath.getCircleResolution = new_instancemethod(_openframeworks.ofPath_getCircleResolution, None, ofPath)
ofPath.setUseShapeColor = new_instancemethod(_openframeworks.ofPath_setUseShapeColor, None, ofPath)
ofPath.getUseShapeColor = new_instancemethod(_openframeworks.ofPath_getUseShapeColor, None, ofPath)
ofPath.draw = new_instancemethod(_openframeworks.ofPath_draw, None, ofPath)
ofPath.getOutline = new_instancemethod(_openframeworks.ofPath_getOutline, None, ofPath)
ofPath.tessellate = new_instancemethod(_openframeworks.ofPath_tessellate, None, ofPath)
ofPath.getTessellation = new_instancemethod(_openframeworks.ofPath_getTessellation, None, ofPath)
ofPath.simplify = new_instancemethod(_openframeworks.ofPath_simplify, None, ofPath)
ofPath.translate = new_instancemethod(_openframeworks.ofPath_translate, None, ofPath)
ofPath.rotateDeg = new_instancemethod(_openframeworks.ofPath_rotateDeg, None, ofPath)
ofPath.rotateRad = new_instancemethod(_openframeworks.ofPath_rotateRad, None, ofPath)
ofPath.scale = new_instancemethod(_openframeworks.ofPath_scale, None, ofPath)
ofPath.append = new_instancemethod(_openframeworks.ofPath_append, None, ofPath)
ofPath.setMode = new_instancemethod(_openframeworks.ofPath_setMode, None, ofPath)
ofPath.getMode = new_instancemethod(_openframeworks.ofPath_getMode, None, ofPath)
ofPath.getCommands = new_instancemethod(_openframeworks.ofPath_getCommands, None, ofPath)
ofPath_swigregister = _openframeworks.ofPath_swigregister
ofPath_swigregister(ofPath)

class PolylineVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self):
        return self.iterator()

    def __init__(self, *args):
        _openframeworks.PolylineVector_swiginit(self, _openframeworks.new_PolylineVector(*args))
    __swig_destroy__ = _openframeworks.delete_PolylineVector
PolylineVector.iterator = new_instancemethod(_openframeworks.PolylineVector_iterator, None, PolylineVector)
PolylineVector.__nonzero__ = new_instancemethod(_openframeworks.PolylineVector___nonzero__, None, PolylineVector)
PolylineVector.__bool__ = new_instancemethod(_openframeworks.PolylineVector___bool__, None, PolylineVector)
PolylineVector.__len__ = new_instancemethod(_openframeworks.PolylineVector___len__, None, PolylineVector)
PolylineVector.__getslice__ = new_instancemethod(_openframeworks.PolylineVector___getslice__, None, PolylineVector)
PolylineVector.__setslice__ = new_instancemethod(_openframeworks.PolylineVector___setslice__, None, PolylineVector)
PolylineVector.__delslice__ = new_instancemethod(_openframeworks.PolylineVector___delslice__, None, PolylineVector)
PolylineVector.__delitem__ = new_instancemethod(_openframeworks.PolylineVector___delitem__, None, PolylineVector)
PolylineVector.__getitem__ = new_instancemethod(_openframeworks.PolylineVector___getitem__, None, PolylineVector)
PolylineVector.__setitem__ = new_instancemethod(_openframeworks.PolylineVector___setitem__, None, PolylineVector)
PolylineVector.pop = new_instancemethod(_openframeworks.PolylineVector_pop, None, PolylineVector)
PolylineVector.append = new_instancemethod(_openframeworks.PolylineVector_append, None, PolylineVector)
PolylineVector.empty = new_instancemethod(_openframeworks.PolylineVector_empty, None, PolylineVector)
PolylineVector.size = new_instancemethod(_openframeworks.PolylineVector_size, None, PolylineVector)
PolylineVector.swap = new_instancemethod(_openframeworks.PolylineVector_swap, None, PolylineVector)
PolylineVector.begin = new_instancemethod(_openframeworks.PolylineVector_begin, None, PolylineVector)
PolylineVector.end = new_instancemethod(_openframeworks.PolylineVector_end, None, PolylineVector)
PolylineVector.rbegin = new_instancemethod(_openframeworks.PolylineVector_rbegin, None, PolylineVector)
PolylineVector.rend = new_instancemethod(_openframeworks.PolylineVector_rend, None, PolylineVector)
PolylineVector.clear = new_instancemethod(_openframeworks.PolylineVector_clear, None, PolylineVector)
PolylineVector.get_allocator = new_instancemethod(_openframeworks.PolylineVector_get_allocator, None, PolylineVector)
PolylineVector.pop_back = new_instancemethod(_openframeworks.PolylineVector_pop_back, None, PolylineVector)
PolylineVector.erase = new_instancemethod(_openframeworks.PolylineVector_erase, None, PolylineVector)
PolylineVector.push_back = new_instancemethod(_openframeworks.PolylineVector_push_back, None, PolylineVector)
PolylineVector.front = new_instancemethod(_openframeworks.PolylineVector_front, None, PolylineVector)
PolylineVector.back = new_instancemethod(_openframeworks.PolylineVector_back, None, PolylineVector)
PolylineVector.assign = new_instancemethod(_openframeworks.PolylineVector_assign, None, PolylineVector)
PolylineVector.resize = new_instancemethod(_openframeworks.PolylineVector_resize, None, PolylineVector)
PolylineVector.insert = new_instancemethod(_openframeworks.PolylineVector_insert, None, PolylineVector)
PolylineVector.reserve = new_instancemethod(_openframeworks.PolylineVector_reserve, None, PolylineVector)
PolylineVector.capacity = new_instancemethod(_openframeworks.PolylineVector_capacity, None, PolylineVector)
PolylineVector_swigregister = _openframeworks.PolylineVector_swigregister
PolylineVector_swigregister(PolylineVector)

class ofPolyline(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openframeworks.ofPolyline_swiginit(self, _openframeworks.new_ofPolyline(*args))
    fromRectangle = staticmethod(_openframeworks.ofPolyline_fromRectangle)
    __swig_destroy__ = _openframeworks.delete_ofPolyline
ofPolyline.clear = new_instancemethod(_openframeworks.ofPolyline_clear, None, ofPolyline)
ofPolyline.addVertex = new_instancemethod(_openframeworks.ofPolyline_addVertex, None, ofPolyline)
ofPolyline.addVertices = new_instancemethod(_openframeworks.ofPolyline_addVertices, None, ofPolyline)
ofPolyline.insertVertex = new_instancemethod(_openframeworks.ofPolyline_insertVertex, None, ofPolyline)
ofPolyline.resize = new_instancemethod(_openframeworks.ofPolyline_resize, None, ofPolyline)
ofPolyline.size = new_instancemethod(_openframeworks.ofPolyline_size, None, ofPolyline)
ofPolyline.__getitem__ = new_instancemethod(_openframeworks.ofPolyline___getitem__, None, ofPolyline)
ofPolyline.getVertices = new_instancemethod(_openframeworks.ofPolyline_getVertices, None, ofPolyline)
ofPolyline.lineTo = new_instancemethod(_openframeworks.ofPolyline_lineTo, None, ofPolyline)
ofPolyline.arc = new_instancemethod(_openframeworks.ofPolyline_arc, None, ofPolyline)
ofPolyline.arcNegative = new_instancemethod(_openframeworks.ofPolyline_arcNegative, None, ofPolyline)
ofPolyline.curveTo = new_instancemethod(_openframeworks.ofPolyline_curveTo, None, ofPolyline)
ofPolyline.bezierTo = new_instancemethod(_openframeworks.ofPolyline_bezierTo, None, ofPolyline)
ofPolyline.quadBezierTo = new_instancemethod(_openframeworks.ofPolyline_quadBezierTo, None, ofPolyline)
ofPolyline.getSmoothed = new_instancemethod(_openframeworks.ofPolyline_getSmoothed, None, ofPolyline)
ofPolyline.getResampledBySpacing = new_instancemethod(_openframeworks.ofPolyline_getResampledBySpacing, None, ofPolyline)
ofPolyline.getResampledByCount = new_instancemethod(_openframeworks.ofPolyline_getResampledByCount, None, ofPolyline)
ofPolyline.simplify = new_instancemethod(_openframeworks.ofPolyline_simplify, None, ofPolyline)
ofPolyline.rotateDeg = new_instancemethod(_openframeworks.ofPolyline_rotateDeg, None, ofPolyline)
ofPolyline.rotateRad = new_instancemethod(_openframeworks.ofPolyline_rotateRad, None, ofPolyline)
ofPolyline.translate = new_instancemethod(_openframeworks.ofPolyline_translate, None, ofPolyline)
ofPolyline.scale = new_instancemethod(_openframeworks.ofPolyline_scale, None, ofPolyline)
ofPolyline.close = new_instancemethod(_openframeworks.ofPolyline_close, None, ofPolyline)
ofPolyline.setClosed = new_instancemethod(_openframeworks.ofPolyline_setClosed, None, ofPolyline)
ofPolyline.isClosed = new_instancemethod(_openframeworks.ofPolyline_isClosed, None, ofPolyline)
ofPolyline.hasChanged = new_instancemethod(_openframeworks.ofPolyline_hasChanged, None, ofPolyline)
ofPolyline.flagHasChanged = new_instancemethod(_openframeworks.ofPolyline_flagHasChanged, None, ofPolyline)
ofPolyline.inside = new_instancemethod(_openframeworks.ofPolyline_inside, None, ofPolyline)
ofPolyline.getBoundingBox = new_instancemethod(_openframeworks.ofPolyline_getBoundingBox, None, ofPolyline)
ofPolyline.getPerimeter = new_instancemethod(_openframeworks.ofPolyline_getPerimeter, None, ofPolyline)
ofPolyline.getArea = new_instancemethod(_openframeworks.ofPolyline_getArea, None, ofPolyline)
ofPolyline.getCentroid2D = new_instancemethod(_openframeworks.ofPolyline_getCentroid2D, None, ofPolyline)
ofPolyline.getClosestPoint = new_instancemethod(_openframeworks.ofPolyline_getClosestPoint, None, ofPolyline)
ofPolyline.getIndexAtLength = new_instancemethod(_openframeworks.ofPolyline_getIndexAtLength, None, ofPolyline)
ofPolyline.getIndexAtPercent = new_instancemethod(_openframeworks.ofPolyline_getIndexAtPercent, None, ofPolyline)
ofPolyline.getLengthAtIndex = new_instancemethod(_openframeworks.ofPolyline_getLengthAtIndex, None, ofPolyline)
ofPolyline.getLengthAtIndexInterpolated = new_instancemethod(_openframeworks.ofPolyline_getLengthAtIndexInterpolated, None, ofPolyline)
ofPolyline.getPointAtLength = new_instancemethod(_openframeworks.ofPolyline_getPointAtLength, None, ofPolyline)
ofPolyline.getPointAtPercent = new_instancemethod(_openframeworks.ofPolyline_getPointAtPercent, None, ofPolyline)
ofPolyline.getPointAtIndexInterpolated = new_instancemethod(_openframeworks.ofPolyline_getPointAtIndexInterpolated, None, ofPolyline)
ofPolyline.getRotationAtIndex = new_instancemethod(_openframeworks.ofPolyline_getRotationAtIndex, None, ofPolyline)
ofPolyline.getRotationAtIndexInterpolated = new_instancemethod(_openframeworks.ofPolyline_getRotationAtIndexInterpolated, None, ofPolyline)
ofPolyline.getDegreesAtIndex = new_instancemethod(_openframeworks.ofPolyline_getDegreesAtIndex, None, ofPolyline)
ofPolyline.getDegreesAtIndexInterpolated = new_instancemethod(_openframeworks.ofPolyline_getDegreesAtIndexInterpolated, None, ofPolyline)
ofPolyline.getRadiansAtIndex = new_instancemethod(_openframeworks.ofPolyline_getRadiansAtIndex, None, ofPolyline)
ofPolyline.getRadiansAtIndexInterpolated = new_instancemethod(_openframeworks.ofPolyline_getRadiansAtIndexInterpolated, None, ofPolyline)
ofPolyline.getTangentAtIndex = new_instancemethod(_openframeworks.ofPolyline_getTangentAtIndex, None, ofPolyline)
ofPolyline.getTangentAtIndexInterpolated = new_instancemethod(_openframeworks.ofPolyline_getTangentAtIndexInterpolated, None, ofPolyline)
ofPolyline.getNormalAtIndex = new_instancemethod(_openframeworks.ofPolyline_getNormalAtIndex, None, ofPolyline)
ofPolyline.getNormalAtIndexInterpolated = new_instancemethod(_openframeworks.ofPolyline_getNormalAtIndexInterpolated, None, ofPolyline)
ofPolyline.getWrappedIndex = new_instancemethod(_openframeworks.ofPolyline_getWrappedIndex, None, ofPolyline)
ofPolyline.setRightVector = new_instancemethod(_openframeworks.ofPolyline_setRightVector, None, ofPolyline)
ofPolyline.getRightVector = new_instancemethod(_openframeworks.ofPolyline_getRightVector, None, ofPolyline)
ofPolyline.draw = new_instancemethod(_openframeworks.ofPolyline_draw, None, ofPolyline)
ofPolyline_swigregister = _openframeworks.ofPolyline_swigregister
ofPolyline_swigregister(ofPolyline)

def ofPolyline_fromRectangle(rect):
    return _openframeworks.ofPolyline_fromRectangle(rect)
ofPolyline_fromRectangle = _openframeworks.ofPolyline_fromRectangle


def ofDrawBitmapString(*args):
    return _openframeworks.ofDrawBitmapString(*args)
ofDrawBitmapString = _openframeworks.ofDrawBitmapString
CIRC_RESOLUTION = _openframeworks.CIRC_RESOLUTION

def ofSetColor(*args):
    return _openframeworks.ofSetColor(*args)
ofSetColor = _openframeworks.ofSetColor

def ofSetHexColor(hexColor):
    return _openframeworks.ofSetHexColor(hexColor)
ofSetHexColor = _openframeworks.ofSetHexColor

def ofNoFill():
    return _openframeworks.ofNoFill()
ofNoFill = _openframeworks.ofNoFill

def ofFill():
    return _openframeworks.ofFill()
ofFill = _openframeworks.ofFill

def ofGetFill():
    return _openframeworks.ofGetFill()
ofGetFill = _openframeworks.ofGetFill

def ofGetBackgroundColor():
    return _openframeworks.ofGetBackgroundColor()
ofGetBackgroundColor = _openframeworks.ofGetBackgroundColor

def ofBackground(*args):
    return _openframeworks.ofBackground(*args)
ofBackground = _openframeworks.ofBackground

def ofBackgroundHex(hexColor, alpha=255):
    return _openframeworks.ofBackgroundHex(hexColor, alpha)
ofBackgroundHex = _openframeworks.ofBackgroundHex

def ofBackgroundGradient(start, end, mode=OF_GRADIENT_CIRCULAR):
    return _openframeworks.ofBackgroundGradient(start, end, mode)
ofBackgroundGradient = _openframeworks.ofBackgroundGradient

def ofSetBackgroundColor(*args):
    return _openframeworks.ofSetBackgroundColor(*args)
ofSetBackgroundColor = _openframeworks.ofSetBackgroundColor

def ofSetBackgroundColorHex(hexColor, alpha=255):
    return _openframeworks.ofSetBackgroundColorHex(hexColor, alpha)
ofSetBackgroundColorHex = _openframeworks.ofSetBackgroundColorHex

def ofSetBackgroundAuto(bManual):
    return _openframeworks.ofSetBackgroundAuto(bManual)
ofSetBackgroundAuto = _openframeworks.ofSetBackgroundAuto

def ofGetBackgroundAuto():
    return _openframeworks.ofGetBackgroundAuto()
ofGetBackgroundAuto = _openframeworks.ofGetBackgroundAuto

def ofClear(*args):
    return _openframeworks.ofClear(*args)
ofClear = _openframeworks.ofClear

def ofClearAlpha():
    return _openframeworks.ofClearAlpha()
ofClearAlpha = _openframeworks.ofClearAlpha

def ofDrawTriangle(*args):
    return _openframeworks.ofDrawTriangle(*args)
ofDrawTriangle = _openframeworks.ofDrawTriangle

def ofDrawCircle(*args):
    return _openframeworks.ofDrawCircle(*args)
ofDrawCircle = _openframeworks.ofDrawCircle

def ofDrawEllipse(*args):
    return _openframeworks.ofDrawEllipse(*args)
ofDrawEllipse = _openframeworks.ofDrawEllipse

def ofDrawLine(*args):
    return _openframeworks.ofDrawLine(*args)
ofDrawLine = _openframeworks.ofDrawLine

def ofDrawRectangle(*args):
    return _openframeworks.ofDrawRectangle(*args)
ofDrawRectangle = _openframeworks.ofDrawRectangle

def ofDrawRectRounded(*args):
    return _openframeworks.ofDrawRectRounded(*args)
ofDrawRectRounded = _openframeworks.ofDrawRectRounded

def ofDrawCurve(*args):
    return _openframeworks.ofDrawCurve(*args)
ofDrawCurve = _openframeworks.ofDrawCurve

def ofDrawBezier(*args):
    return _openframeworks.ofDrawBezier(*args)
ofDrawBezier = _openframeworks.ofDrawBezier

def ofBeginShape():
    return _openframeworks.ofBeginShape()
ofBeginShape = _openframeworks.ofBeginShape

def ofVertex(*args):
    return _openframeworks.ofVertex(*args)
ofVertex = _openframeworks.ofVertex

def ofVertices(*args):
    return _openframeworks.ofVertices(*args)
ofVertices = _openframeworks.ofVertices

def ofCurveVertex(*args):
    return _openframeworks.ofCurveVertex(*args)
ofCurveVertex = _openframeworks.ofCurveVertex

def ofCurveVertices(*args):
    return _openframeworks.ofCurveVertices(*args)
ofCurveVertices = _openframeworks.ofCurveVertices

def ofBezierVertex(*args):
    return _openframeworks.ofBezierVertex(*args)
ofBezierVertex = _openframeworks.ofBezierVertex
OF_OPEN = _openframeworks.OF_OPEN
OF_CLOSE = _openframeworks.OF_CLOSE

def ofEndShape(bClose=False):
    return _openframeworks.ofEndShape(bClose)
ofEndShape = _openframeworks.ofEndShape

def ofNextContour(bClose=False):
    return _openframeworks.ofNextContour(bClose)
ofNextContour = _openframeworks.ofNextContour

def ofSetDrawBitmapMode(mode):
    return _openframeworks.ofSetDrawBitmapMode(mode)
ofSetDrawBitmapMode = _openframeworks.ofSetDrawBitmapMode

def ofDrawBitmapStringHighlight(*args):
    return _openframeworks.ofDrawBitmapStringHighlight(*args)
ofDrawBitmapStringHighlight = _openframeworks.ofDrawBitmapStringHighlight

def ofSetupGraphicDefaults():
    return _openframeworks.ofSetupGraphicDefaults()
ofSetupGraphicDefaults = _openframeworks.ofSetupGraphicDefaults

def ofSetupScreen():
    return _openframeworks.ofSetupScreen()
ofSetupScreen = _openframeworks.ofSetupScreen

def ofGetRectMode():
    return _openframeworks.ofGetRectMode()
ofGetRectMode = _openframeworks.ofGetRectMode

def ofSetCircleResolution(res):
    return _openframeworks.ofSetCircleResolution(res)
ofSetCircleResolution = _openframeworks.ofSetCircleResolution

def ofSetCurveResolution(res):
    return _openframeworks.ofSetCurveResolution(res)
ofSetCurveResolution = _openframeworks.ofSetCurveResolution

def ofSetLineWidth(lineWidth):
    return _openframeworks.ofSetLineWidth(lineWidth)
ofSetLineWidth = _openframeworks.ofSetLineWidth

def ofSetDepthTest(depthTest):
    return _openframeworks.ofSetDepthTest(depthTest)
ofSetDepthTest = _openframeworks.ofSetDepthTest

def ofEnableDepthTest():
    return _openframeworks.ofEnableDepthTest()
ofEnableDepthTest = _openframeworks.ofEnableDepthTest

def ofDisableDepthTest():
    return _openframeworks.ofDisableDepthTest()
ofDisableDepthTest = _openframeworks.ofDisableDepthTest

def ofEnableBlendMode(blendMode):
    return _openframeworks.ofEnableBlendMode(blendMode)
ofEnableBlendMode = _openframeworks.ofEnableBlendMode

def ofDisableBlendMode():
    return _openframeworks.ofDisableBlendMode()
ofDisableBlendMode = _openframeworks.ofDisableBlendMode

def ofEnablePointSprites():
    return _openframeworks.ofEnablePointSprites()
ofEnablePointSprites = _openframeworks.ofEnablePointSprites

def ofDisablePointSprites():
    return _openframeworks.ofDisablePointSprites()
ofDisablePointSprites = _openframeworks.ofDisablePointSprites

def ofEnableAlphaBlending():
    return _openframeworks.ofEnableAlphaBlending()
ofEnableAlphaBlending = _openframeworks.ofEnableAlphaBlending

def ofDisableAlphaBlending():
    return _openframeworks.ofDisableAlphaBlending()
ofDisableAlphaBlending = _openframeworks.ofDisableAlphaBlending

def ofEnableSmoothing():
    return _openframeworks.ofEnableSmoothing()
ofEnableSmoothing = _openframeworks.ofEnableSmoothing

def ofDisableSmoothing():
    return _openframeworks.ofDisableSmoothing()
ofDisableSmoothing = _openframeworks.ofDisableSmoothing

def ofEnableAntiAliasing():
    return _openframeworks.ofEnableAntiAliasing()
ofEnableAntiAliasing = _openframeworks.ofEnableAntiAliasing

def ofDisableAntiAliasing():
    return _openframeworks.ofDisableAntiAliasing()
ofDisableAntiAliasing = _openframeworks.ofDisableAntiAliasing

def ofGetStyle():
    return _openframeworks.ofGetStyle()
ofGetStyle = _openframeworks.ofGetStyle

def ofSetStyle(style):
    return _openframeworks.ofSetStyle(style)
ofSetStyle = _openframeworks.ofSetStyle

def ofPushStyle():
    return _openframeworks.ofPushStyle()
ofPushStyle = _openframeworks.ofPushStyle

def ofPopStyle():
    return _openframeworks.ofPopStyle()
ofPopStyle = _openframeworks.ofPopStyle

def ofSetPolyMode(mode):
    return _openframeworks.ofSetPolyMode(mode)
ofSetPolyMode = _openframeworks.ofSetPolyMode

def ofSetRectMode(mode):
    return _openframeworks.ofSetRectMode(mode)
ofSetRectMode = _openframeworks.ofSetRectMode

def ofPushMatrix():
    return _openframeworks.ofPushMatrix()
ofPushMatrix = _openframeworks.ofPushMatrix

def ofPopMatrix():
    return _openframeworks.ofPopMatrix()
ofPopMatrix = _openframeworks.ofPopMatrix

def ofGetCurrentMatrix(matrixMode):
    return _openframeworks.ofGetCurrentMatrix(matrixMode)
ofGetCurrentMatrix = _openframeworks.ofGetCurrentMatrix

def ofGetCurrentOrientationMatrix():
    return _openframeworks.ofGetCurrentOrientationMatrix()
ofGetCurrentOrientationMatrix = _openframeworks.ofGetCurrentOrientationMatrix

def ofGetCurrentNormalMatrix():
    return _openframeworks.ofGetCurrentNormalMatrix()
ofGetCurrentNormalMatrix = _openframeworks.ofGetCurrentNormalMatrix

def ofTranslate(*args):
    return _openframeworks.ofTranslate(*args)
ofTranslate = _openframeworks.ofTranslate

def ofScale(*args):
    return _openframeworks.ofScale(*args)
ofScale = _openframeworks.ofScale

def ofRotateDeg(*args):
    return _openframeworks.ofRotateDeg(*args)
ofRotateDeg = _openframeworks.ofRotateDeg

def ofRotateXDeg(degrees):
    return _openframeworks.ofRotateXDeg(degrees)
ofRotateXDeg = _openframeworks.ofRotateXDeg

def ofRotateYDeg(degrees):
    return _openframeworks.ofRotateYDeg(degrees)
ofRotateYDeg = _openframeworks.ofRotateYDeg

def ofRotateZDeg(degrees):
    return _openframeworks.ofRotateZDeg(degrees)
ofRotateZDeg = _openframeworks.ofRotateZDeg

def ofRotateRad(*args):
    return _openframeworks.ofRotateRad(*args)
ofRotateRad = _openframeworks.ofRotateRad

def ofRotateXRad(degrees):
    return _openframeworks.ofRotateXRad(degrees)
ofRotateXRad = _openframeworks.ofRotateXRad

def ofRotateYRad(degrees):
    return _openframeworks.ofRotateYRad(degrees)
ofRotateYRad = _openframeworks.ofRotateYRad

def ofRotateZRad(degrees):
    return _openframeworks.ofRotateZRad(degrees)
ofRotateZRad = _openframeworks.ofRotateZRad

def ofLoadIdentityMatrix():
    return _openframeworks.ofLoadIdentityMatrix()
ofLoadIdentityMatrix = _openframeworks.ofLoadIdentityMatrix

def ofLoadMatrix(*args):
    return _openframeworks.ofLoadMatrix(*args)
ofLoadMatrix = _openframeworks.ofLoadMatrix

def ofMultMatrix(*args):
    return _openframeworks.ofMultMatrix(*args)
ofMultMatrix = _openframeworks.ofMultMatrix

def ofSetMatrixMode(matrixMode):
    return _openframeworks.ofSetMatrixMode(matrixMode)
ofSetMatrixMode = _openframeworks.ofSetMatrixMode

def ofLoadViewMatrix(m):
    return _openframeworks.ofLoadViewMatrix(m)
ofLoadViewMatrix = _openframeworks.ofLoadViewMatrix

def ofMultViewMatrix(m):
    return _openframeworks.ofMultViewMatrix(m)
ofMultViewMatrix = _openframeworks.ofMultViewMatrix

def ofGetCurrentViewMatrix():
    return _openframeworks.ofGetCurrentViewMatrix()
ofGetCurrentViewMatrix = _openframeworks.ofGetCurrentViewMatrix

def ofPushView():
    return _openframeworks.ofPushView()
ofPushView = _openframeworks.ofPushView

def ofPopView():
    return _openframeworks.ofPopView()
ofPopView = _openframeworks.ofPopView

def ofIsVFlipped():
    return _openframeworks.ofIsVFlipped()
ofIsVFlipped = _openframeworks.ofIsVFlipped

def ofViewport(*args):
    return _openframeworks.ofViewport(*args)
ofViewport = _openframeworks.ofViewport

def ofGetCurrentViewport():
    return _openframeworks.ofGetCurrentViewport()
ofGetCurrentViewport = _openframeworks.ofGetCurrentViewport

def ofGetNativeViewport():
    return _openframeworks.ofGetNativeViewport()
ofGetNativeViewport = _openframeworks.ofGetNativeViewport

def ofGetViewportWidth():
    return _openframeworks.ofGetViewportWidth()
ofGetViewportWidth = _openframeworks.ofGetViewportWidth

def ofGetViewportHeight():
    return _openframeworks.ofGetViewportHeight()
ofGetViewportHeight = _openframeworks.ofGetViewportHeight

def ofSetupScreenPerspective(width=-1, height=-1, fov=60, nearDist=0, farDist=0):
    return _openframeworks.ofSetupScreenPerspective(width, height, fov, nearDist, farDist)
ofSetupScreenPerspective = _openframeworks.ofSetupScreenPerspective

def ofSetupScreenOrtho(width=-1, height=-1, nearDist=-1, farDist=1):
    return _openframeworks.ofSetupScreenOrtho(width, height, nearDist, farDist)
ofSetupScreenOrtho = _openframeworks.ofSetupScreenOrtho

def ofOrientationToDegrees(orientation):
    return _openframeworks.ofOrientationToDegrees(orientation)
ofOrientationToDegrees = _openframeworks.ofOrientationToDegrees

def ofSetCoordHandedness(handedness):
    return _openframeworks.ofSetCoordHandedness(handedness)
ofSetCoordHandedness = _openframeworks.ofSetCoordHandedness

def ofGetCoordHandedness():
    return _openframeworks.ofGetCoordHandedness()
ofGetCoordHandedness = _openframeworks.ofGetCoordHandedness

def ofBeginSaveScreenAsPDF(*args):
    return _openframeworks.ofBeginSaveScreenAsPDF(*args)
ofBeginSaveScreenAsPDF = _openframeworks.ofBeginSaveScreenAsPDF

def ofEndSaveScreenAsPDF():
    return _openframeworks.ofEndSaveScreenAsPDF()
ofEndSaveScreenAsPDF = _openframeworks.ofEndSaveScreenAsPDF

def ofBeginSaveScreenAsSVG(*args):
    return _openframeworks.ofBeginSaveScreenAsSVG(*args)
ofBeginSaveScreenAsSVG = _openframeworks.ofBeginSaveScreenAsSVG

def ofEndSaveScreenAsSVG():
    return _openframeworks.ofEndSaveScreenAsSVG()
ofEndSaveScreenAsSVG = _openframeworks.ofEndSaveScreenAsSVG

def ofSetPlaneResolution(columns, rows):
    return _openframeworks.ofSetPlaneResolution(columns, rows)
ofSetPlaneResolution = _openframeworks.ofSetPlaneResolution

def ofGetPlaneResolution():
    return _openframeworks.ofGetPlaneResolution()
ofGetPlaneResolution = _openframeworks.ofGetPlaneResolution

def ofDrawPlane(*args):
    return _openframeworks.ofDrawPlane(*args)
ofDrawPlane = _openframeworks.ofDrawPlane

def ofSetSphereResolution(res):
    return _openframeworks.ofSetSphereResolution(res)
ofSetSphereResolution = _openframeworks.ofSetSphereResolution

def ofGetSphereResolution():
    return _openframeworks.ofGetSphereResolution()
ofGetSphereResolution = _openframeworks.ofGetSphereResolution

def ofDrawSphere(*args):
    return _openframeworks.ofDrawSphere(*args)
ofDrawSphere = _openframeworks.ofDrawSphere

def ofSetIcoSphereResolution(res):
    return _openframeworks.ofSetIcoSphereResolution(res)
ofSetIcoSphereResolution = _openframeworks.ofSetIcoSphereResolution

def ofGetIcoSphereResolution():
    return _openframeworks.ofGetIcoSphereResolution()
ofGetIcoSphereResolution = _openframeworks.ofGetIcoSphereResolution

def ofDrawIcoSphere(*args):
    return _openframeworks.ofDrawIcoSphere(*args)
ofDrawIcoSphere = _openframeworks.ofDrawIcoSphere

def ofSetCylinderResolution(radiusSegments, heightSegments, capSegments=2):
    return _openframeworks.ofSetCylinderResolution(radiusSegments, heightSegments, capSegments)
ofSetCylinderResolution = _openframeworks.ofSetCylinderResolution

def ofGetCylinderResolution():
    return _openframeworks.ofGetCylinderResolution()
ofGetCylinderResolution = _openframeworks.ofGetCylinderResolution

def ofDrawCylinder(*args):
    return _openframeworks.ofDrawCylinder(*args)
ofDrawCylinder = _openframeworks.ofDrawCylinder

def ofSetConeResolution(radiusSegments, heightSegments, capSegments=2):
    return _openframeworks.ofSetConeResolution(radiusSegments, heightSegments, capSegments)
ofSetConeResolution = _openframeworks.ofSetConeResolution

def ofGetConeResolution():
    return _openframeworks.ofGetConeResolution()
ofGetConeResolution = _openframeworks.ofGetConeResolution

def ofDrawCone(*args):
    return _openframeworks.ofDrawCone(*args)
ofDrawCone = _openframeworks.ofDrawCone

def ofSetBoxResolution(*args):
    return _openframeworks.ofSetBoxResolution(*args)
ofSetBoxResolution = _openframeworks.ofSetBoxResolution

def ofGetBoxResolution():
    return _openframeworks.ofGetBoxResolution()
ofGetBoxResolution = _openframeworks.ofGetBoxResolution

def ofDrawBox(*args):
    return _openframeworks.ofDrawBox(*args)
ofDrawBox = _openframeworks.ofDrawBox
OF_TTF_LEFT_TO_RIGHT = _openframeworks.OF_TTF_LEFT_TO_RIGHT
OF_TTF_RIGHT_TO_LEFT = _openframeworks.OF_TTF_RIGHT_TO_LEFT
class ofTrueTypeFont(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofTrueTypeFont

    def __init__(self, *args):
        _openframeworks.ofTrueTypeFont_swiginit(self, _openframeworks.new_ofTrueTypeFont(*args))
    setGlobalDpi = staticmethod(_openframeworks.ofTrueTypeFont_setGlobalDpi)
ofTrueTypeFont.load = new_instancemethod(_openframeworks.ofTrueTypeFont_load, None, ofTrueTypeFont)
ofTrueTypeFont.isLoaded = new_instancemethod(_openframeworks.ofTrueTypeFont_isLoaded, None, ofTrueTypeFont)
ofTrueTypeFont.isAntiAliased = new_instancemethod(_openframeworks.ofTrueTypeFont_isAntiAliased, None, ofTrueTypeFont)
ofTrueTypeFont.hasFullCharacterSet = new_instancemethod(_openframeworks.ofTrueTypeFont_hasFullCharacterSet, None, ofTrueTypeFont)
ofTrueTypeFont.getNumCharacters = new_instancemethod(_openframeworks.ofTrueTypeFont_getNumCharacters, None, ofTrueTypeFont)
ofTrueTypeFont.getSize = new_instancemethod(_openframeworks.ofTrueTypeFont_getSize, None, ofTrueTypeFont)
ofTrueTypeFont.getLineHeight = new_instancemethod(_openframeworks.ofTrueTypeFont_getLineHeight, None, ofTrueTypeFont)
ofTrueTypeFont.setLineHeight = new_instancemethod(_openframeworks.ofTrueTypeFont_setLineHeight, None, ofTrueTypeFont)
ofTrueTypeFont.getAscenderHeight = new_instancemethod(_openframeworks.ofTrueTypeFont_getAscenderHeight, None, ofTrueTypeFont)
ofTrueTypeFont.getDescenderHeight = new_instancemethod(_openframeworks.ofTrueTypeFont_getDescenderHeight, None, ofTrueTypeFont)
ofTrueTypeFont.getGlyphBBox = new_instancemethod(_openframeworks.ofTrueTypeFont_getGlyphBBox, None, ofTrueTypeFont)
ofTrueTypeFont.getLetterSpacing = new_instancemethod(_openframeworks.ofTrueTypeFont_getLetterSpacing, None, ofTrueTypeFont)
ofTrueTypeFont.setLetterSpacing = new_instancemethod(_openframeworks.ofTrueTypeFont_setLetterSpacing, None, ofTrueTypeFont)
ofTrueTypeFont.getSpaceSize = new_instancemethod(_openframeworks.ofTrueTypeFont_getSpaceSize, None, ofTrueTypeFont)
ofTrueTypeFont.setSpaceSize = new_instancemethod(_openframeworks.ofTrueTypeFont_setSpaceSize, None, ofTrueTypeFont)
ofTrueTypeFont.stringWidth = new_instancemethod(_openframeworks.ofTrueTypeFont_stringWidth, None, ofTrueTypeFont)
ofTrueTypeFont.stringHeight = new_instancemethod(_openframeworks.ofTrueTypeFont_stringHeight, None, ofTrueTypeFont)
ofTrueTypeFont.getStringBoundingBox = new_instancemethod(_openframeworks.ofTrueTypeFont_getStringBoundingBox, None, ofTrueTypeFont)
ofTrueTypeFont.drawString = new_instancemethod(_openframeworks.ofTrueTypeFont_drawString, None, ofTrueTypeFont)
ofTrueTypeFont.drawStringAsShapes = new_instancemethod(_openframeworks.ofTrueTypeFont_drawStringAsShapes, None, ofTrueTypeFont)
ofTrueTypeFont.getCharacterAsPoints = new_instancemethod(_openframeworks.ofTrueTypeFont_getCharacterAsPoints, None, ofTrueTypeFont)
ofTrueTypeFont.getStringAsPoints = new_instancemethod(_openframeworks.ofTrueTypeFont_getStringAsPoints, None, ofTrueTypeFont)
ofTrueTypeFont.getStringMesh = new_instancemethod(_openframeworks.ofTrueTypeFont_getStringMesh, None, ofTrueTypeFont)
ofTrueTypeFont.getFontTexture = new_instancemethod(_openframeworks.ofTrueTypeFont_getFontTexture, None, ofTrueTypeFont)
ofTrueTypeFont.getStringTexture = new_instancemethod(_openframeworks.ofTrueTypeFont_getStringTexture, None, ofTrueTypeFont)
ofTrueTypeFont.getFirstGlyphPosForTexture = new_instancemethod(_openframeworks.ofTrueTypeFont_getFirstGlyphPosForTexture, None, ofTrueTypeFont)
ofTrueTypeFont.isValidGlyph = new_instancemethod(_openframeworks.ofTrueTypeFont_isValidGlyph, None, ofTrueTypeFont)
ofTrueTypeFont_swigregister = _openframeworks.ofTrueTypeFont_swigregister
ofTrueTypeFont_swigregister(ofTrueTypeFont)
cvar = _openframeworks.cvar
OF_TTF_SANS = cvar.OF_TTF_SANS
OF_TTF_SERIF = cvar.OF_TTF_SERIF
OF_TTF_MONO = cvar.OF_TTF_MONO

def ofTrueTypeFont_setGlobalDpi(newDpi):
    return _openframeworks.ofTrueTypeFont_setGlobalDpi(newDpi)
ofTrueTypeFont_setGlobalDpi = _openframeworks.ofTrueTypeFont_setGlobalDpi


def ofSoundStreamSetup(settings):
    return _openframeworks.ofSoundStreamSetup(settings)
ofSoundStreamSetup = _openframeworks.ofSoundStreamSetup

def ofSoundStreamStop():
    return _openframeworks.ofSoundStreamStop()
ofSoundStreamStop = _openframeworks.ofSoundStreamStop

def ofSoundStreamStart():
    return _openframeworks.ofSoundStreamStart()
ofSoundStreamStart = _openframeworks.ofSoundStreamStart

def ofSoundStreamClose():
    return _openframeworks.ofSoundStreamClose()
ofSoundStreamClose = _openframeworks.ofSoundStreamClose

def ofSoundStreamListDevices():
    return _openframeworks.ofSoundStreamListDevices()
ofSoundStreamListDevices = _openframeworks.ofSoundStreamListDevices
class ofSoundStream(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _openframeworks.ofSoundStream_swiginit(self, _openframeworks.new_ofSoundStream())
    __swig_destroy__ = _openframeworks.delete_ofSoundStream
ofSoundStream.setSoundStream = new_instancemethod(_openframeworks.ofSoundStream_setSoundStream, None, ofSoundStream)
ofSoundStream.getSoundStream = new_instancemethod(_openframeworks.ofSoundStream_getSoundStream, None, ofSoundStream)
ofSoundStream.printDeviceList = new_instancemethod(_openframeworks.ofSoundStream_printDeviceList, None, ofSoundStream)
ofSoundStream.getDeviceList = new_instancemethod(_openframeworks.ofSoundStream_getDeviceList, None, ofSoundStream)
ofSoundStream.getMatchingDevices = new_instancemethod(_openframeworks.ofSoundStream_getMatchingDevices, None, ofSoundStream)
ofSoundStream.setup = new_instancemethod(_openframeworks.ofSoundStream_setup, None, ofSoundStream)
ofSoundStream.setInput = new_instancemethod(_openframeworks.ofSoundStream_setInput, None, ofSoundStream)
ofSoundStream.setOutput = new_instancemethod(_openframeworks.ofSoundStream_setOutput, None, ofSoundStream)
ofSoundStream.start = new_instancemethod(_openframeworks.ofSoundStream_start, None, ofSoundStream)
ofSoundStream.stop = new_instancemethod(_openframeworks.ofSoundStream_stop, None, ofSoundStream)
ofSoundStream.close = new_instancemethod(_openframeworks.ofSoundStream_close, None, ofSoundStream)
ofSoundStream.getTickCount = new_instancemethod(_openframeworks.ofSoundStream_getTickCount, None, ofSoundStream)
ofSoundStream.getNumInputChannels = new_instancemethod(_openframeworks.ofSoundStream_getNumInputChannels, None, ofSoundStream)
ofSoundStream.getNumOutputChannels = new_instancemethod(_openframeworks.ofSoundStream_getNumOutputChannels, None, ofSoundStream)
ofSoundStream.getSampleRate = new_instancemethod(_openframeworks.ofSoundStream_getSampleRate, None, ofSoundStream)
ofSoundStream.getBufferSize = new_instancemethod(_openframeworks.ofSoundStream_getBufferSize, None, ofSoundStream)
ofSoundStream_swigregister = _openframeworks.ofSoundStream_swigregister
ofSoundStream_swigregister(ofSoundStream)

class ofSoundPlayer(ofBaseSoundPlayer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _openframeworks.ofSoundPlayer_swiginit(self, _openframeworks.new_ofSoundPlayer())
    __swig_destroy__ = _openframeworks.delete_ofSoundPlayer
ofSoundPlayer.setPlayer = new_instancemethod(_openframeworks.ofSoundPlayer_setPlayer, None, ofSoundPlayer)
ofSoundPlayer.getPlayer = new_instancemethod(_openframeworks.ofSoundPlayer_getPlayer, None, ofSoundPlayer)
ofSoundPlayer.load = new_instancemethod(_openframeworks.ofSoundPlayer_load, None, ofSoundPlayer)
ofSoundPlayer_swigregister = _openframeworks.ofSoundPlayer_swigregister
ofSoundPlayer_swigregister(ofSoundPlayer)

class ofColor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openframeworks.ofColor_swiginit(self, _openframeworks.new_ofColor(*args))
    fromHsb = staticmethod(_openframeworks.ofColor_fromHsb)
    fromHex = staticmethod(_openframeworks.ofColor_fromHex)
    limit = staticmethod(_openframeworks.ofColor_limit)

    def __truediv__(self, *args):
        return _openframeworks.ofColor___div__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _openframeworks.ofColor___itruediv__(self, *args)
    __idiv__ = __itruediv__


    r = _swig_property(_openframeworks.ofColor_r_get, _openframeworks.ofColor_r_set)
    g = _swig_property(_openframeworks.ofColor_g_get, _openframeworks.ofColor_g_set)
    b = _swig_property(_openframeworks.ofColor_b_get, _openframeworks.ofColor_b_set)
    a = _swig_property(_openframeworks.ofColor_a_get, _openframeworks.ofColor_a_set)
    __swig_destroy__ = _openframeworks.delete_ofColor
ofColor.set = new_instancemethod(_openframeworks.ofColor_set, None, ofColor)
ofColor.setHex = new_instancemethod(_openframeworks.ofColor_setHex, None, ofColor)
ofColor.setHue = new_instancemethod(_openframeworks.ofColor_setHue, None, ofColor)
ofColor.setHueAngle = new_instancemethod(_openframeworks.ofColor_setHueAngle, None, ofColor)
ofColor.setSaturation = new_instancemethod(_openframeworks.ofColor_setSaturation, None, ofColor)
ofColor.setBrightness = new_instancemethod(_openframeworks.ofColor_setBrightness, None, ofColor)
ofColor.setHsb = new_instancemethod(_openframeworks.ofColor_setHsb, None, ofColor)
ofColor.clamp = new_instancemethod(_openframeworks.ofColor_clamp, None, ofColor)
ofColor.invert = new_instancemethod(_openframeworks.ofColor_invert, None, ofColor)
ofColor.normalize = new_instancemethod(_openframeworks.ofColor_normalize, None, ofColor)
ofColor.lerp = new_instancemethod(_openframeworks.ofColor_lerp, None, ofColor)
ofColor.getClamped = new_instancemethod(_openframeworks.ofColor_getClamped, None, ofColor)
ofColor.getInverted = new_instancemethod(_openframeworks.ofColor_getInverted, None, ofColor)
ofColor.getNormalized = new_instancemethod(_openframeworks.ofColor_getNormalized, None, ofColor)
ofColor.getLerped = new_instancemethod(_openframeworks.ofColor_getLerped, None, ofColor)
ofColor.getHex = new_instancemethod(_openframeworks.ofColor_getHex, None, ofColor)
ofColor.getHue = new_instancemethod(_openframeworks.ofColor_getHue, None, ofColor)
ofColor.getHueAngle = new_instancemethod(_openframeworks.ofColor_getHueAngle, None, ofColor)
ofColor.getSaturation = new_instancemethod(_openframeworks.ofColor_getSaturation, None, ofColor)
ofColor.getBrightness = new_instancemethod(_openframeworks.ofColor_getBrightness, None, ofColor)
ofColor.getLightness = new_instancemethod(_openframeworks.ofColor_getLightness, None, ofColor)
ofColor.getHsb = new_instancemethod(_openframeworks.ofColor_getHsb, None, ofColor)
ofColor.__eq__ = new_instancemethod(_openframeworks.ofColor___eq__, None, ofColor)
ofColor.__ne__ = new_instancemethod(_openframeworks.ofColor___ne__, None, ofColor)
ofColor.__add__ = new_instancemethod(_openframeworks.ofColor___add__, None, ofColor)
ofColor.__iadd__ = new_instancemethod(_openframeworks.ofColor___iadd__, None, ofColor)
ofColor.__sub__ = new_instancemethod(_openframeworks.ofColor___sub__, None, ofColor)
ofColor.__isub__ = new_instancemethod(_openframeworks.ofColor___isub__, None, ofColor)
ofColor.__mul__ = new_instancemethod(_openframeworks.ofColor___mul__, None, ofColor)
ofColor.__imul__ = new_instancemethod(_openframeworks.ofColor___imul__, None, ofColor)
ofColor.__getitem__ = new_instancemethod(_openframeworks.ofColor___getitem__, None, ofColor)
ofColor.getR = new_instancemethod(_openframeworks.ofColor_getR, None, ofColor)
ofColor.getG = new_instancemethod(_openframeworks.ofColor_getG, None, ofColor)
ofColor.getB = new_instancemethod(_openframeworks.ofColor_getB, None, ofColor)
ofColor.getA = new_instancemethod(_openframeworks.ofColor_getA, None, ofColor)
ofColor.setR = new_instancemethod(_openframeworks.ofColor_setR, None, ofColor)
ofColor.setG = new_instancemethod(_openframeworks.ofColor_setG, None, ofColor)
ofColor.setB = new_instancemethod(_openframeworks.ofColor_setB, None, ofColor)
ofColor.setA = new_instancemethod(_openframeworks.ofColor_setA, None, ofColor)
ofColor.__str__ = new_instancemethod(_openframeworks.ofColor___str__, None, ofColor)
ofColor_swigregister = _openframeworks.ofColor_swigregister
ofColor_swigregister(ofColor)

def ofColor_fromHsb(*args):
    return _openframeworks.ofColor_fromHsb(*args)
ofColor_fromHsb = _openframeworks.ofColor_fromHsb

def ofColor_fromHex(*args):
    return _openframeworks.ofColor_fromHex(*args)
ofColor_fromHex = _openframeworks.ofColor_fromHex

def ofColor_limit():
    return _openframeworks.ofColor_limit()
ofColor_limit = _openframeworks.ofColor_limit
ofColor.white = _openframeworks.cvar.ofColor_white
ofColor.gray = _openframeworks.cvar.ofColor_gray
ofColor.black = _openframeworks.cvar.ofColor_black
ofColor.red = _openframeworks.cvar.ofColor_red
ofColor.green = _openframeworks.cvar.ofColor_green
ofColor.blue = _openframeworks.cvar.ofColor_blue
ofColor.cyan = _openframeworks.cvar.ofColor_cyan
ofColor.magenta = _openframeworks.cvar.ofColor_magenta
ofColor.yellow = _openframeworks.cvar.ofColor_yellow
ofColor.aliceBlue = _openframeworks.cvar.ofColor_aliceBlue
ofColor.antiqueWhite = _openframeworks.cvar.ofColor_antiqueWhite
ofColor.aqua = _openframeworks.cvar.ofColor_aqua
ofColor.aquamarine = _openframeworks.cvar.ofColor_aquamarine
ofColor.azure = _openframeworks.cvar.ofColor_azure
ofColor.beige = _openframeworks.cvar.ofColor_beige
ofColor.bisque = _openframeworks.cvar.ofColor_bisque
ofColor.blanchedAlmond = _openframeworks.cvar.ofColor_blanchedAlmond
ofColor.blueViolet = _openframeworks.cvar.ofColor_blueViolet
ofColor.brown = _openframeworks.cvar.ofColor_brown
ofColor.burlyWood = _openframeworks.cvar.ofColor_burlyWood
ofColor.cadetBlue = _openframeworks.cvar.ofColor_cadetBlue
ofColor.chartreuse = _openframeworks.cvar.ofColor_chartreuse
ofColor.chocolate = _openframeworks.cvar.ofColor_chocolate
ofColor.coral = _openframeworks.cvar.ofColor_coral
ofColor.cornflowerBlue = _openframeworks.cvar.ofColor_cornflowerBlue
ofColor.cornsilk = _openframeworks.cvar.ofColor_cornsilk
ofColor.crimson = _openframeworks.cvar.ofColor_crimson
ofColor.darkBlue = _openframeworks.cvar.ofColor_darkBlue
ofColor.darkCyan = _openframeworks.cvar.ofColor_darkCyan
ofColor.darkGoldenRod = _openframeworks.cvar.ofColor_darkGoldenRod
ofColor.darkGray = _openframeworks.cvar.ofColor_darkGray
ofColor.darkGrey = _openframeworks.cvar.ofColor_darkGrey
ofColor.darkGreen = _openframeworks.cvar.ofColor_darkGreen
ofColor.darkKhaki = _openframeworks.cvar.ofColor_darkKhaki
ofColor.darkMagenta = _openframeworks.cvar.ofColor_darkMagenta
ofColor.darkOliveGreen = _openframeworks.cvar.ofColor_darkOliveGreen
ofColor.darkorange = _openframeworks.cvar.ofColor_darkorange
ofColor.darkOrchid = _openframeworks.cvar.ofColor_darkOrchid
ofColor.darkRed = _openframeworks.cvar.ofColor_darkRed
ofColor.darkSalmon = _openframeworks.cvar.ofColor_darkSalmon
ofColor.darkSeaGreen = _openframeworks.cvar.ofColor_darkSeaGreen
ofColor.darkSlateBlue = _openframeworks.cvar.ofColor_darkSlateBlue
ofColor.darkSlateGray = _openframeworks.cvar.ofColor_darkSlateGray
ofColor.darkSlateGrey = _openframeworks.cvar.ofColor_darkSlateGrey
ofColor.darkTurquoise = _openframeworks.cvar.ofColor_darkTurquoise
ofColor.darkViolet = _openframeworks.cvar.ofColor_darkViolet
ofColor.deepPink = _openframeworks.cvar.ofColor_deepPink
ofColor.deepSkyBlue = _openframeworks.cvar.ofColor_deepSkyBlue
ofColor.dimGray = _openframeworks.cvar.ofColor_dimGray
ofColor.dimGrey = _openframeworks.cvar.ofColor_dimGrey
ofColor.dodgerBlue = _openframeworks.cvar.ofColor_dodgerBlue
ofColor.fireBrick = _openframeworks.cvar.ofColor_fireBrick
ofColor.floralWhite = _openframeworks.cvar.ofColor_floralWhite
ofColor.forestGreen = _openframeworks.cvar.ofColor_forestGreen
ofColor.fuchsia = _openframeworks.cvar.ofColor_fuchsia
ofColor.gainsboro = _openframeworks.cvar.ofColor_gainsboro
ofColor.ghostWhite = _openframeworks.cvar.ofColor_ghostWhite
ofColor.gold = _openframeworks.cvar.ofColor_gold
ofColor.goldenRod = _openframeworks.cvar.ofColor_goldenRod
ofColor.grey = _openframeworks.cvar.ofColor_grey
ofColor.greenYellow = _openframeworks.cvar.ofColor_greenYellow
ofColor.honeyDew = _openframeworks.cvar.ofColor_honeyDew
ofColor.hotPink = _openframeworks.cvar.ofColor_hotPink
ofColor.indianRed = _openframeworks.cvar.ofColor_indianRed
ofColor.indigo = _openframeworks.cvar.ofColor_indigo
ofColor.ivory = _openframeworks.cvar.ofColor_ivory
ofColor.khaki = _openframeworks.cvar.ofColor_khaki
ofColor.lavender = _openframeworks.cvar.ofColor_lavender
ofColor.lavenderBlush = _openframeworks.cvar.ofColor_lavenderBlush
ofColor.lawnGreen = _openframeworks.cvar.ofColor_lawnGreen
ofColor.lemonChiffon = _openframeworks.cvar.ofColor_lemonChiffon
ofColor.lightBlue = _openframeworks.cvar.ofColor_lightBlue
ofColor.lightCoral = _openframeworks.cvar.ofColor_lightCoral
ofColor.lightCyan = _openframeworks.cvar.ofColor_lightCyan
ofColor.lightGoldenRodYellow = _openframeworks.cvar.ofColor_lightGoldenRodYellow
ofColor.lightGray = _openframeworks.cvar.ofColor_lightGray
ofColor.lightGrey = _openframeworks.cvar.ofColor_lightGrey
ofColor.lightGreen = _openframeworks.cvar.ofColor_lightGreen
ofColor.lightPink = _openframeworks.cvar.ofColor_lightPink
ofColor.lightSalmon = _openframeworks.cvar.ofColor_lightSalmon
ofColor.lightSeaGreen = _openframeworks.cvar.ofColor_lightSeaGreen
ofColor.lightSkyBlue = _openframeworks.cvar.ofColor_lightSkyBlue
ofColor.lightSlateGray = _openframeworks.cvar.ofColor_lightSlateGray
ofColor.lightSlateGrey = _openframeworks.cvar.ofColor_lightSlateGrey
ofColor.lightSteelBlue = _openframeworks.cvar.ofColor_lightSteelBlue
ofColor.lightYellow = _openframeworks.cvar.ofColor_lightYellow
ofColor.lime = _openframeworks.cvar.ofColor_lime
ofColor.limeGreen = _openframeworks.cvar.ofColor_limeGreen
ofColor.linen = _openframeworks.cvar.ofColor_linen
ofColor.maroon = _openframeworks.cvar.ofColor_maroon
ofColor.mediumAquaMarine = _openframeworks.cvar.ofColor_mediumAquaMarine
ofColor.mediumBlue = _openframeworks.cvar.ofColor_mediumBlue
ofColor.mediumOrchid = _openframeworks.cvar.ofColor_mediumOrchid
ofColor.mediumPurple = _openframeworks.cvar.ofColor_mediumPurple
ofColor.mediumSeaGreen = _openframeworks.cvar.ofColor_mediumSeaGreen
ofColor.mediumSlateBlue = _openframeworks.cvar.ofColor_mediumSlateBlue
ofColor.mediumSpringGreen = _openframeworks.cvar.ofColor_mediumSpringGreen
ofColor.mediumTurquoise = _openframeworks.cvar.ofColor_mediumTurquoise
ofColor.mediumVioletRed = _openframeworks.cvar.ofColor_mediumVioletRed
ofColor.midnightBlue = _openframeworks.cvar.ofColor_midnightBlue
ofColor.mintCream = _openframeworks.cvar.ofColor_mintCream
ofColor.mistyRose = _openframeworks.cvar.ofColor_mistyRose
ofColor.moccasin = _openframeworks.cvar.ofColor_moccasin
ofColor.navajoWhite = _openframeworks.cvar.ofColor_navajoWhite
ofColor.navy = _openframeworks.cvar.ofColor_navy
ofColor.oldLace = _openframeworks.cvar.ofColor_oldLace
ofColor.olive = _openframeworks.cvar.ofColor_olive
ofColor.oliveDrab = _openframeworks.cvar.ofColor_oliveDrab
ofColor.orange = _openframeworks.cvar.ofColor_orange
ofColor.orangeRed = _openframeworks.cvar.ofColor_orangeRed
ofColor.orchid = _openframeworks.cvar.ofColor_orchid
ofColor.paleGoldenRod = _openframeworks.cvar.ofColor_paleGoldenRod
ofColor.paleGreen = _openframeworks.cvar.ofColor_paleGreen
ofColor.paleTurquoise = _openframeworks.cvar.ofColor_paleTurquoise
ofColor.paleVioletRed = _openframeworks.cvar.ofColor_paleVioletRed
ofColor.papayaWhip = _openframeworks.cvar.ofColor_papayaWhip
ofColor.peachPuff = _openframeworks.cvar.ofColor_peachPuff
ofColor.peru = _openframeworks.cvar.ofColor_peru
ofColor.pink = _openframeworks.cvar.ofColor_pink
ofColor.plum = _openframeworks.cvar.ofColor_plum
ofColor.powderBlue = _openframeworks.cvar.ofColor_powderBlue
ofColor.purple = _openframeworks.cvar.ofColor_purple
ofColor.rosyBrown = _openframeworks.cvar.ofColor_rosyBrown
ofColor.royalBlue = _openframeworks.cvar.ofColor_royalBlue
ofColor.saddleBrown = _openframeworks.cvar.ofColor_saddleBrown
ofColor.salmon = _openframeworks.cvar.ofColor_salmon
ofColor.sandyBrown = _openframeworks.cvar.ofColor_sandyBrown
ofColor.seaGreen = _openframeworks.cvar.ofColor_seaGreen
ofColor.seaShell = _openframeworks.cvar.ofColor_seaShell
ofColor.sienna = _openframeworks.cvar.ofColor_sienna
ofColor.silver = _openframeworks.cvar.ofColor_silver
ofColor.skyBlue = _openframeworks.cvar.ofColor_skyBlue
ofColor.slateBlue = _openframeworks.cvar.ofColor_slateBlue
ofColor.slateGray = _openframeworks.cvar.ofColor_slateGray
ofColor.slateGrey = _openframeworks.cvar.ofColor_slateGrey
ofColor.snow = _openframeworks.cvar.ofColor_snow
ofColor.springGreen = _openframeworks.cvar.ofColor_springGreen
ofColor.steelBlue = _openframeworks.cvar.ofColor_steelBlue
ofColor.blueSteel = _openframeworks.cvar.ofColor_blueSteel
ofColor.tan = _openframeworks.cvar.ofColor_tan
ofColor.teal = _openframeworks.cvar.ofColor_teal
ofColor.thistle = _openframeworks.cvar.ofColor_thistle
ofColor.tomato = _openframeworks.cvar.ofColor_tomato
ofColor.turquoise = _openframeworks.cvar.ofColor_turquoise
ofColor.violet = _openframeworks.cvar.ofColor_violet
ofColor.wheat = _openframeworks.cvar.ofColor_wheat
ofColor.whiteSmoke = _openframeworks.cvar.ofColor_whiteSmoke
ofColor.yellowGreen = _openframeworks.cvar.ofColor_yellowGreen

class ofFloatColor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openframeworks.ofFloatColor_swiginit(self, _openframeworks.new_ofFloatColor(*args))
    fromHsb = staticmethod(_openframeworks.ofFloatColor_fromHsb)
    fromHex = staticmethod(_openframeworks.ofFloatColor_fromHex)
    limit = staticmethod(_openframeworks.ofFloatColor_limit)

    def __truediv__(self, *args):
        return _openframeworks.ofFloatColor___div__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _openframeworks.ofFloatColor___itruediv__(self, *args)
    __idiv__ = __itruediv__


    r = _swig_property(_openframeworks.ofFloatColor_r_get, _openframeworks.ofFloatColor_r_set)
    g = _swig_property(_openframeworks.ofFloatColor_g_get, _openframeworks.ofFloatColor_g_set)
    b = _swig_property(_openframeworks.ofFloatColor_b_get, _openframeworks.ofFloatColor_b_set)
    a = _swig_property(_openframeworks.ofFloatColor_a_get, _openframeworks.ofFloatColor_a_set)
    __swig_destroy__ = _openframeworks.delete_ofFloatColor
ofFloatColor.set = new_instancemethod(_openframeworks.ofFloatColor_set, None, ofFloatColor)
ofFloatColor.setHex = new_instancemethod(_openframeworks.ofFloatColor_setHex, None, ofFloatColor)
ofFloatColor.setHue = new_instancemethod(_openframeworks.ofFloatColor_setHue, None, ofFloatColor)
ofFloatColor.setHueAngle = new_instancemethod(_openframeworks.ofFloatColor_setHueAngle, None, ofFloatColor)
ofFloatColor.setSaturation = new_instancemethod(_openframeworks.ofFloatColor_setSaturation, None, ofFloatColor)
ofFloatColor.setBrightness = new_instancemethod(_openframeworks.ofFloatColor_setBrightness, None, ofFloatColor)
ofFloatColor.setHsb = new_instancemethod(_openframeworks.ofFloatColor_setHsb, None, ofFloatColor)
ofFloatColor.clamp = new_instancemethod(_openframeworks.ofFloatColor_clamp, None, ofFloatColor)
ofFloatColor.invert = new_instancemethod(_openframeworks.ofFloatColor_invert, None, ofFloatColor)
ofFloatColor.normalize = new_instancemethod(_openframeworks.ofFloatColor_normalize, None, ofFloatColor)
ofFloatColor.lerp = new_instancemethod(_openframeworks.ofFloatColor_lerp, None, ofFloatColor)
ofFloatColor.getClamped = new_instancemethod(_openframeworks.ofFloatColor_getClamped, None, ofFloatColor)
ofFloatColor.getInverted = new_instancemethod(_openframeworks.ofFloatColor_getInverted, None, ofFloatColor)
ofFloatColor.getNormalized = new_instancemethod(_openframeworks.ofFloatColor_getNormalized, None, ofFloatColor)
ofFloatColor.getLerped = new_instancemethod(_openframeworks.ofFloatColor_getLerped, None, ofFloatColor)
ofFloatColor.getHex = new_instancemethod(_openframeworks.ofFloatColor_getHex, None, ofFloatColor)
ofFloatColor.getHue = new_instancemethod(_openframeworks.ofFloatColor_getHue, None, ofFloatColor)
ofFloatColor.getHueAngle = new_instancemethod(_openframeworks.ofFloatColor_getHueAngle, None, ofFloatColor)
ofFloatColor.getSaturation = new_instancemethod(_openframeworks.ofFloatColor_getSaturation, None, ofFloatColor)
ofFloatColor.getBrightness = new_instancemethod(_openframeworks.ofFloatColor_getBrightness, None, ofFloatColor)
ofFloatColor.getLightness = new_instancemethod(_openframeworks.ofFloatColor_getLightness, None, ofFloatColor)
ofFloatColor.getHsb = new_instancemethod(_openframeworks.ofFloatColor_getHsb, None, ofFloatColor)
ofFloatColor.__eq__ = new_instancemethod(_openframeworks.ofFloatColor___eq__, None, ofFloatColor)
ofFloatColor.__ne__ = new_instancemethod(_openframeworks.ofFloatColor___ne__, None, ofFloatColor)
ofFloatColor.__add__ = new_instancemethod(_openframeworks.ofFloatColor___add__, None, ofFloatColor)
ofFloatColor.__iadd__ = new_instancemethod(_openframeworks.ofFloatColor___iadd__, None, ofFloatColor)
ofFloatColor.__sub__ = new_instancemethod(_openframeworks.ofFloatColor___sub__, None, ofFloatColor)
ofFloatColor.__isub__ = new_instancemethod(_openframeworks.ofFloatColor___isub__, None, ofFloatColor)
ofFloatColor.__mul__ = new_instancemethod(_openframeworks.ofFloatColor___mul__, None, ofFloatColor)
ofFloatColor.__imul__ = new_instancemethod(_openframeworks.ofFloatColor___imul__, None, ofFloatColor)
ofFloatColor.__getitem__ = new_instancemethod(_openframeworks.ofFloatColor___getitem__, None, ofFloatColor)
ofFloatColor.getR = new_instancemethod(_openframeworks.ofFloatColor_getR, None, ofFloatColor)
ofFloatColor.getG = new_instancemethod(_openframeworks.ofFloatColor_getG, None, ofFloatColor)
ofFloatColor.getB = new_instancemethod(_openframeworks.ofFloatColor_getB, None, ofFloatColor)
ofFloatColor.getA = new_instancemethod(_openframeworks.ofFloatColor_getA, None, ofFloatColor)
ofFloatColor.setR = new_instancemethod(_openframeworks.ofFloatColor_setR, None, ofFloatColor)
ofFloatColor.setG = new_instancemethod(_openframeworks.ofFloatColor_setG, None, ofFloatColor)
ofFloatColor.setB = new_instancemethod(_openframeworks.ofFloatColor_setB, None, ofFloatColor)
ofFloatColor.setA = new_instancemethod(_openframeworks.ofFloatColor_setA, None, ofFloatColor)
ofFloatColor.__str__ = new_instancemethod(_openframeworks.ofFloatColor___str__, None, ofFloatColor)
ofFloatColor_swigregister = _openframeworks.ofFloatColor_swigregister
ofFloatColor_swigregister(ofFloatColor)

def ofFloatColor_fromHsb(*args):
    return _openframeworks.ofFloatColor_fromHsb(*args)
ofFloatColor_fromHsb = _openframeworks.ofFloatColor_fromHsb

def ofFloatColor_fromHex(*args):
    return _openframeworks.ofFloatColor_fromHex(*args)
ofFloatColor_fromHex = _openframeworks.ofFloatColor_fromHex

def ofFloatColor_limit():
    return _openframeworks.ofFloatColor_limit()
ofFloatColor_limit = _openframeworks.ofFloatColor_limit
ofFloatColor.white = _openframeworks.cvar.ofFloatColor_white
ofFloatColor.gray = _openframeworks.cvar.ofFloatColor_gray
ofFloatColor.black = _openframeworks.cvar.ofFloatColor_black
ofFloatColor.red = _openframeworks.cvar.ofFloatColor_red
ofFloatColor.green = _openframeworks.cvar.ofFloatColor_green
ofFloatColor.blue = _openframeworks.cvar.ofFloatColor_blue
ofFloatColor.cyan = _openframeworks.cvar.ofFloatColor_cyan
ofFloatColor.magenta = _openframeworks.cvar.ofFloatColor_magenta
ofFloatColor.yellow = _openframeworks.cvar.ofFloatColor_yellow
ofFloatColor.aliceBlue = _openframeworks.cvar.ofFloatColor_aliceBlue
ofFloatColor.antiqueWhite = _openframeworks.cvar.ofFloatColor_antiqueWhite
ofFloatColor.aqua = _openframeworks.cvar.ofFloatColor_aqua
ofFloatColor.aquamarine = _openframeworks.cvar.ofFloatColor_aquamarine
ofFloatColor.azure = _openframeworks.cvar.ofFloatColor_azure
ofFloatColor.beige = _openframeworks.cvar.ofFloatColor_beige
ofFloatColor.bisque = _openframeworks.cvar.ofFloatColor_bisque
ofFloatColor.blanchedAlmond = _openframeworks.cvar.ofFloatColor_blanchedAlmond
ofFloatColor.blueViolet = _openframeworks.cvar.ofFloatColor_blueViolet
ofFloatColor.brown = _openframeworks.cvar.ofFloatColor_brown
ofFloatColor.burlyWood = _openframeworks.cvar.ofFloatColor_burlyWood
ofFloatColor.cadetBlue = _openframeworks.cvar.ofFloatColor_cadetBlue
ofFloatColor.chartreuse = _openframeworks.cvar.ofFloatColor_chartreuse
ofFloatColor.chocolate = _openframeworks.cvar.ofFloatColor_chocolate
ofFloatColor.coral = _openframeworks.cvar.ofFloatColor_coral
ofFloatColor.cornflowerBlue = _openframeworks.cvar.ofFloatColor_cornflowerBlue
ofFloatColor.cornsilk = _openframeworks.cvar.ofFloatColor_cornsilk
ofFloatColor.crimson = _openframeworks.cvar.ofFloatColor_crimson
ofFloatColor.darkBlue = _openframeworks.cvar.ofFloatColor_darkBlue
ofFloatColor.darkCyan = _openframeworks.cvar.ofFloatColor_darkCyan
ofFloatColor.darkGoldenRod = _openframeworks.cvar.ofFloatColor_darkGoldenRod
ofFloatColor.darkGray = _openframeworks.cvar.ofFloatColor_darkGray
ofFloatColor.darkGrey = _openframeworks.cvar.ofFloatColor_darkGrey
ofFloatColor.darkGreen = _openframeworks.cvar.ofFloatColor_darkGreen
ofFloatColor.darkKhaki = _openframeworks.cvar.ofFloatColor_darkKhaki
ofFloatColor.darkMagenta = _openframeworks.cvar.ofFloatColor_darkMagenta
ofFloatColor.darkOliveGreen = _openframeworks.cvar.ofFloatColor_darkOliveGreen
ofFloatColor.darkorange = _openframeworks.cvar.ofFloatColor_darkorange
ofFloatColor.darkOrchid = _openframeworks.cvar.ofFloatColor_darkOrchid
ofFloatColor.darkRed = _openframeworks.cvar.ofFloatColor_darkRed
ofFloatColor.darkSalmon = _openframeworks.cvar.ofFloatColor_darkSalmon
ofFloatColor.darkSeaGreen = _openframeworks.cvar.ofFloatColor_darkSeaGreen
ofFloatColor.darkSlateBlue = _openframeworks.cvar.ofFloatColor_darkSlateBlue
ofFloatColor.darkSlateGray = _openframeworks.cvar.ofFloatColor_darkSlateGray
ofFloatColor.darkSlateGrey = _openframeworks.cvar.ofFloatColor_darkSlateGrey
ofFloatColor.darkTurquoise = _openframeworks.cvar.ofFloatColor_darkTurquoise
ofFloatColor.darkViolet = _openframeworks.cvar.ofFloatColor_darkViolet
ofFloatColor.deepPink = _openframeworks.cvar.ofFloatColor_deepPink
ofFloatColor.deepSkyBlue = _openframeworks.cvar.ofFloatColor_deepSkyBlue
ofFloatColor.dimGray = _openframeworks.cvar.ofFloatColor_dimGray
ofFloatColor.dimGrey = _openframeworks.cvar.ofFloatColor_dimGrey
ofFloatColor.dodgerBlue = _openframeworks.cvar.ofFloatColor_dodgerBlue
ofFloatColor.fireBrick = _openframeworks.cvar.ofFloatColor_fireBrick
ofFloatColor.floralWhite = _openframeworks.cvar.ofFloatColor_floralWhite
ofFloatColor.forestGreen = _openframeworks.cvar.ofFloatColor_forestGreen
ofFloatColor.fuchsia = _openframeworks.cvar.ofFloatColor_fuchsia
ofFloatColor.gainsboro = _openframeworks.cvar.ofFloatColor_gainsboro
ofFloatColor.ghostWhite = _openframeworks.cvar.ofFloatColor_ghostWhite
ofFloatColor.gold = _openframeworks.cvar.ofFloatColor_gold
ofFloatColor.goldenRod = _openframeworks.cvar.ofFloatColor_goldenRod
ofFloatColor.grey = _openframeworks.cvar.ofFloatColor_grey
ofFloatColor.greenYellow = _openframeworks.cvar.ofFloatColor_greenYellow
ofFloatColor.honeyDew = _openframeworks.cvar.ofFloatColor_honeyDew
ofFloatColor.hotPink = _openframeworks.cvar.ofFloatColor_hotPink
ofFloatColor.indianRed = _openframeworks.cvar.ofFloatColor_indianRed
ofFloatColor.indigo = _openframeworks.cvar.ofFloatColor_indigo
ofFloatColor.ivory = _openframeworks.cvar.ofFloatColor_ivory
ofFloatColor.khaki = _openframeworks.cvar.ofFloatColor_khaki
ofFloatColor.lavender = _openframeworks.cvar.ofFloatColor_lavender
ofFloatColor.lavenderBlush = _openframeworks.cvar.ofFloatColor_lavenderBlush
ofFloatColor.lawnGreen = _openframeworks.cvar.ofFloatColor_lawnGreen
ofFloatColor.lemonChiffon = _openframeworks.cvar.ofFloatColor_lemonChiffon
ofFloatColor.lightBlue = _openframeworks.cvar.ofFloatColor_lightBlue
ofFloatColor.lightCoral = _openframeworks.cvar.ofFloatColor_lightCoral
ofFloatColor.lightCyan = _openframeworks.cvar.ofFloatColor_lightCyan
ofFloatColor.lightGoldenRodYellow = _openframeworks.cvar.ofFloatColor_lightGoldenRodYellow
ofFloatColor.lightGray = _openframeworks.cvar.ofFloatColor_lightGray
ofFloatColor.lightGrey = _openframeworks.cvar.ofFloatColor_lightGrey
ofFloatColor.lightGreen = _openframeworks.cvar.ofFloatColor_lightGreen
ofFloatColor.lightPink = _openframeworks.cvar.ofFloatColor_lightPink
ofFloatColor.lightSalmon = _openframeworks.cvar.ofFloatColor_lightSalmon
ofFloatColor.lightSeaGreen = _openframeworks.cvar.ofFloatColor_lightSeaGreen
ofFloatColor.lightSkyBlue = _openframeworks.cvar.ofFloatColor_lightSkyBlue
ofFloatColor.lightSlateGray = _openframeworks.cvar.ofFloatColor_lightSlateGray
ofFloatColor.lightSlateGrey = _openframeworks.cvar.ofFloatColor_lightSlateGrey
ofFloatColor.lightSteelBlue = _openframeworks.cvar.ofFloatColor_lightSteelBlue
ofFloatColor.lightYellow = _openframeworks.cvar.ofFloatColor_lightYellow
ofFloatColor.lime = _openframeworks.cvar.ofFloatColor_lime
ofFloatColor.limeGreen = _openframeworks.cvar.ofFloatColor_limeGreen
ofFloatColor.linen = _openframeworks.cvar.ofFloatColor_linen
ofFloatColor.maroon = _openframeworks.cvar.ofFloatColor_maroon
ofFloatColor.mediumAquaMarine = _openframeworks.cvar.ofFloatColor_mediumAquaMarine
ofFloatColor.mediumBlue = _openframeworks.cvar.ofFloatColor_mediumBlue
ofFloatColor.mediumOrchid = _openframeworks.cvar.ofFloatColor_mediumOrchid
ofFloatColor.mediumPurple = _openframeworks.cvar.ofFloatColor_mediumPurple
ofFloatColor.mediumSeaGreen = _openframeworks.cvar.ofFloatColor_mediumSeaGreen
ofFloatColor.mediumSlateBlue = _openframeworks.cvar.ofFloatColor_mediumSlateBlue
ofFloatColor.mediumSpringGreen = _openframeworks.cvar.ofFloatColor_mediumSpringGreen
ofFloatColor.mediumTurquoise = _openframeworks.cvar.ofFloatColor_mediumTurquoise
ofFloatColor.mediumVioletRed = _openframeworks.cvar.ofFloatColor_mediumVioletRed
ofFloatColor.midnightBlue = _openframeworks.cvar.ofFloatColor_midnightBlue
ofFloatColor.mintCream = _openframeworks.cvar.ofFloatColor_mintCream
ofFloatColor.mistyRose = _openframeworks.cvar.ofFloatColor_mistyRose
ofFloatColor.moccasin = _openframeworks.cvar.ofFloatColor_moccasin
ofFloatColor.navajoWhite = _openframeworks.cvar.ofFloatColor_navajoWhite
ofFloatColor.navy = _openframeworks.cvar.ofFloatColor_navy
ofFloatColor.oldLace = _openframeworks.cvar.ofFloatColor_oldLace
ofFloatColor.olive = _openframeworks.cvar.ofFloatColor_olive
ofFloatColor.oliveDrab = _openframeworks.cvar.ofFloatColor_oliveDrab
ofFloatColor.orange = _openframeworks.cvar.ofFloatColor_orange
ofFloatColor.orangeRed = _openframeworks.cvar.ofFloatColor_orangeRed
ofFloatColor.orchid = _openframeworks.cvar.ofFloatColor_orchid
ofFloatColor.paleGoldenRod = _openframeworks.cvar.ofFloatColor_paleGoldenRod
ofFloatColor.paleGreen = _openframeworks.cvar.ofFloatColor_paleGreen
ofFloatColor.paleTurquoise = _openframeworks.cvar.ofFloatColor_paleTurquoise
ofFloatColor.paleVioletRed = _openframeworks.cvar.ofFloatColor_paleVioletRed
ofFloatColor.papayaWhip = _openframeworks.cvar.ofFloatColor_papayaWhip
ofFloatColor.peachPuff = _openframeworks.cvar.ofFloatColor_peachPuff
ofFloatColor.peru = _openframeworks.cvar.ofFloatColor_peru
ofFloatColor.pink = _openframeworks.cvar.ofFloatColor_pink
ofFloatColor.plum = _openframeworks.cvar.ofFloatColor_plum
ofFloatColor.powderBlue = _openframeworks.cvar.ofFloatColor_powderBlue
ofFloatColor.purple = _openframeworks.cvar.ofFloatColor_purple
ofFloatColor.rosyBrown = _openframeworks.cvar.ofFloatColor_rosyBrown
ofFloatColor.royalBlue = _openframeworks.cvar.ofFloatColor_royalBlue
ofFloatColor.saddleBrown = _openframeworks.cvar.ofFloatColor_saddleBrown
ofFloatColor.salmon = _openframeworks.cvar.ofFloatColor_salmon
ofFloatColor.sandyBrown = _openframeworks.cvar.ofFloatColor_sandyBrown
ofFloatColor.seaGreen = _openframeworks.cvar.ofFloatColor_seaGreen
ofFloatColor.seaShell = _openframeworks.cvar.ofFloatColor_seaShell
ofFloatColor.sienna = _openframeworks.cvar.ofFloatColor_sienna
ofFloatColor.silver = _openframeworks.cvar.ofFloatColor_silver
ofFloatColor.skyBlue = _openframeworks.cvar.ofFloatColor_skyBlue
ofFloatColor.slateBlue = _openframeworks.cvar.ofFloatColor_slateBlue
ofFloatColor.slateGray = _openframeworks.cvar.ofFloatColor_slateGray
ofFloatColor.slateGrey = _openframeworks.cvar.ofFloatColor_slateGrey
ofFloatColor.snow = _openframeworks.cvar.ofFloatColor_snow
ofFloatColor.springGreen = _openframeworks.cvar.ofFloatColor_springGreen
ofFloatColor.steelBlue = _openframeworks.cvar.ofFloatColor_steelBlue
ofFloatColor.blueSteel = _openframeworks.cvar.ofFloatColor_blueSteel
ofFloatColor.tan = _openframeworks.cvar.ofFloatColor_tan
ofFloatColor.teal = _openframeworks.cvar.ofFloatColor_teal
ofFloatColor.thistle = _openframeworks.cvar.ofFloatColor_thistle
ofFloatColor.tomato = _openframeworks.cvar.ofFloatColor_tomato
ofFloatColor.turquoise = _openframeworks.cvar.ofFloatColor_turquoise
ofFloatColor.violet = _openframeworks.cvar.ofFloatColor_violet
ofFloatColor.wheat = _openframeworks.cvar.ofFloatColor_wheat
ofFloatColor.whiteSmoke = _openframeworks.cvar.ofFloatColor_whiteSmoke
ofFloatColor.yellowGreen = _openframeworks.cvar.ofFloatColor_yellowGreen

class ofShortColor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openframeworks.ofShortColor_swiginit(self, _openframeworks.new_ofShortColor(*args))
    fromHsb = staticmethod(_openframeworks.ofShortColor_fromHsb)
    fromHex = staticmethod(_openframeworks.ofShortColor_fromHex)
    limit = staticmethod(_openframeworks.ofShortColor_limit)

    def __truediv__(self, *args):
        return _openframeworks.ofShortColor___div__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _openframeworks.ofShortColor___itruediv__(self, *args)
    __idiv__ = __itruediv__


    r = _swig_property(_openframeworks.ofShortColor_r_get, _openframeworks.ofShortColor_r_set)
    g = _swig_property(_openframeworks.ofShortColor_g_get, _openframeworks.ofShortColor_g_set)
    b = _swig_property(_openframeworks.ofShortColor_b_get, _openframeworks.ofShortColor_b_set)
    a = _swig_property(_openframeworks.ofShortColor_a_get, _openframeworks.ofShortColor_a_set)
    __swig_destroy__ = _openframeworks.delete_ofShortColor
ofShortColor.set = new_instancemethod(_openframeworks.ofShortColor_set, None, ofShortColor)
ofShortColor.setHex = new_instancemethod(_openframeworks.ofShortColor_setHex, None, ofShortColor)
ofShortColor.setHue = new_instancemethod(_openframeworks.ofShortColor_setHue, None, ofShortColor)
ofShortColor.setHueAngle = new_instancemethod(_openframeworks.ofShortColor_setHueAngle, None, ofShortColor)
ofShortColor.setSaturation = new_instancemethod(_openframeworks.ofShortColor_setSaturation, None, ofShortColor)
ofShortColor.setBrightness = new_instancemethod(_openframeworks.ofShortColor_setBrightness, None, ofShortColor)
ofShortColor.setHsb = new_instancemethod(_openframeworks.ofShortColor_setHsb, None, ofShortColor)
ofShortColor.clamp = new_instancemethod(_openframeworks.ofShortColor_clamp, None, ofShortColor)
ofShortColor.invert = new_instancemethod(_openframeworks.ofShortColor_invert, None, ofShortColor)
ofShortColor.normalize = new_instancemethod(_openframeworks.ofShortColor_normalize, None, ofShortColor)
ofShortColor.lerp = new_instancemethod(_openframeworks.ofShortColor_lerp, None, ofShortColor)
ofShortColor.getClamped = new_instancemethod(_openframeworks.ofShortColor_getClamped, None, ofShortColor)
ofShortColor.getInverted = new_instancemethod(_openframeworks.ofShortColor_getInverted, None, ofShortColor)
ofShortColor.getNormalized = new_instancemethod(_openframeworks.ofShortColor_getNormalized, None, ofShortColor)
ofShortColor.getLerped = new_instancemethod(_openframeworks.ofShortColor_getLerped, None, ofShortColor)
ofShortColor.getHex = new_instancemethod(_openframeworks.ofShortColor_getHex, None, ofShortColor)
ofShortColor.getHue = new_instancemethod(_openframeworks.ofShortColor_getHue, None, ofShortColor)
ofShortColor.getHueAngle = new_instancemethod(_openframeworks.ofShortColor_getHueAngle, None, ofShortColor)
ofShortColor.getSaturation = new_instancemethod(_openframeworks.ofShortColor_getSaturation, None, ofShortColor)
ofShortColor.getBrightness = new_instancemethod(_openframeworks.ofShortColor_getBrightness, None, ofShortColor)
ofShortColor.getLightness = new_instancemethod(_openframeworks.ofShortColor_getLightness, None, ofShortColor)
ofShortColor.getHsb = new_instancemethod(_openframeworks.ofShortColor_getHsb, None, ofShortColor)
ofShortColor.__eq__ = new_instancemethod(_openframeworks.ofShortColor___eq__, None, ofShortColor)
ofShortColor.__ne__ = new_instancemethod(_openframeworks.ofShortColor___ne__, None, ofShortColor)
ofShortColor.__add__ = new_instancemethod(_openframeworks.ofShortColor___add__, None, ofShortColor)
ofShortColor.__iadd__ = new_instancemethod(_openframeworks.ofShortColor___iadd__, None, ofShortColor)
ofShortColor.__sub__ = new_instancemethod(_openframeworks.ofShortColor___sub__, None, ofShortColor)
ofShortColor.__isub__ = new_instancemethod(_openframeworks.ofShortColor___isub__, None, ofShortColor)
ofShortColor.__mul__ = new_instancemethod(_openframeworks.ofShortColor___mul__, None, ofShortColor)
ofShortColor.__imul__ = new_instancemethod(_openframeworks.ofShortColor___imul__, None, ofShortColor)
ofShortColor.__getitem__ = new_instancemethod(_openframeworks.ofShortColor___getitem__, None, ofShortColor)
ofShortColor.getR = new_instancemethod(_openframeworks.ofShortColor_getR, None, ofShortColor)
ofShortColor.getG = new_instancemethod(_openframeworks.ofShortColor_getG, None, ofShortColor)
ofShortColor.getB = new_instancemethod(_openframeworks.ofShortColor_getB, None, ofShortColor)
ofShortColor.getA = new_instancemethod(_openframeworks.ofShortColor_getA, None, ofShortColor)
ofShortColor.setR = new_instancemethod(_openframeworks.ofShortColor_setR, None, ofShortColor)
ofShortColor.setG = new_instancemethod(_openframeworks.ofShortColor_setG, None, ofShortColor)
ofShortColor.setB = new_instancemethod(_openframeworks.ofShortColor_setB, None, ofShortColor)
ofShortColor.setA = new_instancemethod(_openframeworks.ofShortColor_setA, None, ofShortColor)
ofShortColor.__str__ = new_instancemethod(_openframeworks.ofShortColor___str__, None, ofShortColor)
ofShortColor_swigregister = _openframeworks.ofShortColor_swigregister
ofShortColor_swigregister(ofShortColor)

def ofShortColor_fromHsb(*args):
    return _openframeworks.ofShortColor_fromHsb(*args)
ofShortColor_fromHsb = _openframeworks.ofShortColor_fromHsb

def ofShortColor_fromHex(*args):
    return _openframeworks.ofShortColor_fromHex(*args)
ofShortColor_fromHex = _openframeworks.ofShortColor_fromHex

def ofShortColor_limit():
    return _openframeworks.ofShortColor_limit()
ofShortColor_limit = _openframeworks.ofShortColor_limit
ofShortColor.white = _openframeworks.cvar.ofShortColor_white
ofShortColor.gray = _openframeworks.cvar.ofShortColor_gray
ofShortColor.black = _openframeworks.cvar.ofShortColor_black
ofShortColor.red = _openframeworks.cvar.ofShortColor_red
ofShortColor.green = _openframeworks.cvar.ofShortColor_green
ofShortColor.blue = _openframeworks.cvar.ofShortColor_blue
ofShortColor.cyan = _openframeworks.cvar.ofShortColor_cyan
ofShortColor.magenta = _openframeworks.cvar.ofShortColor_magenta
ofShortColor.yellow = _openframeworks.cvar.ofShortColor_yellow
ofShortColor.aliceBlue = _openframeworks.cvar.ofShortColor_aliceBlue
ofShortColor.antiqueWhite = _openframeworks.cvar.ofShortColor_antiqueWhite
ofShortColor.aqua = _openframeworks.cvar.ofShortColor_aqua
ofShortColor.aquamarine = _openframeworks.cvar.ofShortColor_aquamarine
ofShortColor.azure = _openframeworks.cvar.ofShortColor_azure
ofShortColor.beige = _openframeworks.cvar.ofShortColor_beige
ofShortColor.bisque = _openframeworks.cvar.ofShortColor_bisque
ofShortColor.blanchedAlmond = _openframeworks.cvar.ofShortColor_blanchedAlmond
ofShortColor.blueViolet = _openframeworks.cvar.ofShortColor_blueViolet
ofShortColor.brown = _openframeworks.cvar.ofShortColor_brown
ofShortColor.burlyWood = _openframeworks.cvar.ofShortColor_burlyWood
ofShortColor.cadetBlue = _openframeworks.cvar.ofShortColor_cadetBlue
ofShortColor.chartreuse = _openframeworks.cvar.ofShortColor_chartreuse
ofShortColor.chocolate = _openframeworks.cvar.ofShortColor_chocolate
ofShortColor.coral = _openframeworks.cvar.ofShortColor_coral
ofShortColor.cornflowerBlue = _openframeworks.cvar.ofShortColor_cornflowerBlue
ofShortColor.cornsilk = _openframeworks.cvar.ofShortColor_cornsilk
ofShortColor.crimson = _openframeworks.cvar.ofShortColor_crimson
ofShortColor.darkBlue = _openframeworks.cvar.ofShortColor_darkBlue
ofShortColor.darkCyan = _openframeworks.cvar.ofShortColor_darkCyan
ofShortColor.darkGoldenRod = _openframeworks.cvar.ofShortColor_darkGoldenRod
ofShortColor.darkGray = _openframeworks.cvar.ofShortColor_darkGray
ofShortColor.darkGrey = _openframeworks.cvar.ofShortColor_darkGrey
ofShortColor.darkGreen = _openframeworks.cvar.ofShortColor_darkGreen
ofShortColor.darkKhaki = _openframeworks.cvar.ofShortColor_darkKhaki
ofShortColor.darkMagenta = _openframeworks.cvar.ofShortColor_darkMagenta
ofShortColor.darkOliveGreen = _openframeworks.cvar.ofShortColor_darkOliveGreen
ofShortColor.darkorange = _openframeworks.cvar.ofShortColor_darkorange
ofShortColor.darkOrchid = _openframeworks.cvar.ofShortColor_darkOrchid
ofShortColor.darkRed = _openframeworks.cvar.ofShortColor_darkRed
ofShortColor.darkSalmon = _openframeworks.cvar.ofShortColor_darkSalmon
ofShortColor.darkSeaGreen = _openframeworks.cvar.ofShortColor_darkSeaGreen
ofShortColor.darkSlateBlue = _openframeworks.cvar.ofShortColor_darkSlateBlue
ofShortColor.darkSlateGray = _openframeworks.cvar.ofShortColor_darkSlateGray
ofShortColor.darkSlateGrey = _openframeworks.cvar.ofShortColor_darkSlateGrey
ofShortColor.darkTurquoise = _openframeworks.cvar.ofShortColor_darkTurquoise
ofShortColor.darkViolet = _openframeworks.cvar.ofShortColor_darkViolet
ofShortColor.deepPink = _openframeworks.cvar.ofShortColor_deepPink
ofShortColor.deepSkyBlue = _openframeworks.cvar.ofShortColor_deepSkyBlue
ofShortColor.dimGray = _openframeworks.cvar.ofShortColor_dimGray
ofShortColor.dimGrey = _openframeworks.cvar.ofShortColor_dimGrey
ofShortColor.dodgerBlue = _openframeworks.cvar.ofShortColor_dodgerBlue
ofShortColor.fireBrick = _openframeworks.cvar.ofShortColor_fireBrick
ofShortColor.floralWhite = _openframeworks.cvar.ofShortColor_floralWhite
ofShortColor.forestGreen = _openframeworks.cvar.ofShortColor_forestGreen
ofShortColor.fuchsia = _openframeworks.cvar.ofShortColor_fuchsia
ofShortColor.gainsboro = _openframeworks.cvar.ofShortColor_gainsboro
ofShortColor.ghostWhite = _openframeworks.cvar.ofShortColor_ghostWhite
ofShortColor.gold = _openframeworks.cvar.ofShortColor_gold
ofShortColor.goldenRod = _openframeworks.cvar.ofShortColor_goldenRod
ofShortColor.grey = _openframeworks.cvar.ofShortColor_grey
ofShortColor.greenYellow = _openframeworks.cvar.ofShortColor_greenYellow
ofShortColor.honeyDew = _openframeworks.cvar.ofShortColor_honeyDew
ofShortColor.hotPink = _openframeworks.cvar.ofShortColor_hotPink
ofShortColor.indianRed = _openframeworks.cvar.ofShortColor_indianRed
ofShortColor.indigo = _openframeworks.cvar.ofShortColor_indigo
ofShortColor.ivory = _openframeworks.cvar.ofShortColor_ivory
ofShortColor.khaki = _openframeworks.cvar.ofShortColor_khaki
ofShortColor.lavender = _openframeworks.cvar.ofShortColor_lavender
ofShortColor.lavenderBlush = _openframeworks.cvar.ofShortColor_lavenderBlush
ofShortColor.lawnGreen = _openframeworks.cvar.ofShortColor_lawnGreen
ofShortColor.lemonChiffon = _openframeworks.cvar.ofShortColor_lemonChiffon
ofShortColor.lightBlue = _openframeworks.cvar.ofShortColor_lightBlue
ofShortColor.lightCoral = _openframeworks.cvar.ofShortColor_lightCoral
ofShortColor.lightCyan = _openframeworks.cvar.ofShortColor_lightCyan
ofShortColor.lightGoldenRodYellow = _openframeworks.cvar.ofShortColor_lightGoldenRodYellow
ofShortColor.lightGray = _openframeworks.cvar.ofShortColor_lightGray
ofShortColor.lightGrey = _openframeworks.cvar.ofShortColor_lightGrey
ofShortColor.lightGreen = _openframeworks.cvar.ofShortColor_lightGreen
ofShortColor.lightPink = _openframeworks.cvar.ofShortColor_lightPink
ofShortColor.lightSalmon = _openframeworks.cvar.ofShortColor_lightSalmon
ofShortColor.lightSeaGreen = _openframeworks.cvar.ofShortColor_lightSeaGreen
ofShortColor.lightSkyBlue = _openframeworks.cvar.ofShortColor_lightSkyBlue
ofShortColor.lightSlateGray = _openframeworks.cvar.ofShortColor_lightSlateGray
ofShortColor.lightSlateGrey = _openframeworks.cvar.ofShortColor_lightSlateGrey
ofShortColor.lightSteelBlue = _openframeworks.cvar.ofShortColor_lightSteelBlue
ofShortColor.lightYellow = _openframeworks.cvar.ofShortColor_lightYellow
ofShortColor.lime = _openframeworks.cvar.ofShortColor_lime
ofShortColor.limeGreen = _openframeworks.cvar.ofShortColor_limeGreen
ofShortColor.linen = _openframeworks.cvar.ofShortColor_linen
ofShortColor.maroon = _openframeworks.cvar.ofShortColor_maroon
ofShortColor.mediumAquaMarine = _openframeworks.cvar.ofShortColor_mediumAquaMarine
ofShortColor.mediumBlue = _openframeworks.cvar.ofShortColor_mediumBlue
ofShortColor.mediumOrchid = _openframeworks.cvar.ofShortColor_mediumOrchid
ofShortColor.mediumPurple = _openframeworks.cvar.ofShortColor_mediumPurple
ofShortColor.mediumSeaGreen = _openframeworks.cvar.ofShortColor_mediumSeaGreen
ofShortColor.mediumSlateBlue = _openframeworks.cvar.ofShortColor_mediumSlateBlue
ofShortColor.mediumSpringGreen = _openframeworks.cvar.ofShortColor_mediumSpringGreen
ofShortColor.mediumTurquoise = _openframeworks.cvar.ofShortColor_mediumTurquoise
ofShortColor.mediumVioletRed = _openframeworks.cvar.ofShortColor_mediumVioletRed
ofShortColor.midnightBlue = _openframeworks.cvar.ofShortColor_midnightBlue
ofShortColor.mintCream = _openframeworks.cvar.ofShortColor_mintCream
ofShortColor.mistyRose = _openframeworks.cvar.ofShortColor_mistyRose
ofShortColor.moccasin = _openframeworks.cvar.ofShortColor_moccasin
ofShortColor.navajoWhite = _openframeworks.cvar.ofShortColor_navajoWhite
ofShortColor.navy = _openframeworks.cvar.ofShortColor_navy
ofShortColor.oldLace = _openframeworks.cvar.ofShortColor_oldLace
ofShortColor.olive = _openframeworks.cvar.ofShortColor_olive
ofShortColor.oliveDrab = _openframeworks.cvar.ofShortColor_oliveDrab
ofShortColor.orange = _openframeworks.cvar.ofShortColor_orange
ofShortColor.orangeRed = _openframeworks.cvar.ofShortColor_orangeRed
ofShortColor.orchid = _openframeworks.cvar.ofShortColor_orchid
ofShortColor.paleGoldenRod = _openframeworks.cvar.ofShortColor_paleGoldenRod
ofShortColor.paleGreen = _openframeworks.cvar.ofShortColor_paleGreen
ofShortColor.paleTurquoise = _openframeworks.cvar.ofShortColor_paleTurquoise
ofShortColor.paleVioletRed = _openframeworks.cvar.ofShortColor_paleVioletRed
ofShortColor.papayaWhip = _openframeworks.cvar.ofShortColor_papayaWhip
ofShortColor.peachPuff = _openframeworks.cvar.ofShortColor_peachPuff
ofShortColor.peru = _openframeworks.cvar.ofShortColor_peru
ofShortColor.pink = _openframeworks.cvar.ofShortColor_pink
ofShortColor.plum = _openframeworks.cvar.ofShortColor_plum
ofShortColor.powderBlue = _openframeworks.cvar.ofShortColor_powderBlue
ofShortColor.purple = _openframeworks.cvar.ofShortColor_purple
ofShortColor.rosyBrown = _openframeworks.cvar.ofShortColor_rosyBrown
ofShortColor.royalBlue = _openframeworks.cvar.ofShortColor_royalBlue
ofShortColor.saddleBrown = _openframeworks.cvar.ofShortColor_saddleBrown
ofShortColor.salmon = _openframeworks.cvar.ofShortColor_salmon
ofShortColor.sandyBrown = _openframeworks.cvar.ofShortColor_sandyBrown
ofShortColor.seaGreen = _openframeworks.cvar.ofShortColor_seaGreen
ofShortColor.seaShell = _openframeworks.cvar.ofShortColor_seaShell
ofShortColor.sienna = _openframeworks.cvar.ofShortColor_sienna
ofShortColor.silver = _openframeworks.cvar.ofShortColor_silver
ofShortColor.skyBlue = _openframeworks.cvar.ofShortColor_skyBlue
ofShortColor.slateBlue = _openframeworks.cvar.ofShortColor_slateBlue
ofShortColor.slateGray = _openframeworks.cvar.ofShortColor_slateGray
ofShortColor.slateGrey = _openframeworks.cvar.ofShortColor_slateGrey
ofShortColor.snow = _openframeworks.cvar.ofShortColor_snow
ofShortColor.springGreen = _openframeworks.cvar.ofShortColor_springGreen
ofShortColor.steelBlue = _openframeworks.cvar.ofShortColor_steelBlue
ofShortColor.blueSteel = _openframeworks.cvar.ofShortColor_blueSteel
ofShortColor.tan = _openframeworks.cvar.ofShortColor_tan
ofShortColor.teal = _openframeworks.cvar.ofShortColor_teal
ofShortColor.thistle = _openframeworks.cvar.ofShortColor_thistle
ofShortColor.tomato = _openframeworks.cvar.ofShortColor_tomato
ofShortColor.turquoise = _openframeworks.cvar.ofShortColor_turquoise
ofShortColor.violet = _openframeworks.cvar.ofShortColor_violet
ofShortColor.wheat = _openframeworks.cvar.ofShortColor_wheat
ofShortColor.whiteSmoke = _openframeworks.cvar.ofShortColor_whiteSmoke
ofShortColor.yellowGreen = _openframeworks.cvar.ofShortColor_yellowGreen

OF_ASPECT_RATIO_IGNORE = _openframeworks.OF_ASPECT_RATIO_IGNORE
OF_ASPECT_RATIO_KEEP = _openframeworks.OF_ASPECT_RATIO_KEEP
OF_ASPECT_RATIO_KEEP_BY_EXPANDING = _openframeworks.OF_ASPECT_RATIO_KEEP_BY_EXPANDING
OF_ALIGN_VERT_IGNORE = _openframeworks.OF_ALIGN_VERT_IGNORE
OF_ALIGN_VERT_TOP = _openframeworks.OF_ALIGN_VERT_TOP
OF_ALIGN_VERT_BOTTOM = _openframeworks.OF_ALIGN_VERT_BOTTOM
OF_ALIGN_VERT_CENTER = _openframeworks.OF_ALIGN_VERT_CENTER
OF_ALIGN_HORZ_IGNORE = _openframeworks.OF_ALIGN_HORZ_IGNORE
OF_ALIGN_HORZ_LEFT = _openframeworks.OF_ALIGN_HORZ_LEFT
OF_ALIGN_HORZ_RIGHT = _openframeworks.OF_ALIGN_HORZ_RIGHT
OF_ALIGN_HORZ_CENTER = _openframeworks.OF_ALIGN_HORZ_CENTER
OF_SCALEMODE_FIT = _openframeworks.OF_SCALEMODE_FIT
OF_SCALEMODE_FILL = _openframeworks.OF_SCALEMODE_FILL
OF_SCALEMODE_CENTER = _openframeworks.OF_SCALEMODE_CENTER
OF_SCALEMODE_STRETCH_TO_FILL = _openframeworks.OF_SCALEMODE_STRETCH_TO_FILL
class ofRectangle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openframeworks.ofRectangle_swiginit(self, _openframeworks.new_ofRectangle(*args))
    __swig_destroy__ = _openframeworks.delete_ofRectangle
    position = _swig_property(_openframeworks.ofRectangle_position_get, _openframeworks.ofRectangle_position_set)
    width = _swig_property(_openframeworks.ofRectangle_width_get, _openframeworks.ofRectangle_width_set)
    height = _swig_property(_openframeworks.ofRectangle_height_get, _openframeworks.ofRectangle_height_set)
    x = _swig_property(_openframeworks.ofRectangle_x_get, _openframeworks.ofRectangle_x_set)
    y = _swig_property(_openframeworks.ofRectangle_y_get, _openframeworks.ofRectangle_y_set)
ofRectangle.set = new_instancemethod(_openframeworks.ofRectangle_set, None, ofRectangle)
ofRectangle.setX = new_instancemethod(_openframeworks.ofRectangle_setX, None, ofRectangle)
ofRectangle.setY = new_instancemethod(_openframeworks.ofRectangle_setY, None, ofRectangle)
ofRectangle.setWidth = new_instancemethod(_openframeworks.ofRectangle_setWidth, None, ofRectangle)
ofRectangle.setHeight = new_instancemethod(_openframeworks.ofRectangle_setHeight, None, ofRectangle)
ofRectangle.setPosition = new_instancemethod(_openframeworks.ofRectangle_setPosition, None, ofRectangle)
ofRectangle.setSize = new_instancemethod(_openframeworks.ofRectangle_setSize, None, ofRectangle)
ofRectangle.setFromCenter = new_instancemethod(_openframeworks.ofRectangle_setFromCenter, None, ofRectangle)
ofRectangle.translate = new_instancemethod(_openframeworks.ofRectangle_translate, None, ofRectangle)
ofRectangle.translateX = new_instancemethod(_openframeworks.ofRectangle_translateX, None, ofRectangle)
ofRectangle.translateY = new_instancemethod(_openframeworks.ofRectangle_translateY, None, ofRectangle)
ofRectangle.scale = new_instancemethod(_openframeworks.ofRectangle_scale, None, ofRectangle)
ofRectangle.scaleWidth = new_instancemethod(_openframeworks.ofRectangle_scaleWidth, None, ofRectangle)
ofRectangle.scaleHeight = new_instancemethod(_openframeworks.ofRectangle_scaleHeight, None, ofRectangle)
ofRectangle.scaleFromCenter = new_instancemethod(_openframeworks.ofRectangle_scaleFromCenter, None, ofRectangle)
ofRectangle.scaleToScaleMode = new_instancemethod(_openframeworks.ofRectangle_scaleToScaleMode, None, ofRectangle)
ofRectangle.scaleToAspectRatio = new_instancemethod(_openframeworks.ofRectangle_scaleToAspectRatio, None, ofRectangle)
ofRectangle.scaleTo = new_instancemethod(_openframeworks.ofRectangle_scaleTo, None, ofRectangle)
ofRectangle.alignToHorz = new_instancemethod(_openframeworks.ofRectangle_alignToHorz, None, ofRectangle)
ofRectangle.alignToVert = new_instancemethod(_openframeworks.ofRectangle_alignToVert, None, ofRectangle)
ofRectangle.alignTo = new_instancemethod(_openframeworks.ofRectangle_alignTo, None, ofRectangle)
ofRectangle.inside = new_instancemethod(_openframeworks.ofRectangle_inside, None, ofRectangle)
ofRectangle.intersects = new_instancemethod(_openframeworks.ofRectangle_intersects, None, ofRectangle)
ofRectangle.growToInclude = new_instancemethod(_openframeworks.ofRectangle_growToInclude, None, ofRectangle)
ofRectangle.getIntersection = new_instancemethod(_openframeworks.ofRectangle_getIntersection, None, ofRectangle)
ofRectangle.getUnion = new_instancemethod(_openframeworks.ofRectangle_getUnion, None, ofRectangle)
ofRectangle.standardize = new_instancemethod(_openframeworks.ofRectangle_standardize, None, ofRectangle)
ofRectangle.getStandardized = new_instancemethod(_openframeworks.ofRectangle_getStandardized, None, ofRectangle)
ofRectangle.isStandardized = new_instancemethod(_openframeworks.ofRectangle_isStandardized, None, ofRectangle)
ofRectangle.getArea = new_instancemethod(_openframeworks.ofRectangle_getArea, None, ofRectangle)
ofRectangle.getPerimeter = new_instancemethod(_openframeworks.ofRectangle_getPerimeter, None, ofRectangle)
ofRectangle.getAspectRatio = new_instancemethod(_openframeworks.ofRectangle_getAspectRatio, None, ofRectangle)
ofRectangle.isEmpty = new_instancemethod(_openframeworks.ofRectangle_isEmpty, None, ofRectangle)
ofRectangle.getMin = new_instancemethod(_openframeworks.ofRectangle_getMin, None, ofRectangle)
ofRectangle.getMax = new_instancemethod(_openframeworks.ofRectangle_getMax, None, ofRectangle)
ofRectangle.getMinX = new_instancemethod(_openframeworks.ofRectangle_getMinX, None, ofRectangle)
ofRectangle.getMaxX = new_instancemethod(_openframeworks.ofRectangle_getMaxX, None, ofRectangle)
ofRectangle.getMinY = new_instancemethod(_openframeworks.ofRectangle_getMinY, None, ofRectangle)
ofRectangle.getMaxY = new_instancemethod(_openframeworks.ofRectangle_getMaxY, None, ofRectangle)
ofRectangle.getLeft = new_instancemethod(_openframeworks.ofRectangle_getLeft, None, ofRectangle)
ofRectangle.getRight = new_instancemethod(_openframeworks.ofRectangle_getRight, None, ofRectangle)
ofRectangle.getTop = new_instancemethod(_openframeworks.ofRectangle_getTop, None, ofRectangle)
ofRectangle.getBottom = new_instancemethod(_openframeworks.ofRectangle_getBottom, None, ofRectangle)
ofRectangle.getTopLeft = new_instancemethod(_openframeworks.ofRectangle_getTopLeft, None, ofRectangle)
ofRectangle.getTopRight = new_instancemethod(_openframeworks.ofRectangle_getTopRight, None, ofRectangle)
ofRectangle.getBottomLeft = new_instancemethod(_openframeworks.ofRectangle_getBottomLeft, None, ofRectangle)
ofRectangle.getBottomRight = new_instancemethod(_openframeworks.ofRectangle_getBottomRight, None, ofRectangle)
ofRectangle.getHorzAnchor = new_instancemethod(_openframeworks.ofRectangle_getHorzAnchor, None, ofRectangle)
ofRectangle.getVertAnchor = new_instancemethod(_openframeworks.ofRectangle_getVertAnchor, None, ofRectangle)
ofRectangle.getPosition = new_instancemethod(_openframeworks.ofRectangle_getPosition, None, ofRectangle)
ofRectangle.getCenter = new_instancemethod(_openframeworks.ofRectangle_getCenter, None, ofRectangle)
ofRectangle.getX = new_instancemethod(_openframeworks.ofRectangle_getX, None, ofRectangle)
ofRectangle.getY = new_instancemethod(_openframeworks.ofRectangle_getY, None, ofRectangle)
ofRectangle.getWidth = new_instancemethod(_openframeworks.ofRectangle_getWidth, None, ofRectangle)
ofRectangle.getHeight = new_instancemethod(_openframeworks.ofRectangle_getHeight, None, ofRectangle)
ofRectangle.map = new_instancemethod(_openframeworks.ofRectangle_map, None, ofRectangle)
ofRectangle.mapClamp = new_instancemethod(_openframeworks.ofRectangle_mapClamp, None, ofRectangle)
ofRectangle.__add__ = new_instancemethod(_openframeworks.ofRectangle___add__, None, ofRectangle)
ofRectangle.__sub__ = new_instancemethod(_openframeworks.ofRectangle___sub__, None, ofRectangle)
ofRectangle.__eq__ = new_instancemethod(_openframeworks.ofRectangle___eq__, None, ofRectangle)
ofRectangle.__ne__ = new_instancemethod(_openframeworks.ofRectangle___ne__, None, ofRectangle)
ofRectangle.isZero = new_instancemethod(_openframeworks.ofRectangle_isZero, None, ofRectangle)
ofRectangle.__str__ = new_instancemethod(_openframeworks.ofRectangle___str__, None, ofRectangle)
ofRectangle_swigregister = _openframeworks.ofRectangle_swigregister
ofRectangle_swigregister(ofRectangle)

class ofFpsCounter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openframeworks.ofFpsCounter_swiginit(self, _openframeworks.new_ofFpsCounter(*args))
    __swig_destroy__ = _openframeworks.delete_ofFpsCounter
ofFpsCounter.newFrame = new_instancemethod(_openframeworks.ofFpsCounter_newFrame, None, ofFpsCounter)
ofFpsCounter.update = new_instancemethod(_openframeworks.ofFpsCounter_update, None, ofFpsCounter)
ofFpsCounter.getFps = new_instancemethod(_openframeworks.ofFpsCounter_getFps, None, ofFpsCounter)
ofFpsCounter.getNumFrames = new_instancemethod(_openframeworks.ofFpsCounter_getNumFrames, None, ofFpsCounter)
ofFpsCounter.getLastFrameNanos = new_instancemethod(_openframeworks.ofFpsCounter_getLastFrameNanos, None, ofFpsCounter)
ofFpsCounter.getLastFrameSecs = new_instancemethod(_openframeworks.ofFpsCounter_getLastFrameSecs, None, ofFpsCounter)
ofFpsCounter.getLastFrameFilteredNanos = new_instancemethod(_openframeworks.ofFpsCounter_getLastFrameFilteredNanos, None, ofFpsCounter)
ofFpsCounter.getLastFrameFilteredSecs = new_instancemethod(_openframeworks.ofFpsCounter_getLastFrameFilteredSecs, None, ofFpsCounter)
ofFpsCounter.setFilterAlpha = new_instancemethod(_openframeworks.ofFpsCounter_setFilterAlpha, None, ofFpsCounter)
ofFpsCounter_swigregister = _openframeworks.ofFpsCounter_swigregister
ofFpsCounter_swigregister(ofFpsCounter)

class ofXml(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _openframeworks.ofXml_swiginit(self, _openframeworks.new_ofXml())
    __swig_destroy__ = _openframeworks.delete_ofXml
ofXml.load = new_instancemethod(_openframeworks.ofXml_load, None, ofXml)
ofXml.parse = new_instancemethod(_openframeworks.ofXml_parse, None, ofXml)
ofXml.save = new_instancemethod(_openframeworks.ofXml_save, None, ofXml)
ofXml.clear = new_instancemethod(_openframeworks.ofXml_clear, None, ofXml)
ofXml.toString = new_instancemethod(_openframeworks.ofXml_toString, None, ofXml)
ofXml.getChild = new_instancemethod(_openframeworks.ofXml_getChild, None, ofXml)
ofXml.getChildren = new_instancemethod(_openframeworks.ofXml_getChildren, None, ofXml)
ofXml.appendChild = new_instancemethod(_openframeworks.ofXml_appendChild, None, ofXml)
ofXml.prependChild = new_instancemethod(_openframeworks.ofXml_prependChild, None, ofXml)
ofXml.removeChild = new_instancemethod(_openframeworks.ofXml_removeChild, None, ofXml)
ofXml.insertChildAfter = new_instancemethod(_openframeworks.ofXml_insertChildAfter, None, ofXml)
ofXml.insertChildBefore = new_instancemethod(_openframeworks.ofXml_insertChildBefore, None, ofXml)
ofXml.getNextSibling = new_instancemethod(_openframeworks.ofXml_getNextSibling, None, ofXml)
ofXml.getPreviousSibling = new_instancemethod(_openframeworks.ofXml_getPreviousSibling, None, ofXml)
ofXml.getFirstChild = new_instancemethod(_openframeworks.ofXml_getFirstChild, None, ofXml)
ofXml.getLastChild = new_instancemethod(_openframeworks.ofXml_getLastChild, None, ofXml)
ofXml.getAttribute = new_instancemethod(_openframeworks.ofXml_getAttribute, None, ofXml)
ofXml.getAttributes = new_instancemethod(_openframeworks.ofXml_getAttributes, None, ofXml)
ofXml.getFirstAttribute = new_instancemethod(_openframeworks.ofXml_getFirstAttribute, None, ofXml)
ofXml.getLastAttribute = new_instancemethod(_openframeworks.ofXml_getLastAttribute, None, ofXml)
ofXml.appendAttribute = new_instancemethod(_openframeworks.ofXml_appendAttribute, None, ofXml)
ofXml.prependAttribute = new_instancemethod(_openframeworks.ofXml_prependAttribute, None, ofXml)
ofXml.removeAttribute = new_instancemethod(_openframeworks.ofXml_removeAttribute, None, ofXml)
ofXml.findFirst = new_instancemethod(_openframeworks.ofXml_findFirst, None, ofXml)
ofXml.getValue = new_instancemethod(_openframeworks.ofXml_getValue, None, ofXml)
ofXml.getName = new_instancemethod(_openframeworks.ofXml_getName, None, ofXml)
ofXml.set = new_instancemethod(_openframeworks.ofXml_set, None, ofXml)
ofXml.setName = new_instancemethod(_openframeworks.ofXml_setName, None, ofXml)
ofXml.getIntValue = new_instancemethod(_openframeworks.ofXml_getIntValue, None, ofXml)
ofXml.getUintValue = new_instancemethod(_openframeworks.ofXml_getUintValue, None, ofXml)
ofXml.getFloatValue = new_instancemethod(_openframeworks.ofXml_getFloatValue, None, ofXml)
ofXml.getDoubleValue = new_instancemethod(_openframeworks.ofXml_getDoubleValue, None, ofXml)
ofXml.getBoolValue = new_instancemethod(_openframeworks.ofXml_getBoolValue, None, ofXml)
ofXml_swigregister = _openframeworks.ofXml_swigregister
ofXml_swigregister(ofXml)

class ofXmlAttributeIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _openframeworks.ofXmlAttributeIterator_swiginit(self, _openframeworks.new_ofXmlAttributeIterator())
    __swig_destroy__ = _openframeworks.delete_ofXmlAttributeIterator
ofXmlAttributeIterator.__eq__ = new_instancemethod(_openframeworks.ofXmlAttributeIterator___eq__, None, ofXmlAttributeIterator)
ofXmlAttributeIterator.__ne__ = new_instancemethod(_openframeworks.ofXmlAttributeIterator___ne__, None, ofXmlAttributeIterator)
ofXmlAttributeIterator.__ref__ = new_instancemethod(_openframeworks.ofXmlAttributeIterator___ref__, None, ofXmlAttributeIterator)
ofXmlAttributeIterator.__deref__ = new_instancemethod(_openframeworks.ofXmlAttributeIterator___deref__, None, ofXmlAttributeIterator)
ofXmlAttributeIterator_swigregister = _openframeworks.ofXmlAttributeIterator_swigregister
ofXmlAttributeIterator_swigregister(ofXmlAttributeIterator)


def ofSerialize(xml, parameter):
    return _openframeworks.ofSerialize(xml, parameter)
ofSerialize = _openframeworks.ofSerialize

def ofDeserialize(xml, parameter):
    return _openframeworks.ofDeserialize(xml, parameter)
ofDeserialize = _openframeworks.ofDeserialize
class ofMatrixStack(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, window):
        _openframeworks.ofMatrixStack_swiginit(self, _openframeworks.new_ofMatrixStack(window))
    __swig_destroy__ = _openframeworks.delete_ofMatrixStack
ofMatrixStack.setRenderSurfaceNoMatrixFlip = new_instancemethod(_openframeworks.ofMatrixStack_setRenderSurfaceNoMatrixFlip, None, ofMatrixStack)
ofMatrixStack.setRenderSurface = new_instancemethod(_openframeworks.ofMatrixStack_setRenderSurface, None, ofMatrixStack)
ofMatrixStack.setOrientation = new_instancemethod(_openframeworks.ofMatrixStack_setOrientation, None, ofMatrixStack)
ofMatrixStack.getOrientation = new_instancemethod(_openframeworks.ofMatrixStack_getOrientation, None, ofMatrixStack)
ofMatrixStack.viewport = new_instancemethod(_openframeworks.ofMatrixStack_viewport, None, ofMatrixStack)
ofMatrixStack.nativeViewport = new_instancemethod(_openframeworks.ofMatrixStack_nativeViewport, None, ofMatrixStack)
ofMatrixStack.getCurrentViewport = new_instancemethod(_openframeworks.ofMatrixStack_getCurrentViewport, None, ofMatrixStack)
ofMatrixStack.getNativeViewport = new_instancemethod(_openframeworks.ofMatrixStack_getNativeViewport, None, ofMatrixStack)
ofMatrixStack.getFullSurfaceViewport = new_instancemethod(_openframeworks.ofMatrixStack_getFullSurfaceViewport, None, ofMatrixStack)
ofMatrixStack.getProjectionMatrix = new_instancemethod(_openframeworks.ofMatrixStack_getProjectionMatrix, None, ofMatrixStack)
ofMatrixStack.getViewInverse = new_instancemethod(_openframeworks.ofMatrixStack_getViewInverse, None, ofMatrixStack)
ofMatrixStack.getViewMatrix = new_instancemethod(_openframeworks.ofMatrixStack_getViewMatrix, None, ofMatrixStack)
ofMatrixStack.getModelMatrix = new_instancemethod(_openframeworks.ofMatrixStack_getModelMatrix, None, ofMatrixStack)
ofMatrixStack.getModelViewMatrix = new_instancemethod(_openframeworks.ofMatrixStack_getModelViewMatrix, None, ofMatrixStack)
ofMatrixStack.getModelViewProjectionMatrix = new_instancemethod(_openframeworks.ofMatrixStack_getModelViewProjectionMatrix, None, ofMatrixStack)
ofMatrixStack.getTextureMatrix = new_instancemethod(_openframeworks.ofMatrixStack_getTextureMatrix, None, ofMatrixStack)
ofMatrixStack.getCurrentMatrix = new_instancemethod(_openframeworks.ofMatrixStack_getCurrentMatrix, None, ofMatrixStack)
ofMatrixStack.getProjectionMatrixNoOrientation = new_instancemethod(_openframeworks.ofMatrixStack_getProjectionMatrixNoOrientation, None, ofMatrixStack)
ofMatrixStack.getOrientationMatrix = new_instancemethod(_openframeworks.ofMatrixStack_getOrientationMatrix, None, ofMatrixStack)
ofMatrixStack.getOrientationMatrixInverse = new_instancemethod(_openframeworks.ofMatrixStack_getOrientationMatrixInverse, None, ofMatrixStack)
ofMatrixStack.getCurrentMatrixMode = new_instancemethod(_openframeworks.ofMatrixStack_getCurrentMatrixMode, None, ofMatrixStack)
ofMatrixStack.getHandedness = new_instancemethod(_openframeworks.ofMatrixStack_getHandedness, None, ofMatrixStack)
ofMatrixStack.isVFlipped = new_instancemethod(_openframeworks.ofMatrixStack_isVFlipped, None, ofMatrixStack)
ofMatrixStack.customMatrixNeedsFlip = new_instancemethod(_openframeworks.ofMatrixStack_customMatrixNeedsFlip, None, ofMatrixStack)
ofMatrixStack.pushView = new_instancemethod(_openframeworks.ofMatrixStack_pushView, None, ofMatrixStack)
ofMatrixStack.popView = new_instancemethod(_openframeworks.ofMatrixStack_popView, None, ofMatrixStack)
ofMatrixStack.pushMatrix = new_instancemethod(_openframeworks.ofMatrixStack_pushMatrix, None, ofMatrixStack)
ofMatrixStack.popMatrix = new_instancemethod(_openframeworks.ofMatrixStack_popMatrix, None, ofMatrixStack)
ofMatrixStack.translate = new_instancemethod(_openframeworks.ofMatrixStack_translate, None, ofMatrixStack)
ofMatrixStack.scale = new_instancemethod(_openframeworks.ofMatrixStack_scale, None, ofMatrixStack)
ofMatrixStack.rotateRad = new_instancemethod(_openframeworks.ofMatrixStack_rotateRad, None, ofMatrixStack)
ofMatrixStack.matrixMode = new_instancemethod(_openframeworks.ofMatrixStack_matrixMode, None, ofMatrixStack)
ofMatrixStack.loadIdentityMatrix = new_instancemethod(_openframeworks.ofMatrixStack_loadIdentityMatrix, None, ofMatrixStack)
ofMatrixStack.loadMatrix = new_instancemethod(_openframeworks.ofMatrixStack_loadMatrix, None, ofMatrixStack)
ofMatrixStack.multMatrix = new_instancemethod(_openframeworks.ofMatrixStack_multMatrix, None, ofMatrixStack)
ofMatrixStack.loadViewMatrix = new_instancemethod(_openframeworks.ofMatrixStack_loadViewMatrix, None, ofMatrixStack)
ofMatrixStack.multViewMatrix = new_instancemethod(_openframeworks.ofMatrixStack_multViewMatrix, None, ofMatrixStack)
ofMatrixStack.clearStacks = new_instancemethod(_openframeworks.ofMatrixStack_clearStacks, None, ofMatrixStack)
ofMatrixStack.doesHardwareOrientation = new_instancemethod(_openframeworks.ofMatrixStack_doesHardwareOrientation, None, ofMatrixStack)
ofMatrixStack_swigregister = _openframeworks.ofMatrixStack_swigregister
ofMatrixStack_swigregister(ofMatrixStack)

class ofBuffer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openframeworks.ofBuffer_swiginit(self, _openframeworks.new_ofBuffer(*args))
    __swig_destroy__ = _openframeworks.delete_ofBuffer
ofBuffer.set = new_instancemethod(_openframeworks.ofBuffer_set, None, ofBuffer)
ofBuffer.setall = new_instancemethod(_openframeworks.ofBuffer_setall, None, ofBuffer)
ofBuffer.append = new_instancemethod(_openframeworks.ofBuffer_append, None, ofBuffer)
ofBuffer.reserve = new_instancemethod(_openframeworks.ofBuffer_reserve, None, ofBuffer)
ofBuffer.clear = new_instancemethod(_openframeworks.ofBuffer_clear, None, ofBuffer)
ofBuffer.allocate = new_instancemethod(_openframeworks.ofBuffer_allocate, None, ofBuffer)
ofBuffer.resize = new_instancemethod(_openframeworks.ofBuffer_resize, None, ofBuffer)
ofBuffer.getData = new_instancemethod(_openframeworks.ofBuffer_getData, None, ofBuffer)
ofBuffer.getText = new_instancemethod(_openframeworks.ofBuffer_getText, None, ofBuffer)
ofBuffer.size = new_instancemethod(_openframeworks.ofBuffer_size, None, ofBuffer)
ofBuffer_swigregister = _openframeworks.ofBuffer_swigregister
ofBuffer_swigregister(ofBuffer)


def ofBufferFromFile(path, binary=True):
    return _openframeworks.ofBufferFromFile(path, binary)
ofBufferFromFile = _openframeworks.ofBufferFromFile

def ofBufferToFile(path, buffer, binary=True):
    return _openframeworks.ofBufferToFile(path, buffer, binary)
ofBufferToFile = _openframeworks.ofBufferToFile
class ofFilePath(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getFileExt = staticmethod(_openframeworks.ofFilePath_getFileExt)
    removeExt = staticmethod(_openframeworks.ofFilePath_removeExt)
    addLeadingSlash = staticmethod(_openframeworks.ofFilePath_addLeadingSlash)
    addTrailingSlash = staticmethod(_openframeworks.ofFilePath_addTrailingSlash)
    removeTrailingSlash = staticmethod(_openframeworks.ofFilePath_removeTrailingSlash)
    getPathForDirectory = staticmethod(_openframeworks.ofFilePath_getPathForDirectory)
    getAbsolutePath = staticmethod(_openframeworks.ofFilePath_getAbsolutePath)
    isAbsolute = staticmethod(_openframeworks.ofFilePath_isAbsolute)
    getFileName = staticmethod(_openframeworks.ofFilePath_getFileName)
    getBaseName = staticmethod(_openframeworks.ofFilePath_getBaseName)
    getEnclosingDirectory = staticmethod(_openframeworks.ofFilePath_getEnclosingDirectory)
    createEnclosingDirectory = staticmethod(_openframeworks.ofFilePath_createEnclosingDirectory)
    getCurrentWorkingDirectory = staticmethod(_openframeworks.ofFilePath_getCurrentWorkingDirectory)
    join = staticmethod(_openframeworks.ofFilePath_join)
    getCurrentExePath = staticmethod(_openframeworks.ofFilePath_getCurrentExePath)
    getCurrentExeDir = staticmethod(_openframeworks.ofFilePath_getCurrentExeDir)
    getUserHomeDir = staticmethod(_openframeworks.ofFilePath_getUserHomeDir)
    makeRelative = staticmethod(_openframeworks.ofFilePath_makeRelative)

    def __init__(self):
        _openframeworks.ofFilePath_swiginit(self, _openframeworks.new_ofFilePath())
    __swig_destroy__ = _openframeworks.delete_ofFilePath
ofFilePath_swigregister = _openframeworks.ofFilePath_swigregister
ofFilePath_swigregister(ofFilePath)

def ofFilePath_getFileExt(filename):
    return _openframeworks.ofFilePath_getFileExt(filename)
ofFilePath_getFileExt = _openframeworks.ofFilePath_getFileExt

def ofFilePath_removeExt(filename):
    return _openframeworks.ofFilePath_removeExt(filename)
ofFilePath_removeExt = _openframeworks.ofFilePath_removeExt

def ofFilePath_addLeadingSlash(path):
    return _openframeworks.ofFilePath_addLeadingSlash(path)
ofFilePath_addLeadingSlash = _openframeworks.ofFilePath_addLeadingSlash

def ofFilePath_addTrailingSlash(path):
    return _openframeworks.ofFilePath_addTrailingSlash(path)
ofFilePath_addTrailingSlash = _openframeworks.ofFilePath_addTrailingSlash

def ofFilePath_removeTrailingSlash(path):
    return _openframeworks.ofFilePath_removeTrailingSlash(path)
ofFilePath_removeTrailingSlash = _openframeworks.ofFilePath_removeTrailingSlash

def ofFilePath_getPathForDirectory(path):
    return _openframeworks.ofFilePath_getPathForDirectory(path)
ofFilePath_getPathForDirectory = _openframeworks.ofFilePath_getPathForDirectory

def ofFilePath_getAbsolutePath(path, bRelativeToData=True):
    return _openframeworks.ofFilePath_getAbsolutePath(path, bRelativeToData)
ofFilePath_getAbsolutePath = _openframeworks.ofFilePath_getAbsolutePath

def ofFilePath_isAbsolute(path):
    return _openframeworks.ofFilePath_isAbsolute(path)
ofFilePath_isAbsolute = _openframeworks.ofFilePath_isAbsolute

def ofFilePath_getFileName(filePath, bRelativeToData=True):
    return _openframeworks.ofFilePath_getFileName(filePath, bRelativeToData)
ofFilePath_getFileName = _openframeworks.ofFilePath_getFileName

def ofFilePath_getBaseName(filePath):
    return _openframeworks.ofFilePath_getBaseName(filePath)
ofFilePath_getBaseName = _openframeworks.ofFilePath_getBaseName

def ofFilePath_getEnclosingDirectory(filePath, bRelativeToData=True):
    return _openframeworks.ofFilePath_getEnclosingDirectory(filePath, bRelativeToData)
ofFilePath_getEnclosingDirectory = _openframeworks.ofFilePath_getEnclosingDirectory

def ofFilePath_createEnclosingDirectory(filePath, bRelativeToData=True, bRecursive=True):
    return _openframeworks.ofFilePath_createEnclosingDirectory(filePath, bRelativeToData, bRecursive)
ofFilePath_createEnclosingDirectory = _openframeworks.ofFilePath_createEnclosingDirectory

def ofFilePath_getCurrentWorkingDirectory():
    return _openframeworks.ofFilePath_getCurrentWorkingDirectory()
ofFilePath_getCurrentWorkingDirectory = _openframeworks.ofFilePath_getCurrentWorkingDirectory

def ofFilePath_join(path1, path2):
    return _openframeworks.ofFilePath_join(path1, path2)
ofFilePath_join = _openframeworks.ofFilePath_join

def ofFilePath_getCurrentExePath():
    return _openframeworks.ofFilePath_getCurrentExePath()
ofFilePath_getCurrentExePath = _openframeworks.ofFilePath_getCurrentExePath

def ofFilePath_getCurrentExeDir():
    return _openframeworks.ofFilePath_getCurrentExeDir()
ofFilePath_getCurrentExeDir = _openframeworks.ofFilePath_getCurrentExeDir

def ofFilePath_getUserHomeDir():
    return _openframeworks.ofFilePath_getUserHomeDir()
ofFilePath_getUserHomeDir = _openframeworks.ofFilePath_getUserHomeDir

def ofFilePath_makeRelative(arg2, to):
    return _openframeworks.ofFilePath_makeRelative(arg2, to)
ofFilePath_makeRelative = _openframeworks.ofFilePath_makeRelative

class ofFile(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Reference = _openframeworks.ofFile_Reference
    ReadOnly = _openframeworks.ofFile_ReadOnly
    WriteOnly = _openframeworks.ofFile_WriteOnly
    ReadWrite = _openframeworks.ofFile_ReadWrite
    Append = _openframeworks.ofFile_Append

    def __init__(self, *args):
        _openframeworks.ofFile_swiginit(self, _openframeworks.new_ofFile(*args))
    __swig_destroy__ = _openframeworks.delete_ofFile
    copyFromTo = staticmethod(_openframeworks.ofFile_copyFromTo)
    moveFromTo = staticmethod(_openframeworks.ofFile_moveFromTo)
    doesFileExist = staticmethod(_openframeworks.ofFile_doesFileExist)
    removeFile = staticmethod(_openframeworks.ofFile_removeFile)
ofFile.open = new_instancemethod(_openframeworks.ofFile_open, None, ofFile)
ofFile.openFromCWD = new_instancemethod(_openframeworks.ofFile_openFromCWD, None, ofFile)
ofFile.changeMode = new_instancemethod(_openframeworks.ofFile_changeMode, None, ofFile)
ofFile.close = new_instancemethod(_openframeworks.ofFile_close, None, ofFile)
ofFile.create = new_instancemethod(_openframeworks.ofFile_create, None, ofFile)
ofFile.exists = new_instancemethod(_openframeworks.ofFile_exists, None, ofFile)
ofFile.path = new_instancemethod(_openframeworks.ofFile_path, None, ofFile)
ofFile.getExtension = new_instancemethod(_openframeworks.ofFile_getExtension, None, ofFile)
ofFile.getFileName = new_instancemethod(_openframeworks.ofFile_getFileName, None, ofFile)
ofFile.getBaseName = new_instancemethod(_openframeworks.ofFile_getBaseName, None, ofFile)
ofFile.getEnclosingDirectory = new_instancemethod(_openframeworks.ofFile_getEnclosingDirectory, None, ofFile)
ofFile.getAbsolutePath = new_instancemethod(_openframeworks.ofFile_getAbsolutePath, None, ofFile)
ofFile.canRead = new_instancemethod(_openframeworks.ofFile_canRead, None, ofFile)
ofFile.canWrite = new_instancemethod(_openframeworks.ofFile_canWrite, None, ofFile)
ofFile.canExecute = new_instancemethod(_openframeworks.ofFile_canExecute, None, ofFile)
ofFile.isFile = new_instancemethod(_openframeworks.ofFile_isFile, None, ofFile)
ofFile.isLink = new_instancemethod(_openframeworks.ofFile_isLink, None, ofFile)
ofFile.isDirectory = new_instancemethod(_openframeworks.ofFile_isDirectory, None, ofFile)
ofFile.isDevice = new_instancemethod(_openframeworks.ofFile_isDevice, None, ofFile)
ofFile.isHidden = new_instancemethod(_openframeworks.ofFile_isHidden, None, ofFile)
ofFile.setWriteable = new_instancemethod(_openframeworks.ofFile_setWriteable, None, ofFile)
ofFile.setReadable = new_instancemethod(_openframeworks.ofFile_setReadable, None, ofFile)
ofFile.setExecutable = new_instancemethod(_openframeworks.ofFile_setExecutable, None, ofFile)
ofFile.copyTo = new_instancemethod(_openframeworks.ofFile_copyTo, None, ofFile)
ofFile.moveTo = new_instancemethod(_openframeworks.ofFile_moveTo, None, ofFile)
ofFile.renameTo = new_instancemethod(_openframeworks.ofFile_renameTo, None, ofFile)
ofFile.remove = new_instancemethod(_openframeworks.ofFile_remove, None, ofFile)
ofFile.getSize = new_instancemethod(_openframeworks.ofFile_getSize, None, ofFile)
ofFile.__eq__ = new_instancemethod(_openframeworks.ofFile___eq__, None, ofFile)
ofFile.__ne__ = new_instancemethod(_openframeworks.ofFile___ne__, None, ofFile)
ofFile.__lt__ = new_instancemethod(_openframeworks.ofFile___lt__, None, ofFile)
ofFile.__le__ = new_instancemethod(_openframeworks.ofFile___le__, None, ofFile)
ofFile.__gt__ = new_instancemethod(_openframeworks.ofFile___gt__, None, ofFile)
ofFile.__ge__ = new_instancemethod(_openframeworks.ofFile___ge__, None, ofFile)
ofFile.readToBuffer = new_instancemethod(_openframeworks.ofFile_readToBuffer, None, ofFile)
ofFile.writeFromBuffer = new_instancemethod(_openframeworks.ofFile_writeFromBuffer, None, ofFile)
ofFile_swigregister = _openframeworks.ofFile_swigregister
ofFile_swigregister(ofFile)

def ofFile_copyFromTo(pathSrc, pathDst, bRelativeToData=True, overwrite=False):
    return _openframeworks.ofFile_copyFromTo(pathSrc, pathDst, bRelativeToData, overwrite)
ofFile_copyFromTo = _openframeworks.ofFile_copyFromTo

def ofFile_moveFromTo(pathSrc, pathDst, bRelativeToData=True, overwrite=False):
    return _openframeworks.ofFile_moveFromTo(pathSrc, pathDst, bRelativeToData, overwrite)
ofFile_moveFromTo = _openframeworks.ofFile_moveFromTo

def ofFile_doesFileExist(fPath, bRelativeToData=True):
    return _openframeworks.ofFile_doesFileExist(fPath, bRelativeToData)
ofFile_doesFileExist = _openframeworks.ofFile_doesFileExist

def ofFile_removeFile(path, bRelativeToData=True):
    return _openframeworks.ofFile_removeFile(path, bRelativeToData)
ofFile_removeFile = _openframeworks.ofFile_removeFile

class ofDirectory(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openframeworks.ofDirectory_swiginit(self, _openframeworks.new_ofDirectory(*args))
    createDirectory = staticmethod(_openframeworks.ofDirectory_createDirectory)
    isDirectoryEmpty = staticmethod(_openframeworks.ofDirectory_isDirectoryEmpty)
    doesDirectoryExist = staticmethod(_openframeworks.ofDirectory_doesDirectoryExist)
    removeDirectory = staticmethod(_openframeworks.ofDirectory_removeDirectory)
    __swig_destroy__ = _openframeworks.delete_ofDirectory
ofDirectory.open = new_instancemethod(_openframeworks.ofDirectory_open, None, ofDirectory)
ofDirectory.openFromCWD = new_instancemethod(_openframeworks.ofDirectory_openFromCWD, None, ofDirectory)
ofDirectory.close = new_instancemethod(_openframeworks.ofDirectory_close, None, ofDirectory)
ofDirectory.create = new_instancemethod(_openframeworks.ofDirectory_create, None, ofDirectory)
ofDirectory.exists = new_instancemethod(_openframeworks.ofDirectory_exists, None, ofDirectory)
ofDirectory.path = new_instancemethod(_openframeworks.ofDirectory_path, None, ofDirectory)
ofDirectory.getAbsolutePath = new_instancemethod(_openframeworks.ofDirectory_getAbsolutePath, None, ofDirectory)
ofDirectory.canRead = new_instancemethod(_openframeworks.ofDirectory_canRead, None, ofDirectory)
ofDirectory.canWrite = new_instancemethod(_openframeworks.ofDirectory_canWrite, None, ofDirectory)
ofDirectory.canExecute = new_instancemethod(_openframeworks.ofDirectory_canExecute, None, ofDirectory)
ofDirectory.isDirectory = new_instancemethod(_openframeworks.ofDirectory_isDirectory, None, ofDirectory)
ofDirectory.isHidden = new_instancemethod(_openframeworks.ofDirectory_isHidden, None, ofDirectory)
ofDirectory.setWriteable = new_instancemethod(_openframeworks.ofDirectory_setWriteable, None, ofDirectory)
ofDirectory.setReadable = new_instancemethod(_openframeworks.ofDirectory_setReadable, None, ofDirectory)
ofDirectory.setExecutable = new_instancemethod(_openframeworks.ofDirectory_setExecutable, None, ofDirectory)
ofDirectory.setShowHidden = new_instancemethod(_openframeworks.ofDirectory_setShowHidden, None, ofDirectory)
ofDirectory.copyTo = new_instancemethod(_openframeworks.ofDirectory_copyTo, None, ofDirectory)
ofDirectory.moveTo = new_instancemethod(_openframeworks.ofDirectory_moveTo, None, ofDirectory)
ofDirectory.renameTo = new_instancemethod(_openframeworks.ofDirectory_renameTo, None, ofDirectory)
ofDirectory.remove = new_instancemethod(_openframeworks.ofDirectory_remove, None, ofDirectory)
ofDirectory.allowExt = new_instancemethod(_openframeworks.ofDirectory_allowExt, None, ofDirectory)
ofDirectory.listDir = new_instancemethod(_openframeworks.ofDirectory_listDir, None, ofDirectory)
ofDirectory.getOriginalDirectory = new_instancemethod(_openframeworks.ofDirectory_getOriginalDirectory, None, ofDirectory)
ofDirectory.getName = new_instancemethod(_openframeworks.ofDirectory_getName, None, ofDirectory)
ofDirectory.getPath = new_instancemethod(_openframeworks.ofDirectory_getPath, None, ofDirectory)
ofDirectory.getFile = new_instancemethod(_openframeworks.ofDirectory_getFile, None, ofDirectory)
ofDirectory.getFiles = new_instancemethod(_openframeworks.ofDirectory_getFiles, None, ofDirectory)
ofDirectory.__getitem__ = new_instancemethod(_openframeworks.ofDirectory___getitem__, None, ofDirectory)
ofDirectory.getShowHidden = new_instancemethod(_openframeworks.ofDirectory_getShowHidden, None, ofDirectory)
ofDirectory.reset = new_instancemethod(_openframeworks.ofDirectory_reset, None, ofDirectory)
ofDirectory.sort = new_instancemethod(_openframeworks.ofDirectory_sort, None, ofDirectory)
ofDirectory.sortByDate = new_instancemethod(_openframeworks.ofDirectory_sortByDate, None, ofDirectory)
ofDirectory.getSorted = new_instancemethod(_openframeworks.ofDirectory_getSorted, None, ofDirectory)
ofDirectory.size = new_instancemethod(_openframeworks.ofDirectory_size, None, ofDirectory)
ofDirectory.__eq__ = new_instancemethod(_openframeworks.ofDirectory___eq__, None, ofDirectory)
ofDirectory.__ne__ = new_instancemethod(_openframeworks.ofDirectory___ne__, None, ofDirectory)
ofDirectory.__lt__ = new_instancemethod(_openframeworks.ofDirectory___lt__, None, ofDirectory)
ofDirectory.__le__ = new_instancemethod(_openframeworks.ofDirectory___le__, None, ofDirectory)
ofDirectory.__gt__ = new_instancemethod(_openframeworks.ofDirectory___gt__, None, ofDirectory)
ofDirectory.__ge__ = new_instancemethod(_openframeworks.ofDirectory___ge__, None, ofDirectory)
ofDirectory_swigregister = _openframeworks.ofDirectory_swigregister
ofDirectory_swigregister(ofDirectory)

def ofDirectory_createDirectory(dirPath, bRelativeToData=True, recursive=False):
    return _openframeworks.ofDirectory_createDirectory(dirPath, bRelativeToData, recursive)
ofDirectory_createDirectory = _openframeworks.ofDirectory_createDirectory

def ofDirectory_isDirectoryEmpty(dirPath, bRelativeToData=True):
    return _openframeworks.ofDirectory_isDirectoryEmpty(dirPath, bRelativeToData)
ofDirectory_isDirectoryEmpty = _openframeworks.ofDirectory_isDirectoryEmpty

def ofDirectory_doesDirectoryExist(dirPath, bRelativeToData=True):
    return _openframeworks.ofDirectory_doesDirectoryExist(dirPath, bRelativeToData)
ofDirectory_doesDirectoryExist = _openframeworks.ofDirectory_doesDirectoryExist

def ofDirectory_removeDirectory(path, deleteIfNotEmpty, bRelativeToData=True):
    return _openframeworks.ofDirectory_removeDirectory(path, deleteIfNotEmpty, bRelativeToData)
ofDirectory_removeDirectory = _openframeworks.ofDirectory_removeDirectory


def log(level, message):
    return _openframeworks.log(level, message)
log = _openframeworks.log
OF_LOG_VERBOSE = _openframeworks.OF_LOG_VERBOSE
OF_LOG_NOTICE = _openframeworks.OF_LOG_NOTICE
OF_LOG_WARNING = _openframeworks.OF_LOG_WARNING
OF_LOG_ERROR = _openframeworks.OF_LOG_ERROR
OF_LOG_FATAL_ERROR = _openframeworks.OF_LOG_FATAL_ERROR
OF_LOG_SILENT = _openframeworks.OF_LOG_SILENT
OF_CONSOLE_COLOR_RESTORE = _openframeworks.OF_CONSOLE_COLOR_RESTORE
OF_CONSOLE_COLOR_BLACK = _openframeworks.OF_CONSOLE_COLOR_BLACK
OF_CONSOLE_COLOR_RED = _openframeworks.OF_CONSOLE_COLOR_RED
OF_CONSOLE_COLOR_GREEN = _openframeworks.OF_CONSOLE_COLOR_GREEN
OF_CONSOLE_COLOR_YELLOW = _openframeworks.OF_CONSOLE_COLOR_YELLOW
OF_CONSOLE_COLOR_BLUE = _openframeworks.OF_CONSOLE_COLOR_BLUE
OF_CONSOLE_COLOR_PURPLE = _openframeworks.OF_CONSOLE_COLOR_PURPLE
OF_CONSOLE_COLOR_CYAN = _openframeworks.OF_CONSOLE_COLOR_CYAN
OF_CONSOLE_COLOR_WHITE = _openframeworks.OF_CONSOLE_COLOR_WHITE

def ofSetLogLevel(*args):
    return _openframeworks.ofSetLogLevel(*args)
ofSetLogLevel = _openframeworks.ofSetLogLevel

def ofGetLogLevel(*args):
    return _openframeworks.ofGetLogLevel(*args)
ofGetLogLevel = _openframeworks.ofGetLogLevel

def ofGetLogLevelName(level, pad=False):
    return _openframeworks.ofGetLogLevelName(level, pad)
ofGetLogLevelName = _openframeworks.ofGetLogLevelName

def ofLogToFile(path, append=False):
    return _openframeworks.ofLogToFile(path, append)
ofLogToFile = _openframeworks.ofLogToFile

def ofLogToConsole():
    return _openframeworks.ofLogToConsole()
ofLogToConsole = _openframeworks.ofLogToConsole

def ofGetLoggerChannel():
    return _openframeworks.ofGetLoggerChannel()
ofGetLoggerChannel = _openframeworks.ofGetLoggerChannel
class ofFileDialogResult(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _openframeworks.ofFileDialogResult_swiginit(self, _openframeworks.new_ofFileDialogResult())
    filePath = _swig_property(_openframeworks.ofFileDialogResult_filePath_get, _openframeworks.ofFileDialogResult_filePath_set)
    fileName = _swig_property(_openframeworks.ofFileDialogResult_fileName_get, _openframeworks.ofFileDialogResult_fileName_set)
    bSuccess = _swig_property(_openframeworks.ofFileDialogResult_bSuccess_get, _openframeworks.ofFileDialogResult_bSuccess_set)
    __swig_destroy__ = _openframeworks.delete_ofFileDialogResult
ofFileDialogResult.getName = new_instancemethod(_openframeworks.ofFileDialogResult_getName, None, ofFileDialogResult)
ofFileDialogResult.getPath = new_instancemethod(_openframeworks.ofFileDialogResult_getPath, None, ofFileDialogResult)
ofFileDialogResult_swigregister = _openframeworks.ofFileDialogResult_swigregister
ofFileDialogResult_swigregister(ofFileDialogResult)


def ofSystemAlertDialog(errorMessage):
    return _openframeworks.ofSystemAlertDialog(errorMessage)
ofSystemAlertDialog = _openframeworks.ofSystemAlertDialog

def ofSystemLoadDialog(*args):
    return _openframeworks.ofSystemLoadDialog(*args)
ofSystemLoadDialog = _openframeworks.ofSystemLoadDialog

def ofSystemSaveDialog(defaultName, messageName):
    return _openframeworks.ofSystemSaveDialog(defaultName, messageName)
ofSystemSaveDialog = _openframeworks.ofSystemSaveDialog

def ofSystemTextBoxDialog(*args):
    return _openframeworks.ofSystemTextBoxDialog(*args)
ofSystemTextBoxDialog = _openframeworks.ofSystemTextBoxDialog
class ofHttpRequest(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openframeworks.ofHttpRequest_swiginit(self, _openframeworks.new_ofHttpRequest(*args))
    url = _swig_property(_openframeworks.ofHttpRequest_url_get, _openframeworks.ofHttpRequest_url_set)
    name = _swig_property(_openframeworks.ofHttpRequest_name_get, _openframeworks.ofHttpRequest_name_set)
    saveTo = _swig_property(_openframeworks.ofHttpRequest_saveTo_get, _openframeworks.ofHttpRequest_saveTo_set)
    headers = _swig_property(_openframeworks.ofHttpRequest_headers_get, _openframeworks.ofHttpRequest_headers_set)
    body = _swig_property(_openframeworks.ofHttpRequest_body_get, _openframeworks.ofHttpRequest_body_set)
    contentType = _swig_property(_openframeworks.ofHttpRequest_contentType_get, _openframeworks.ofHttpRequest_contentType_set)
    done = _swig_property(_openframeworks.ofHttpRequest_done_get, _openframeworks.ofHttpRequest_done_set)
    timeoutSeconds = _swig_property(_openframeworks.ofHttpRequest_timeoutSeconds_get, _openframeworks.ofHttpRequest_timeoutSeconds_set)
    GET = _openframeworks.ofHttpRequest_GET
    POST = _openframeworks.ofHttpRequest_POST
    method = _swig_property(_openframeworks.ofHttpRequest_method_get, _openframeworks.ofHttpRequest_method_set)
    __swig_destroy__ = _openframeworks.delete_ofHttpRequest
ofHttpRequest.getId = new_instancemethod(_openframeworks.ofHttpRequest_getId, None, ofHttpRequest)
ofHttpRequest_swigregister = _openframeworks.ofHttpRequest_swigregister
ofHttpRequest_swigregister(ofHttpRequest)

class ofHttpResponse(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _openframeworks.ofHttpResponse_swiginit(self, _openframeworks.new_ofHttpResponse(*args))
    request = _swig_property(_openframeworks.ofHttpResponse_request_get, _openframeworks.ofHttpResponse_request_set)
    data = _swig_property(_openframeworks.ofHttpResponse_data_get, _openframeworks.ofHttpResponse_data_set)
    status = _swig_property(_openframeworks.ofHttpResponse_status_get, _openframeworks.ofHttpResponse_status_set)
    error = _swig_property(_openframeworks.ofHttpResponse_error_get, _openframeworks.ofHttpResponse_error_set)
    __swig_destroy__ = _openframeworks.delete_ofHttpResponse
ofHttpResponse_swigregister = _openframeworks.ofHttpResponse_swigregister
ofHttpResponse_swigregister(ofHttpResponse)


def ofLoadURL(url):
    return _openframeworks.ofLoadURL(url)
ofLoadURL = _openframeworks.ofLoadURL

def ofLoadURLAsync(*args):
    return _openframeworks.ofLoadURLAsync(*args)
ofLoadURLAsync = _openframeworks.ofLoadURLAsync

def ofSaveURLTo(url, path):
    return _openframeworks.ofSaveURLTo(url, path)
ofSaveURLTo = _openframeworks.ofSaveURLTo

def ofSaveURLAsync(url, path):
    return _openframeworks.ofSaveURLAsync(url, path)
ofSaveURLAsync = _openframeworks.ofSaveURLAsync

def ofRemoveURLRequest(id):
    return _openframeworks.ofRemoveURLRequest(id)
ofRemoveURLRequest = _openframeworks.ofRemoveURLRequest

def ofRemoveAllURLRequests():
    return _openframeworks.ofRemoveAllURLRequests()
ofRemoveAllURLRequests = _openframeworks.ofRemoveAllURLRequests

def ofStopURLLoader():
    return _openframeworks.ofStopURLLoader()
ofStopURLLoader = _openframeworks.ofStopURLLoader
class ofURLFileLoader(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _openframeworks.ofURLFileLoader_swiginit(self, _openframeworks.new_ofURLFileLoader())
    __swig_destroy__ = _openframeworks.delete_ofURLFileLoader
ofURLFileLoader.get = new_instancemethod(_openframeworks.ofURLFileLoader_get, None, ofURLFileLoader)
ofURLFileLoader.getAsync = new_instancemethod(_openframeworks.ofURLFileLoader_getAsync, None, ofURLFileLoader)
ofURLFileLoader.saveTo = new_instancemethod(_openframeworks.ofURLFileLoader_saveTo, None, ofURLFileLoader)
ofURLFileLoader.saveAsync = new_instancemethod(_openframeworks.ofURLFileLoader_saveAsync, None, ofURLFileLoader)
ofURLFileLoader.remove = new_instancemethod(_openframeworks.ofURLFileLoader_remove, None, ofURLFileLoader)
ofURLFileLoader.clear = new_instancemethod(_openframeworks.ofURLFileLoader_clear, None, ofURLFileLoader)
ofURLFileLoader.stop = new_instancemethod(_openframeworks.ofURLFileLoader_stop, None, ofURLFileLoader)
ofURLFileLoader.handleRequest = new_instancemethod(_openframeworks.ofURLFileLoader_handleRequest, None, ofURLFileLoader)
ofURLFileLoader.handleRequestAsync = new_instancemethod(_openframeworks.ofURLFileLoader_handleRequestAsync, None, ofURLFileLoader)
ofURLFileLoader_swigregister = _openframeworks.ofURLFileLoader_swigregister
ofURLFileLoader_swigregister(ofURLFileLoader)

class ofVideoGrabber(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _openframeworks.ofVideoGrabber_swiginit(self, _openframeworks.new_ofVideoGrabber())
    __swig_destroy__ = _openframeworks.delete_ofVideoGrabber
ofVideoGrabber.listDevices = new_instancemethod(_openframeworks.ofVideoGrabber_listDevices, None, ofVideoGrabber)
ofVideoGrabber.isFrameNew = new_instancemethod(_openframeworks.ofVideoGrabber_isFrameNew, None, ofVideoGrabber)
ofVideoGrabber.update = new_instancemethod(_openframeworks.ofVideoGrabber_update, None, ofVideoGrabber)
ofVideoGrabber.close = new_instancemethod(_openframeworks.ofVideoGrabber_close, None, ofVideoGrabber)
ofVideoGrabber.setup = new_instancemethod(_openframeworks.ofVideoGrabber_setup, None, ofVideoGrabber)
ofVideoGrabber.setPixelFormat = new_instancemethod(_openframeworks.ofVideoGrabber_setPixelFormat, None, ofVideoGrabber)
ofVideoGrabber.getPixelFormat = new_instancemethod(_openframeworks.ofVideoGrabber_getPixelFormat, None, ofVideoGrabber)
ofVideoGrabber.videoSettings = new_instancemethod(_openframeworks.ofVideoGrabber_videoSettings, None, ofVideoGrabber)
ofVideoGrabber.getPixels = new_instancemethod(_openframeworks.ofVideoGrabber_getPixels, None, ofVideoGrabber)
ofVideoGrabber.getTexture = new_instancemethod(_openframeworks.ofVideoGrabber_getTexture, None, ofVideoGrabber)
ofVideoGrabber.getTexturePlanes = new_instancemethod(_openframeworks.ofVideoGrabber_getTexturePlanes, None, ofVideoGrabber)
ofVideoGrabber.setVerbose = new_instancemethod(_openframeworks.ofVideoGrabber_setVerbose, None, ofVideoGrabber)
ofVideoGrabber.setDeviceID = new_instancemethod(_openframeworks.ofVideoGrabber_setDeviceID, None, ofVideoGrabber)
ofVideoGrabber.setDesiredFrameRate = new_instancemethod(_openframeworks.ofVideoGrabber_setDesiredFrameRate, None, ofVideoGrabber)
ofVideoGrabber.setUseTexture = new_instancemethod(_openframeworks.ofVideoGrabber_setUseTexture, None, ofVideoGrabber)
ofVideoGrabber.isUsingTexture = new_instancemethod(_openframeworks.ofVideoGrabber_isUsingTexture, None, ofVideoGrabber)
ofVideoGrabber.draw = new_instancemethod(_openframeworks.ofVideoGrabber_draw, None, ofVideoGrabber)
ofVideoGrabber.bind = new_instancemethod(_openframeworks.ofVideoGrabber_bind, None, ofVideoGrabber)
ofVideoGrabber.unbind = new_instancemethod(_openframeworks.ofVideoGrabber_unbind, None, ofVideoGrabber)
ofVideoGrabber.setAnchorPercent = new_instancemethod(_openframeworks.ofVideoGrabber_setAnchorPercent, None, ofVideoGrabber)
ofVideoGrabber.setAnchorPoint = new_instancemethod(_openframeworks.ofVideoGrabber_setAnchorPoint, None, ofVideoGrabber)
ofVideoGrabber.resetAnchor = new_instancemethod(_openframeworks.ofVideoGrabber_resetAnchor, None, ofVideoGrabber)
ofVideoGrabber.getHeight = new_instancemethod(_openframeworks.ofVideoGrabber_getHeight, None, ofVideoGrabber)
ofVideoGrabber.getWidth = new_instancemethod(_openframeworks.ofVideoGrabber_getWidth, None, ofVideoGrabber)
ofVideoGrabber.isInitialized = new_instancemethod(_openframeworks.ofVideoGrabber_isInitialized, None, ofVideoGrabber)
ofVideoGrabber.setGrabber = new_instancemethod(_openframeworks.ofVideoGrabber_setGrabber, None, ofVideoGrabber)
ofVideoGrabber_swigregister = _openframeworks.ofVideoGrabber_swigregister
ofVideoGrabber_swigregister(ofVideoGrabber)

class ofVideoPlayer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _openframeworks.ofVideoPlayer_swiginit(self, _openframeworks.new_ofVideoPlayer())
    __swig_destroy__ = _openframeworks.delete_ofVideoPlayer
ofVideoPlayer.load = new_instancemethod(_openframeworks.ofVideoPlayer_load, None, ofVideoPlayer)
ofVideoPlayer.loadAsync = new_instancemethod(_openframeworks.ofVideoPlayer_loadAsync, None, ofVideoPlayer)
ofVideoPlayer.getMoviePath = new_instancemethod(_openframeworks.ofVideoPlayer_getMoviePath, None, ofVideoPlayer)
ofVideoPlayer.setPixelFormat = new_instancemethod(_openframeworks.ofVideoPlayer_setPixelFormat, None, ofVideoPlayer)
ofVideoPlayer.getPixelFormat = new_instancemethod(_openframeworks.ofVideoPlayer_getPixelFormat, None, ofVideoPlayer)
ofVideoPlayer.closeMovie = new_instancemethod(_openframeworks.ofVideoPlayer_closeMovie, None, ofVideoPlayer)
ofVideoPlayer.close = new_instancemethod(_openframeworks.ofVideoPlayer_close, None, ofVideoPlayer)
ofVideoPlayer.update = new_instancemethod(_openframeworks.ofVideoPlayer_update, None, ofVideoPlayer)
ofVideoPlayer.play = new_instancemethod(_openframeworks.ofVideoPlayer_play, None, ofVideoPlayer)
ofVideoPlayer.stop = new_instancemethod(_openframeworks.ofVideoPlayer_stop, None, ofVideoPlayer)
ofVideoPlayer.isFrameNew = new_instancemethod(_openframeworks.ofVideoPlayer_isFrameNew, None, ofVideoPlayer)
ofVideoPlayer.getPixels = new_instancemethod(_openframeworks.ofVideoPlayer_getPixels, None, ofVideoPlayer)
ofVideoPlayer.getPosition = new_instancemethod(_openframeworks.ofVideoPlayer_getPosition, None, ofVideoPlayer)
ofVideoPlayer.getSpeed = new_instancemethod(_openframeworks.ofVideoPlayer_getSpeed, None, ofVideoPlayer)
ofVideoPlayer.getDuration = new_instancemethod(_openframeworks.ofVideoPlayer_getDuration, None, ofVideoPlayer)
ofVideoPlayer.getIsMovieDone = new_instancemethod(_openframeworks.ofVideoPlayer_getIsMovieDone, None, ofVideoPlayer)
ofVideoPlayer.setPosition = new_instancemethod(_openframeworks.ofVideoPlayer_setPosition, None, ofVideoPlayer)
ofVideoPlayer.setVolume = new_instancemethod(_openframeworks.ofVideoPlayer_setVolume, None, ofVideoPlayer)
ofVideoPlayer.setLoopState = new_instancemethod(_openframeworks.ofVideoPlayer_setLoopState, None, ofVideoPlayer)
ofVideoPlayer.getLoopState = new_instancemethod(_openframeworks.ofVideoPlayer_getLoopState, None, ofVideoPlayer)
ofVideoPlayer.setSpeed = new_instancemethod(_openframeworks.ofVideoPlayer_setSpeed, None, ofVideoPlayer)
ofVideoPlayer.setFrame = new_instancemethod(_openframeworks.ofVideoPlayer_setFrame, None, ofVideoPlayer)
ofVideoPlayer.setUseTexture = new_instancemethod(_openframeworks.ofVideoPlayer_setUseTexture, None, ofVideoPlayer)
ofVideoPlayer.isUsingTexture = new_instancemethod(_openframeworks.ofVideoPlayer_isUsingTexture, None, ofVideoPlayer)
ofVideoPlayer.getTexture = new_instancemethod(_openframeworks.ofVideoPlayer_getTexture, None, ofVideoPlayer)
ofVideoPlayer.getTexturePlanes = new_instancemethod(_openframeworks.ofVideoPlayer_getTexturePlanes, None, ofVideoPlayer)
ofVideoPlayer.draw = new_instancemethod(_openframeworks.ofVideoPlayer_draw, None, ofVideoPlayer)
ofVideoPlayer.bind = new_instancemethod(_openframeworks.ofVideoPlayer_bind, None, ofVideoPlayer)
ofVideoPlayer.unbind = new_instancemethod(_openframeworks.ofVideoPlayer_unbind, None, ofVideoPlayer)
ofVideoPlayer.setAnchorPercent = new_instancemethod(_openframeworks.ofVideoPlayer_setAnchorPercent, None, ofVideoPlayer)
ofVideoPlayer.setAnchorPoint = new_instancemethod(_openframeworks.ofVideoPlayer_setAnchorPoint, None, ofVideoPlayer)
ofVideoPlayer.resetAnchor = new_instancemethod(_openframeworks.ofVideoPlayer_resetAnchor, None, ofVideoPlayer)
ofVideoPlayer.setPaused = new_instancemethod(_openframeworks.ofVideoPlayer_setPaused, None, ofVideoPlayer)
ofVideoPlayer.getCurrentFrame = new_instancemethod(_openframeworks.ofVideoPlayer_getCurrentFrame, None, ofVideoPlayer)
ofVideoPlayer.getTotalNumFrames = new_instancemethod(_openframeworks.ofVideoPlayer_getTotalNumFrames, None, ofVideoPlayer)
ofVideoPlayer.firstFrame = new_instancemethod(_openframeworks.ofVideoPlayer_firstFrame, None, ofVideoPlayer)
ofVideoPlayer.nextFrame = new_instancemethod(_openframeworks.ofVideoPlayer_nextFrame, None, ofVideoPlayer)
ofVideoPlayer.previousFrame = new_instancemethod(_openframeworks.ofVideoPlayer_previousFrame, None, ofVideoPlayer)
ofVideoPlayer.getHeight = new_instancemethod(_openframeworks.ofVideoPlayer_getHeight, None, ofVideoPlayer)
ofVideoPlayer.getWidth = new_instancemethod(_openframeworks.ofVideoPlayer_getWidth, None, ofVideoPlayer)
ofVideoPlayer.isPaused = new_instancemethod(_openframeworks.ofVideoPlayer_isPaused, None, ofVideoPlayer)
ofVideoPlayer.isLoaded = new_instancemethod(_openframeworks.ofVideoPlayer_isLoaded, None, ofVideoPlayer)
ofVideoPlayer.isPlaying = new_instancemethod(_openframeworks.ofVideoPlayer_isPlaying, None, ofVideoPlayer)
ofVideoPlayer.isInitialized = new_instancemethod(_openframeworks.ofVideoPlayer_isInitialized, None, ofVideoPlayer)
ofVideoPlayer.setPlayer = new_instancemethod(_openframeworks.ofVideoPlayer_setPlayer, None, ofVideoPlayer)
ofVideoPlayer_swigregister = _openframeworks.ofVideoPlayer_swigregister
ofVideoPlayer_swigregister(ofVideoPlayer)



